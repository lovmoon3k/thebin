/******************************************************************************

                              Online C++ Compiler.
               Code, Compile, Run and Debug C++ program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <bits/stdc++.h>

using namespace std;

int getParent(vector<int>& parent, int ele) {
    // cout<<"\t"<<ele<<"\n";
    if(parent[ele] == ele) {
        return ele;
    } 
    int currentEleParent = getParent(parent, parent[ele]);
    parent[ele] = currentEleParent;
    
    return currentEleParent;
}

void unionn(vector<int> &parent, vector<int> &size, int ele1, int ele2) {
    // cout<<"in union"<<"\t"<<ele1<<" "<<ele2<<"\n";
    int p1 = getParent(parent, ele1);
    int p2 = getParent(parent, ele2);
    // cout<<"in union"<<"\t"<<p1<<" "<<p2<<"\n";
    
    // cout<<"in union"<<"\t"<<size[p1]<<" "<<size[p2]<<"\n\n";
    
    if(size[p2] > size[p1]) {
        int temp = ele1;
        ele1 = ele2;
        ele2 = temp;
        
        temp = p1;
        p1 = p2;
        p2 = temp;
    }
    
    
    size[p1] = size[p1] + size[p2];
    
    parent[p2] = p1;
    parent[ele2] = p1;
    parent[ele1] = p1;
    
}

vector<int> getTheGroups(int n, vector<string> queryType, vector<int> student1, vector<int> student2) {
    vector<int> parent(n+1);
    vector<int> size(n+1, 1);
    vector<int> ans;
    for(int i = 0; i<=n; i++) {
        parent[i] = i;
    }
    
    for(int idx = 0; idx < queryType.size(); idx += 1) {
        string query = queryType[idx];
        int s1 = student1[idx];
        int s2 = student2[idx];
        
        if(query == "Friend") {
            unionn(parent, size, student1[idx], student2[idx]);
            // for(int i = 1; i<= n; i++) {
            //     cout<<i<<" ";
            // } cout<<endl;
            // for(int i = 1; i<= n; i++) {
            //     cout<<parent[i]<<" ";
            // } cout<<endl;
            // for(int i = 1; i<= n; i++) {
            //     cout<<size[i]<<" ";
            // } cout<<endl<<endl;
        } else {
            int p1 = getParent(parent, s1);
            int p2 = getParent(parent, s2);
            
            // cout<<"in total "<<p1<<" "<<p2<<endl;
            
            // cout<<"\t"<<size[p1]<<endl;
            // cout<<"\t"<<size[p2]<<endl;
            
            
            if(p1 == p2) {
                ans.push_back(size[p1]);
            } else {
                int tot = size[p1] + size[p2];
                ans.push_back(size[p1] + size[p2]);
            }
        }
    }
    
    return ans;
}

int main()
{
    // cout<<"Hello World";
    
    vector<string> queryType;
    queryType.push_back("Friend");
    queryType.push_back("Friend");
    queryType.push_back("Total");
    
    vector<int> student1;
    student1.push_back(4);
    student1.push_back(2);
    student1.push_back(2);
    
    vector<int> student2;
    student2.push_back(1);
    student2.push_back(4);
    student2.push_back(3);
     
    vector<int> t = getTheGroups(5, queryType, student1, student2);
    
    for(int i: t) {
        cout<<i<<endl;
    }
    return 0;
}
