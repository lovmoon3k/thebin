-- IMPORTS THE API_TURTLEEXT LIBRARY
os.loadAPI("api_turtleExt")

-- DEFINES THE CONFIGURATION VARIABLE
configuration = {
  numOres = 0
}
-- Checks if the block is special
function isSpecial(configuration, dir)
  api_turtleExt.turnTo(dir)
  local tDir=api_turtleExt.turnedDir(dir)
  if not api_turtleExt.detect(tDir) then
    return false
  end
  if api_turtleExt.compare(tDir, i) then
      api_turtleExt.turnFrom(dir)
      return false
  end
  api_turtleExt.turnFrom(dir)
  return true
end
        
-- DEFINES THE FUNCTION THAT WILL EXCAVATE THE AREA
function excavate(configuration)
  local numSteps = 0
  local steps = {}
  repeat
    steps[numSteps] = steps[numSteps] or 0
    steps[numSteps] = lookForOres(configuration, steps[numSteps])  
    if steps[numSteps] ~= 7 then
      if ((numSteps==0) or (steps[numSteps]~=api_turtleExt.reverseIntDir(steps[numSteps-1]))) then
        if api_turtleExt.digAndMove(api_turtleExt.turnedDir(api_turtleExt.intToDir(steps[numSteps]))) == 1 then
          configuration.numOres=configuration.numOres+1
          numSteps = numSteps + 1
        end
      end
    else
      steps[numSteps] = 0
      numSteps = numSteps - 1
      if numSteps >= 0 then
        api_turtleExt.digAndMove(api_turtleExt.reverseDir(api_turtleExt.turnedDir(api_turtleExt.intToDir(steps[numSteps]))), 1, 0)
      end
    end
  until numSteps < 0
end
 
-- LOOKS AROUND THE CURRENT POSITION, LOOKING FOR ORES
function lookForOres(configuration, dir)
  if dir < 1 then
    dir = dir + 1
    if isSpecial(configuration, up) then
      return 1
    end
  end
  if dir < 2 then
    dir = dir + 1
    if isSpecial(configuration, down) then
      return 2
    end
  end
  if dir > 2 then
    api_turtleExt.turnTo(left)
  end
  for dir=dir+1, 6 do
    if isSpecial(configuration, forward) then
      return dir
    end
    api_turtleExt.turnTo(left)
  end
  return 7
end

-- RUN THE EXCAVATE FUNCTION
excavate(configuration)
