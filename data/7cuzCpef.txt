from collections import defaultdict
from math import log

class MyNaiveBayes():
    def __init__(self, alpha=1):
        self.a = alpha
        
    def fit(self, X: np.ndarray, y: np.ndarray):
        assert X.ndim == 2
        assert y.ndim == 1
        self.features_0 = X[(y == 0), ...].T
        self.features_1 = X[(y == 1), ...].T
        self.c_1 = y.sum() / y.shape[0]
        self.c_0 = 1 - self.c_1
        self.total_0 = self.features_0.shape[1]
        self.total_1 = self.features_1.shape[1]
        return self
    
    def _predict(self, X):
        feat_0 = np.array(list(np.where((self.features_0[i] == X[i]).sum() / self.total_0,
                                        1, 0) for i in range(self.features_0.shape[0])))
        feat_1 = np.array(list(np.where((self.features_1[i] == X[i]).sum() / self.total_1,
                                        1, 0) for i in range(self.features_1.shape[0])))
        res_0 = np.log(self.c_0) + (np.log(feat_0 + self.a)).sum()
        res_1 = np.log(self.c_1) + (np.log(feat_1 + self.a)).sum()
        return 0 if res_0 > res_1 else 1
            
    def predict(self, X: np.ndarray):
        assert X.ndim == 2
        y = np.array(list(self._predict(x) for x in X))
        return y