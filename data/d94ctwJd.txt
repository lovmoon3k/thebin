from tkinter import *
from tkinter.scrolledtext import ScrolledText
import tkinter.font
from tkinter import *
import tkinter as tk
from tkinter import ttk
from math import sqrt
root = Tk()

class Circle:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __repr__(self):
        return "Circle()"
    def __str__(self):
        return "(" + str(self.x) + "," + str(self.y) + ")" 
    def __eq__(self, other):
        return ((self.x, self.y) == (other.x, other.y))

# Struktura pary kół opisująca jakiś rezultat
class CircleCollision:
    def __init__(self, c1, c2):
        self.c1 = c1
        self.c2 = c2
    def __repr__(self):
        return str(self)
    def __str__(self):
        return str(self.c1) + " kolizja z " + str(self.c2)

inputData = [] # ( ( item index ) , value )
circles = []
errors = []
rowsDrawn = 0
Submit = {}
collisions = []

warning = []

def ValidateFloat(text):
  if( len(text) >= 23 ):
    return (False, -1)
  try:
      x = int(text)
      return (True, x)
  except ValueError:
      return (False, -1)

def isInData(item):
  matches = [ind for ind, x in enumerate(inputData) if x[0] == item]
  return -1 if len(matches) == 0 else matches[0]
  
def isInErrors(item):
  matches = [ind for ind, x in enumerate(errors) if x == item]
  return -1 if len(matches) == 0 else matches[0]

def AddEntries():
  global rowsDrawn # search beyond local scope

  id = rowsDrawn
  rowsDrawn += 1

  label = Frame()
  lbl = Label(label, text=f"item {id}")
  lbl.pack(side=LEFT)

  box.window_create(END, window=label)
  box.insert(END, '\n')

  entries = Frame()

  sv = StringVar()
  sv.trace("w", lambda name, index, mode, params=(sv,id): callback(params[0], (params[1], 0)))
  
  button1 = Entry(entries, textvariable=sv)
  button1.pack(side=LEFT)

  sv2 = StringVar()
  sv2.trace("w", lambda name, index, mode, params=(sv2,id): callback(params[0], (params[1], 1)))

  button2 = Entry(entries, textvariable=sv2)
  button2.pack(side=LEFT)  

  box.window_create(END, window=entries)
  box.insert(END, '\n')

def callback(sv, item):
  global rowsDrawn # search beyond local scope
  print(inputData)
  result = ValidateFloat(sv.get())
  index = isInData(item)
  errorState = isInErrors(item)

  if sv.get() == "":
    if errorState > -1:
      print("Usuwam item " + str(item) + " z listy error")
      errors.pop(errorState) 

    if index > -1:
      inputData.pop(index)

    if len(errors) == 0:
      Submit["state"] = "normal"
      warning["text"] = ""
    else:
      Submit["state"] = "disabled"
      warnMessage = "Są blędy w kolach: "
      for i in range(min(len(errors), 4)):
        warnMessage += str(errors[i][0]) + ( "x" if errors[i][1] == 0 else "y" ) + ", "
      if len(errors) > 4:
        warnMessage = warnMessage + "..."
      else:
        warnMessage = warnMessage[:-2]
      warning["text"] = warnMessage
    return
  
  if result[0]:
    if errorState > -1:
      print("Usuwam item " + str(item) + " z listy error")
      errors.pop(errorState) 
    if index > -1:
      inputData[index] = ( item , result[1] ) 
    else:
      inputData.append(( item , result[1] ))
  else:
    if errorState == -1:
      print("Dodaje item " + str(item) + " do listy error")
      errors.append(item)

    if index > -1:
      inputData.pop(index) 

  if rowsDrawn*2 == len(inputData):
    AddEntries()

  if len(errors) == 0:
    Submit["state"] = "normal"
    warning["text"] = ""
  else:
    Submit["state"] = "disabled"
    warnMessage = "Są blędy w kolach: "
    for i in range(min(len(errors), 4)):
      warnMessage += str(errors[i][0]) + ( "x" if errors[i][1] == 0 else "y" ) + ", "
    if len(errors) > 4:
      warnMessage = warnMessage + "..."
    else:
      warnMessage = warnMessage[:-2]
    warning["text"] = warnMessage


# Funkcja obliczająca odległość euklidesową między dwoma punktami (x1, y1) i (x2, y2)
def distance(x1, y1, x2, y2):
    return sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)

def find_collisions(circles):
  circles.sort(key=lambda c: c.x)
  collisions = []
  for i in range(0,len(circles)):
      for j in range(i+1,len(circles)):
          c1 = circles[i]
          c2 = circles[j]
          d = distance(c1.x, c1.y, c2.x, c2.y)
          if d < 2:
              collisions.append(CircleCollision(c1, c2))
  return collisions

def onClick(): # gdy para nie istnieje tzn. 1 nie ma dopisanego 2 lub na odwrót poprostu zignoruj wpisany rekord
  global root
  temp = []
  for i in range(rowsDrawn-1):
    temp.append([0,0])

  for x in inputData:
    id = x[0]
    value = x[1]
    temp[id[0]][id[1]] = value   

  for x in temp:
    circles.append(Circle(x[0],x[1]))

  #Obliczanie wyniku
  collisions = find_collisions(circles)

  root.destroy()

  root=Tk()
  root.iconphoto(False, tk.PhotoImage(file='test.png'))
  root.title("Kolizja kół-Wyniki")
  root.geometry('1600x1000+50+50')
  root.resizable(False, False)
  exit_button=ttk.Button(root,text="Zakończenie programu",command=root.destroy)
  exit_button.pack(side=BOTTOM,fill='both',)
  c = tk.Canvas(root,bg='black',height=1050,width=1680)
  c.pack()

  image = PhotoImage(file="siema.png")
  c.create_image(800, 500, image=image)

  c.create_text(800, 20, text="Znalezione kolizje kół:", fill="white",font ='Arial 30 bold',)

  i=0
  a=0
  b=0

  fontsize = 25 - len(collisions)//10 * 2
  print(fontsize)
  print(len(collisions))
  myfont = tkinter.font.Font(family='Arial',size=fontsize,weight="bold")
  if(fontsize>12):
      for i in range(len(collisions)-1):
          outtext = str(collisions[i])
          c.create_text(300+a, 80+b, text=outtext, fill="black", font=myfont)
          c.create_text(301 + a, 81 + b, text=outtext, fill="white", font=myfont)
          if ((i+1)%3==0 and i!=0) :
              b+=40
              a=0
          else:
              a += 450
          i+=1
  else:
      for i in range(len(collisions)-1):
          outtext = str(collisions[i])
          c.create_text(325+a, 80+b, text=outtext, fill="black", font=myfont)
          c.create_text(326 + a, 81 + b, text=outtext, fill="white", font=myfont)
          if ((i+1)%4==0 and i!=0) :
              b+=40
              a=0
          else:
              a += 300
          i+=1

  root.mainloop()

label = Label(root, text='Witaj! Wprowadź koordynaty kól do sprawdzenia:')
label.pack()

label = Label(root, text='Możesz zostawić puste pola tam gdzie nie chcesz wpisywać danych')
label.pack()

label = Label(root, text='Gdy wszystko będzie gotowe naciśnij przycisk Submit')
label.pack()

box = ScrolledText(root, width=50)
#box.insert(END)
box.pack()

warning = Label(root, text='',fg='#f00')
warning.pack()

AddEntries()

Submit = Button(root, text="Submit" , command=onClick)
Submit.pack()

root.mainloop()