#include <iostream>
#include <vector>
#include <string>
#include <set>
#include <map>
#include <deque>
#include <algorithm>
#include <cmath>
#include <unordered_map>
#include <cassert>
#include <unordered_set>

using namespace std;
typedef long long ll;

const ll MOD = 1e9 + 7;
ll dp[2][3][4][5][6][7][8];
ll dp2[2][3][4][5][6][7][8];

void solve() {
	int n, m, last, a, b, c, d, e, f, g;
	ll ans = 0;
	cin >> n >> m;
	vector <bool> keys(9, false);
	int i, j;
	for (i = 0; i < m; i++) {
		cin >> j;
		keys[j] = true;
	}
	dp[0][0][0][0][0][0][0] = 1;
	for (i = 0; i < n; i++) {
		for (a = 0; a < 2; a++) {
			for (b = 0; b < 3; b++) {
				for (c = 0; c < 4; c++) {
					for (d = 0; d < 5; d++) {
						for (e = 0; e < 6; e++) {
							for (f = 0; f < 7; f++) {
								for (g = 0; g < 8; g++) {
									if (dp[a][b][c][d][e][f][g] == 0) continue;
									if (keys[1]) {
										dp2[max(a - 1, 0)][max(b - 1, 0)][max(c - 1, 0)][max(d - 1, 0)][max(e - 1, 0)][max(f - 1, 0)][max(g - 1, 0)] += dp[a][b][c][d][e][f][g];
										dp2[max(a - 1, 0)][max(b - 1, 0)][max(c - 1, 0)][max(d - 1, 0)][max(e - 1, 0)][max(f - 1, 0)][max(g - 1, 0)] %= MOD;
									}
									if (a == 0 && keys[2]) {
										dp2[1][max(b - 1, 0)][max(c - 1, 0)][max(d - 1, 0)][max(e - 1, 0)][max(f - 1, 0)][max(g - 1, 0)] += dp[a][b][c][d][e][f][g];
										dp2[1][max(b - 1, 0)][max(c - 1, 0)][max(d - 1, 0)][max(e - 1, 0)][max(f - 1, 0)][max(g - 1, 0)] %= MOD;
									}
									if (b == 0 && keys[3]) {
										dp2[max(a - 1, 0)][2][max(c - 1, 0)][max(d - 1, 0)][max(e - 1, 0)][max(f - 1, 0)][max(g - 1, 0)] += dp[a][b][c][d][e][f][g];
										dp2[max(a - 1, 0)][2][max(c - 1, 0)][max(d - 1, 0)][max(e - 1, 0)][max(f - 1, 0)][max(g - 1, 0)] %= MOD;
									}
									if (c == 0 && keys[4]) {
										dp2[max(a - 1, 0)][max(b - 1, 0)][3][max(d - 1, 0)][max(e - 1, 0)][max(f - 1, 0)][max(g - 1, 0)] += dp[a][b][c][d][e][f][g];
										dp2[max(a - 1, 0)][max(b - 1, 0)][3][max(d - 1, 0)][max(e - 1, 0)][max(f - 1, 0)][max(g - 1, 0)] %= MOD;
									}
									if (d == 0 && keys[5]) {
										dp2[max(a - 1, 0)][max(b - 1, 0)][max(c - 1, 0)][4][max(e - 1, 0)][max(f - 1, 0)][max(g - 1, 0)] += dp[a][b][c][d][e][f][g];
										dp2[max(a - 1, 0)][max(b - 1, 0)][max(c - 1, 0)][4][max(e - 1, 0)][max(f - 1, 0)][max(g - 1, 0)] %= MOD;
									}
									if (e == 0 && keys[6]) {
										dp2[max(a - 1, 0)][max(b - 1, 0)][max(c - 1, 0)][max(d - 1, 0)][5][max(f - 1, 0)][max(g - 1, 0)] += dp[a][b][c][d][e][f][g];
										dp2[max(a - 1, 0)][max(b - 1, 0)][max(c - 1, 0)][max(d - 1, 0)][5][max(f - 1, 0)][max(g - 1, 0)] %= MOD;
									}
									if (f == 0 && keys[7]) {
										dp2[max(a - 1, 0)][max(b - 1, 0)][max(c - 1, 0)][max(d - 1, 0)][max(e - 1, 0)][6][max(g - 1, 0)] += dp[a][b][c][d][e][f][g];
										dp2[max(a - 1, 0)][max(b - 1, 0)][max(c - 1, 0)][max(d - 1, 0)][max(e - 1, 0)][6][max(g - 1, 0)] %= MOD;
									}
									if (g == 0 && keys[8]) {
										dp2[max(a - 1, 0)][max(b - 1, 0)][max(c - 1, 0)][max(d - 1, 0)][max(e - 1, 0)][max(f - 1, 0)][7] += dp[a][b][c][d][e][f][g];
										dp2[max(a - 1, 0)][max(b - 1, 0)][max(c - 1, 0)][max(d - 1, 0)][max(e - 1, 0)][max(f - 1, 0)][7] %= MOD;
									}
								}
							}
						}
					}
				}
			}
		}
		for (a = 0; a < 2; a++) {
			for (b = 0; b < 3; b++) {
				for (c = 0; c < 4; c++) {
					for (d = 0; d < 5; d++) {
						for (e = 0; e < 6; e++) {
							for (f = 0; f < 7; f++) {
								for (g = 0; g < 8; g++) {
									dp[a][b][c][d][e][f][g] = dp2[a][b][c][d][e][f][g];
									dp2[a][b][c][d][e][f][g] = 0;
								}
							}
						}
					}
				}
			}
		}
	}
	for (a = 0; a < 2; a++) {
		for (b = 0; b < 3; b++) {
			for (c = 0; c < 4; c++) {
				for (d = 0; d < 5; d++) {
					for (e = 0; e < 6; e++) {
						for (f = 0; f < 7; f++) {
							for (g = 0; g < 8; g++) {
								ans += dp[a][b][c][d][e][f][g];
								ans %= MOD;
							}
						}
					}
				}
			}
		}
	}
	cout << ans << endl;
}

signed main() {
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	int t = 1;
	//cin >> t;
	while (t--) solve();
	system("pause");
}