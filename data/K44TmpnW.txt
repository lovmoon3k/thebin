#include <iostream>
#include <vector>
#include <string>
#include <sstream>
#include <memory.h>
#include <set>
#include <map>
#include <unordered_set>
#include <unordered_map>
#include <random>
#include <ctime>
#include <cmath>
#include <algorithm>
#include <stack>
#include <queue>
#include <deque>
#include <chrono>
#include <array>
#include <cassert>
#define int long long
#define intt __int128
#define pii pair<int,int>
#define itn int
#define swpa swap
#define fro for
#define fir first
#define sec second
#define pb push_back
#define all(v) v.begin(), v.end()
#define rall(v) v.rbegin(), r.end()
#define double long double 
#define EPS 0.000000000000001
#define INF 1000000009
#define endl '\n'
#define sp system("pause")
using namespace std;

const int N = 100005, R = 1 << 20, MOD = 998244353, logn = 19, ABC = 26, BUBEN = 450;
const double PI = acos(-1);
struct Vector {
	int first, second;
	Vector(pii a, pii b) : fir(b.fir - a.fir), sec(b.sec - a.sec) {}

};
int cp(pii a, pii b) {
	return a.first * b.second - a.second * b.first;
}
int dp(pii a, pii b) {
	return a.first * b.first + a.second * b.second;
}
int cp(Vector a, Vector b) {
	return a.first * b.second - a.second * b.first;
}
int dp(Vector a, Vector b) {
	return a.first * b.first + a.second * b.second;
}
int dist(pii a, pii b) {
	return (a.first - b.fir) * (a.first - b.fir) + (a.second - b.sec) * (a.second - b.sec);
}
struct S {
	int a, b, c;
	S(int a, int b, int c) : a(a), b(b), c(c) {}
	S() {}
};

void rec(vector<pii>& point, vector<vector<bool>>& gr, int s, int n, int i, int j, int u, int& ans) {
	if (i == s || j == s || u == s)
		return;
	if (i == j || i == u || j == u)
		return;
	if (!gr[i][s] || !gr[j][s] || !gr[u][s])
		return;
	int si = dist(point[i], point[s]);
	int sj = dist(point[j], point[s]);
	int su = dist(point[u], point[s]);

	if (su < si || su < sj)
		return;
	Vector vi(point[s], point[i]);
	Vector vj(point[s], point[j]);
	Vector vu(point[s], point[u]);
	double ui = abs(atan2(cp(vu, vi), dp(vu, vi)));
	double uj = abs(atan2(cp(vu, vj), dp(vu, vj)));

	if (cp(vu, vi) > 0 && cp(vu, vj) < 0 && PI / 4 - ui >= EPS && PI / 4 - uj >= EPS) {
		ans = su;
	}
}

vector<S> per;
int globans = 0;
vector<S> ot;
int SS = 0;
void dfs(vector<pii>& point, vector<vector<bool>>& gr, vector<bool>& used, int s, int n, int ANS, int pr) {
	used[s] = 1;
	int ans = -1;
	per.push_back({ -1, -1, -1 });
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			for (int u = 0; u < n; u++) {
				if (i == s || j == s || u == s)
					continue;
				if (i == j || i == u || j == u)
					continue;
				if (!gr[i][s] || !gr[j][s] || !gr[u][s])
					continue;
				if (used[i] || used[j] || used[u])
					continue;
				int si = dist(point[i], point[s]);
				int sj = dist(point[j], point[s]);
				int su = dist(point[u], point[s]);

				if (su < si || su < sj)
					continue;
				Vector vi(point[s], point[i]);
				Vector vj(point[s], point[j]);
				Vector vu(point[s], point[u]);
				double ui = abs(atan2(cp(vu, vi), dp(vu, vi)));
				double uj = abs(atan2(cp(vu, vj), dp(vu, vj)));

				if (cp(vu, vi) > 0 && cp(vu, vj) < 0 && (PI / 4 - ui) >= -EPS && (PI / 4 - uj) >= -EPS) {
					if (su > ans) {
						if (pr == -1) {
							ans = su;
							per.pop_back();
							used[i] = 1;
							used[j] = 1;
							per.push_back({ i, u, j });
							dfs(point, gr, used, u, n, ANS + ans, s);
							used[i] = 0;
							used[j] = 0;
						}
						else {
							Vector q1(point[SS], point[s]);
							Vector q2(point[s], point[u]);
							double ag = abs(atan2(cp(q1, q2), dp(q1, q2)));
							Vector q3(point[pr], point[s]);
							Vector q4(point[s], point[u]);
							double aq = abs(atan2(cp(q3, q4), dp(q3, q4)));
							if (PI / 4 - ag >= -EPS && PI / 4 - aq >= -EPS) {
								ans = su;
								per.pop_back();
								used[i] = 1;
								used[j] = 1;
								per.push_back({ i, u, j });
								dfs(point, gr, used, u, n, ANS + ans, s);
								used[i] = 0;
								used[j] = 0;
							}
						}
					}
				}
			}
		}
	}
	if (ANS + ans > globans) {
		globans = ANS + ans;
		ot = per;
	}
	
	per.pop_back();
	used[s] = 0;
}

signed main() {
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);
	cout.precision(17);

	int n, m, s;
	cin >> n >> m >> s;

	vector<pii> point(n);
	for (pii& i : point)
		cin >> i.fir >> i.sec;
	vector<vector<bool>> gr(n, vector<bool>(n));
	for (int i = 0; i < m; i++) {
		int a, b;
		cin >> a >> b;
		a--;
		b--;
		gr[a][b] = 1;
		gr[b][a] = 1;
	}
	s--;
	SS = s;

	vector<bool>used(n);
	dfs(point, gr, used, s, n, 0, -1);
	cout << ot.size() << " " << globans << endl;
	for (auto &u : ot)
		cout << u.a + 1 << " " << u.b + 1 << " " << u.c + 1 << endl;

	sp;
	return 0;
}
/*
4 3 1
0 0
10 0
3 -2
-1 -1

1 2
1 3
1 4


*/