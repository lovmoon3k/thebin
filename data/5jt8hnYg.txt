Vec = require('vec')
Set = require('set')
Node = require('node')
local utils = require('utils')

local pos = Vec.new(0, 0, 0)
local orientation = Vec.new(1, 0, 0)
local up = Vec.new(0, 1, 0)
local total_moves = 0
local total_turns = 0

---@type table<Vec, table>
local successors = {}

local function turnLeft()
    total_turns = total_turns + 1
    turtle.turnLeft()
    orientation = orientation:rotate(Vec.new(0, 1, 0), 90)
end

local function turnRight()
    total_turns = total_turns + 1
    turtle.turnRight()
    orientation = orientation:rotate(Vec.new(0, 1, 0), -90)
end

---comment
---@return boolean
local function forward_free()
    return turtle.detect()
end

---comment
---@return boolean
local function up_free()
    return turtle.detectUp()
end

---comment
---@return boolean
local function down_free()
    return turtle.detectDown()
end

---comment
---@return table
local function get_successors()
    local ret = Set({})
    local deltas = {
        orientation,
        orientation:rotate(Vec.new(0, 1, 0), 90),
        orientation:rotate(Vec.new(0, 1, 0), 180),
        orientation:rotate(Vec.new(0, 1, 0), 270),
        up,
        up:neg()
    }
    local left_turns = 0

    for i = 1, 4 do
        if successors[pos] ~= nil then
            if successors[pos].has(pos:add(deltas[i])) then
                ret.insert(pos:add(deltas[i]))
            end
        else
            if forward_free() then
                ret.insert(pos:add(orientation))
            end
            turnLeft()
            left_turns = left_turns + 1
        end
    end

    for i = 1, left_turns do
        turnRight()
    end

    if up_free() then
        ret.insert(deltas[5])
    end
    if down_free() then
        ret.insert(deltas[6])
    end

    return ret
end

---comment
---@return boolean
local function move_forward()
    total_moves = total_moves + 1
    return turtle.forward()
end

---comment
---@return boolean
local function move_back()
    total_moves = total_moves + 1
    return turtle.back()
end

---comment
---@return boolean
local function move_up()
    total_moves = total_moves + 1
    return turtle.up()
end

---comment
---@return boolean
local function move_down()
    total_moves = total_moves + 1
    return turtle.down()
end

---comment
---@param delta integer
---@return boolean
local function moveX(delta)
    if delta == 0 then
        return true
    end
    while orientation.x == 0 do
        turnLeft()
    end
    local f = {
        [{1, 1}] = move_forward,
        [{-1, 1}] = move_back,
        [{-1,-1}] = move_forward,
        [{1, -1}] = move_back
    }
    local move = f[{utils.sign(delta), orientation.x}]
    for i = 1, math.abs(delta) do
        if not move() then
            return false
        end
    end
    return true
end

---comment
---@param delta integer
---@return boolean
local function moveY(delta)
    if delta == 0 then
        return true
    end
    local move = move_up
    if delta < 0 then
        move = move_down
    end
    
    for i = 1, math.abs(delta) do
        if not move() then
            return false
        end
    end
    return true
end

---comment
---@param delta integer
---@return boolean
local function moveZ(delta)
    if delta == 0 then
        return true
    end
    while orientation.z == 0 do
        turnLeft()
    end
    local f = {
        [{1, 1}] = move_forward,
        [{-1, 1}] = move_back,
        [{-1,-1}] = move_forward,
        [{1, -1}] = move_back
    }
    local move = f[{utils.sign(delta), orientation.z}]
    for i = 1, math.abs(delta) do
        if not move() then
            return false
        end
    end
    return true
end

---comment
---@param new_pos Vec
---@return boolean
local function moveTo(new_pos)
    return moveX(new_pos.x - pos.x) and moveY(new_pos.y - pos.y) and moveZ(new_pos.z - pos.z)
end

---comment
---@param path table<integer, Vec>
---@return boolean
local function follow_path(path)
    if #path == 0 then
        return true
    end
    assert(pos == path[1])
    for i, v in ipairs(path) do
        if not moveTo(v) then
            return false
        end
    end
    return true
end

---comment
---@param target Vec
---@return boolean
function Move(target)
    local search = Set({Node.new(nil, pos, target)})
    local closed = Set({})

    while search.size > 0 do
        ---@type Node
        local best_node = nil
        local best_value = 1e10
        
        for node, _ in pairs(search.items) do
            ---@type Node
            node = node
            if node:f() < best_value then
                best_node = node
                best_value = node:f()
            end
        end

        if best_node.pos == target then
            for i, e in pairs(best_node:path()) do
                if e == pos then
                    if not follow_path(table.unpack(best_node:path(), i)) then
                        successors = {}
                        Move(target)
                    end
                    return true
                end
            end
            return false
        end

        closed.insert(best_node)
        search.delete(best_node)

        if successors[best_node.pos] == nil then
            Move(best_node.pos)
            assert(pos == best_node.pos)
            successors[best_node.pos] = get_successors()
        end

        local node_map = Set({})
        for vec, _ in pairs(successors[best_node.pos].items) do
            node_map.insert(Node.new(best_node, vec, target))
        end
        search = search.union(node_map).difference(closed)
    end

    return false
end

function MoveDelta(dx, dy, dz)
    return Move(pos:add(Vec.new(dx, dy, dz)))
end 

return {
    Move=Move,
    MoveDelta=MoveDelta
}