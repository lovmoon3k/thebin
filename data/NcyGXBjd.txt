import cv2 as cv
import numpy as np
from cv2 import cuda
from matplotlib import pyplot as plt
from numba import vectorize, jit
import time

img = cv.imread("dog.jpg",0)
t_lower = 100		# Lower Threshold
t_upper = 200		# Upper threshold
aperture_size = 3	# Aperture size

print(type(img))

#Classic Python Program
def classic_canny(img):
	canny_classic = cv.Canny(img, t_lower, t_upper, aperture_size)
	cv.imwrite("classic-dog.jpg", canny_classic)


#CUDA - Numba
@jit('float64(float64[:])')
def cuda_canny(img):
	img = cv.imread('dog.jpg',0)
	imgMat = cv.cuda_GpuMat(img)
	detector = cv.cuda.createCannyEdgeDetector(low_thresh=t_lower, high_thresh=t_upper, apperture_size = aperture_size)
	dstImg = detector.detect(imgMat)
	canny = dstImg.download()
	cv.imwrite("cuda-dog.jpeg", canny)


start = time.time()

classic_canny(img)

end_classic = time.time()

cuda_canny(img)

end_cuda = time.time()

print("Classic time: ", end_classic - start, " s")
print("CUDA time: ", end_cuda - end_classic, " s")


print(start)
print(end_classic)
print(end_cuda)











"""
plt.subplot(121),plt.imshow(img,cmap = 'gray')
plt.title('Original Image'), plt.xticks([]), plt.yticks([])
plt.subplot(122),plt.imshow(canny,cmap = 'gray')
plt.title('Edge Image'), plt.xticks([]), plt.yticks([])
plt.show()
"""