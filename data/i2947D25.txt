using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class WarpTo : MonoBehaviour
{
    public AudioSource warpSoundStart;
    public AudioSource warpSoundFly;
    public AudioSource warpSoundStop;

    public float WarpSpeed;

    public bool StartWarpSound = false;
    public bool FlyWarpSound = false;
    public bool EndWarpSound = false;
    public bool EndSoundPlayed = false;
    public bool isWarping;
    public bool isAlinged;

    [SerializeField]
    public LocalPlayerData PlayerData;
    private PlayerMovementSP PlayerMovement;

    public GameObject[] WarpPoints;
    public GameObject LocalPlayer;
    public GameObject TargetPos;
    public GameObject TargetPosision;

    public Vector3 LocalPlayerPos;
    public float Distance;

    void Start()
    {
        warpSoundStart.GetComponent<AudioSource>();
        warpSoundStart.GetComponent<AudioSource>();
        warpSoundStart.GetComponent<AudioSource>();
        PlayerMovement = LocalPlayer.GetComponent<PlayerMovementSP>();
        WarpPoints = GameObject.FindGameObjectsWithTag("WarpPoint");
    }



    private void AlignToTarget()
    {
        // V-1 Basic look At
        LocalPlayer.transform.LookAt(TargetPos.transform.position);
        isAlinged = false;
        isWarping = true;




        // V-2

        //float AlignSpeed = PlayerData.AlignSpeed;
        //var stepSeed = AlignSpeed * Time.deltaTime;

        //// Start Warp Sound
        //if (StartWarpSound)
        //{
        //        warpSoundStart.Play(0);
        //        StartWarpSound = false;
        //        FlyWarpSound = true;
        //}

        //Quaternion lookRotation = Quaternion.LookRotation(TargetPos.transform.position - LocalPlayer.transform.position);
        //Quaternion result = Quaternion.RotateTowards(LocalPlayer.transform.rotation, lookRotation, Time.deltaTime * AlignSpeed);
        //LocalPlayer.transform.rotation = Quaternion.Slerp(LocalPlayer.transform.rotation, lookRotation, AlignSpeed * Time.deltaTime);

        //// ToDo If Player Front Facing TargetPosition - Stop Rotate and Move this basstard!!!!
        //float lerpPercent = 0f;
        //lerpPercent = Mathf.MoveTowards(lerpPercent, 1f, Time.deltaTime * AlignSpeed);

        //Debug.Log(lerpPercent);

        //if (lerpPercent <= 0.1f)
        //{
        //    isAlinged = false;
        //    isWarping = true;
        //}
    }

    private void Warp()
    {
        float step = WarpSpeed * Time.deltaTime;
        Distance = Vector3.Distance(TargetPosision.transform.position, LocalPlayer.transform.position);

        if (!warpSoundStart.isPlaying && FlyWarpSound)
       {
           warpSoundFly.Play(0);
           EndSoundPlayed = true;
           FlyWarpSound = false;
       }

        foreach (Collider c in LocalPlayer.GetComponents<Collider>())
        {
            c.enabled = false;
        }
       
        var collidersObj = LocalPlayer.GetComponentsInChildren<Collider>();

        foreach (Collider c in collidersObj)
        {
            c.enabled = false;
        }
    
        LocalPlayer.transform.position = Vector3.MoveTowards(LocalPlayer.transform.position, TargetPosision.transform.position, step);

        if (Distance < 200)
        {
            warpSoundFly.Stop();
            EndWarpSound = true;
        }
        
        if (EndWarpSound && EndSoundPlayed)
        {
            warpSoundStop.Play(0);
            EndWarpSound = false;
            EndSoundPlayed = false;
        }

        if (WarpSpeed < PlayerData.maxWarpSpeed)
        {
            WarpSpeed += 50;
        }

        if (LocalPlayer.transform.position == TargetPosision.transform.position)
        {
            foreach (Collider c in LocalPlayer.GetComponents<Collider>())
            {
                c.enabled = true;
            }
            foreach (Collider c in collidersObj)
            {
                c.enabled = true;
            }

            isAlinged = false;
            isWarping = false;
            WarpSpeed = 0;
            PlayerData.isWarping = false;
            PlayerMovement.thrustHold = 0.0f;

        }
    }


    private void FixedUpdate()
    {
        if (isAlinged && !isWarping)
        {
            PlayerData.isWarping = true;
            AlignToTarget();
        }

        if (!isAlinged && isWarping)
        {
            Warp();
        }
    }

    public void WarpPlayerToPoint()
    {
        if (!isWarping)
        {
            LocalPlayer = GameObject.FindGameObjectWithTag("Player");
            StartWarpSound = true;
            PlayerMovement = LocalPlayer.GetComponent<PlayerMovementSP>();
            isAlinged = true;
        }
       
    }
}
