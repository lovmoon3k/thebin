------STARTUP----------
monitor = peripheral.wrap("right")
term.redirect(monitor)
term.clear()
screen = paintutils.loadImage("main.nfp")
fileR = fs.open("things.lua", "r")


paintutils.drawImage(screen, 1, 1)

------VARIABLES-------------
tasksB = {}
mes = ""
line = ""
a = ""
sState = "main"

x, y = term.getSize()
cx = x/2
cy = y/2

-------Functions----------

--- Load Things to "tasksB" list
function loadS()
    fileR = fs.open("things.lua", "r")
    while true do
        line = fileR.readLine()
        if line == nil then
            break
        end
        --term.setCursorPos(1,1)
        --term.write(line)
        table.insert(tasksB, line)
    end
    print("all loaded")
end

-- Creates all the lables
function labels()
    mes = "Current Objective: "
    term.setCursorPos(cx - #mes/2, cy - 2)
    term.write(mes)
end

-- Recreates Base Screen
function updateScreen()
    paintutils.drawImage(sState .. "nfp", 1, 1)
    labels()
end

-- Gets click position
function getClick()
    local event, side, x, y = os.pullEvent("monitor_touch")
    local lis = {}
    table.insert(lis, x)
    table.insert(lis, y)
    return lis
end

-- Start Up Code -----------
loadS()

-------------------------

sleep(0.1)
while true do
    updateScreen()
    --------------MAIN SCREEN------------------------
    if sState == "main" then
        local click = getClick()
        if click[1] > 4 and click[1] < 14
            if click[2] > 14 and click[2] < 18 then
                sState = "add"
            end
        end
        if click[1] > 36 and click[1] < 46 then
            if click[2] > 14 and click[2] < 18 then 
                sState = "remove"
            end
        end
    end
    ------------Adding Screen-------------------------------------
    if sState == "add" then
    




    end
    ------------Removing Screen-------------------------------------
    if sState == "remove" then
        



    end



end