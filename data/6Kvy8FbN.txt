class Solution {
    public boolean containsCycle(char[][] grid) {
        int n=grid.length;
        boolean visited[]=new boolean[n];
        for(int i=0;i<n;i++){
            if(!visited[i]){
                boolean flag=dfs(grid,visited,i,-1);
                return flag;
            }
        }
        return false;
    }
    public boolean dfs(char[][] grid,boolean visited[],int source,int parent){
        visited[source]=true;
        boolean res=false;
        for(int neigh=0;neigh<grid.length;neigh++){
            if(visited[neigh]&&neigh!=parent){
                return true;
            }
            if(!visited[neigh]){
                res=res||dfs(grid,visited,neigh,source);
            }
        }
        return res;
    }
}