Test Functions:
static void check_count(size_t expected, size_t actual)
{
   TEST_ASSERT_EQUAL_UINT64(expected, actual);
}

static void check_triplets(size_t count, triplet_t expected[],
                           triplet_t actual[])
{
   // assumes array counts match
   for (size_t i = 0; i < count; ++i) {
      bool triplet_found = false;
      for (size_t j = 0; j < count; ++j) {
         if (expected[i].a == actual[j].a && expected[i].b == actual[j].b &&
             expected[i].c == actual[j].c) {
            triplet_found = true;
            break;
         }
      }
      if (!triplet_found)
         TEST_FAIL();
   }
}

static void test_triplets_whose_sum_is_12(void)
{
   uint16_t sum = 12;
   uint16_t expected_count = 1;
   triplet_t expected_triplets[] = { { 3, 4, 5 } };

   triplets_t *triplets = triplets_with_sum(sum);
   check_count(expected_count, triplets->count);
   check_triplets(expected_count, expected_triplets, triplets->triplets);
   free_triplets(triplets);
}

My h file
#include <stdint.h>
#include <stdlib.h>

#ifndef PYTHAGOREAN_TRIPLET_H
#define PYTHAGOREAN_TRIPLET_H

typedef struct triplet {
  uint16_t a, b, c;
} triplet_t;

typedef struct triplets {
  uint16_t count;
  triplet_t triplets[];
} triplets_t;

triplets_t *triplets_with_sum(uint16_t sum);
void free_triplets(triplets_t *triplets);

#endif

My c File:
#include "pythagorean_triplet.h"

triplets_t *triplets_with_sum(uint16_t sum) {
  triplets_t *Triplet = malloc(sizeof(triplets_t) + (sizeof(triplet_t) * 10));
  uint16_t count = 0;
  uint16_t a, b, c;
  a = 0;
  b = sum;
  while(b) {
    c = sum - (a + b);
    if(((a * a) + (b * b) ==  (c * c))
        && ((a != 0) && (b != 0))) {
          triplet_t *Trips = malloc(sizeof(triplet_t));
          Trips->a = a;
          Trips->b = b;
          Trips->c = c;
          Triplet->triplets[count] = *Trips;
          count += 1;

    }
    a += 1;
    if(a >= b) {
      a = 0;
      b -= 1;
    }
  }
  Triplet->count = count;
  return Triplet;
}

void free_triplets(triplets_t *triplets) {
  for(int i = 0; i < triplets->count; ++i) {
    free(triplets->triplets[i]);
  }
  free(triplets);
}