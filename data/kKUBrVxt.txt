#include <iostream>

using namespace std;

bool inSet(char target, char* set, int power) {
	for (int i = 0; i < power; i++) {
		if (target == set[i]) {
			return true;
		}
	}
	return false;
}

int maxSequene(char* set, int setSize, char* inputString, int stringSize) {
	int maxSequentialCharacters = 0;
	int currentSequentialCharacters = 0;
	int j = 0;
	for (int i = 0; i < stringSize; i++) {
		if (inSet(inputString[i], set, setSize)) {
			currentSequentialCharacters++;
		}
		else {	
			currentSequentialCharacters = 0;
		}
		if (currentSequentialCharacters > maxSequentialCharacters) {
			maxSequentialCharacters = currentSequentialCharacters;
		}
	}
	return maxSequentialCharacters;
}

int maxElement(int* set, int setSize) {
	int max = set[0];
	for (int i = 1; i < setSize; i++) {
		if (max < set[i]) {
			max = set[i];
		}
	}
	return max;
}

int minElement(int* set, int setSize) {
	int min = set[0];
	for (int i = 1; i < setSize; i++) {
		if (min > set[i]) {
			min = set[i];
		}
	}
	return min;
}

int sumNumbers(int* set, int setSize, int min, int max) {
	int sum = 0;
	for (int i = 0; i < setSize; i++) {
		if (set[i] >= min && set[i] <= max) {
			sum += set[i];
		}
	}
	return sum;
}

bool isPrime(int number) {
	for (int i = 2; i <= sqrt(number); i++) {
		if (number % i == 0) {
			return false;
		}
	}
	return true;
}

int minPrimeNumber(int bottom, int top) {
	if (bottom > top) {
		int temp = bottom;
		bottom = top;
		top = bottom;
	}
	for (int i = bottom; i <= top; i++) {
		if (isPrime(i)) {
			return i;
		}
	}
	return 0;
}

string codingWithPrimeNumbers(int bottom, int top, string message, int numberOfLetters) {
	int shiftNumber = minPrimeNumber(bottom, top) % numberOfLetters;
	string codedMessage = message;
	for (int i = 0; i < message.length(); i++) {
		if ((message[i] >= 65 && message[i] <= 90) || (message[i] >= 97 && message[i] <= 122)) {
			if ((message[i] >= 65 && message[i] <= 90 - shiftNumber) ||
				(message[i] >= 97 && message[i] <= 122 - shiftNumber)) {
				codedMessage[i] += shiftNumber;
			}
			else {
				codedMessage[i] -= (numberOfLetters - shiftNumber);
			}
		}
	}
	return codedMessage;
}


int main()
{
	/* Зад 1. Дадени са две множества set1 и set2. Да се създаде функция, 
	която връща сумата на елементите в първото множество, 
	които принадлежат на затворения интервал
	между най-малкия и най-големия елемент на второто множество.
	Вход:
	Set1: {5, 2, 3, 8, 1, 6, 4, 12, 9, 10}
	Set2: {6, 9, 4}
	Изход:
	32 // елементите 5, 8, 6, 4, 9 от първото множество принадлежат на интервала [4, 9]
	*/

	int set1[] = { 5, 2, 3, 8, 1, 6, 4, 12, 9, 10 };
	int set2[] = { 6, 9, 4 };
	int min = minElement(set2, 3);
	int max = maxElement(set2, 3);
	cout << "Min elements: " << min << endl;
	cout << "Max elements: " << max << endl;
	cout << "Sum elements between " << min << " and " << max << ": " << sumNumbers(set1, 10, min, max) << endl;



	/* Зад 2. Дадени са множество от символи и символен низ.
	Да се напише функция, която връща броя на символите в
	най-дългата последователност от символи в символния
	низ, които принадлежат на множеството.

	Вход:
	Множество: { 'e', 't', 'i', 's' }
	Символен низ : "This is one test string!"
	Изход :
	4 // test е най-дългата последователност от символи, 
	които принадлежат на множеството*/

	int universalSetSize = 4;
	char universalSetOfCharacters[] = { 'e','t','i','s' };
	int size = 24;
	char charactersSet[] = "This is one test string!";
	cout << "The max sequence with set characters: " <<
		maxSequene(universalSetOfCharacters, universalSetSize, charactersSet, size) << endl;

	/* Зад 3.
	* Да се създаде функция, която кодира входно съобщение по следния начин.
	* В кодирането участват само главните и малките латински букви
	* Кодиране с изместване: най-малкото просто число в даден интервал служи
	* за позициите на изместване в дясно. [30; 40] -> 31
	* Ако числото е по-голямo от броя на буквите в азбуката, да се използва по
	* следния начин: [30; 40] -> 31 => изместването е 5 символа 31 % 26 = 5
	* A-Z, a-z
	*
	* A -> F, B -> G, C -> H, ..., Z -> E
	* a -> f, b -> g, c -> h, ..., z -> e
	*
	* Вход:
		интервала: bottom = 30, top = 40
		символен низ: "This is one test string!"
    * Изход:
	    кодираният низ: "Ymnx nx tsj yjxy xywnsl!"
	*/

	int bottom = 30;
	int top = 40;
	int numberOfLetters = 26;
	string message = "This is one test string!";
	string codedMessage = codingWithPrimeNumbers(bottom, top, message, numberOfLetters);
	cout << "codedMessage=" << codedMessage << endl;
}
