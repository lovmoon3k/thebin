function farm_gui()
    local fgui_exit = 0






    --input lists
    con_up = {"keys.up","key == keys.w"}
    con_down = {"keys.down","key == keys.s"}
    con_left = {"keys.left","keys.a"}
    con_right = {"keys.right","keys.d"}
    con_select = {"keys.enter","keys.space"}
    con_back = {"keys.leftShift","keys.b"}
    con_quick_quit = {"keys.q"}



    function match_list(var,list)
        for i = 1,#list do
            if var == list[i] then
                return true
            end
        end
        return false
    end

    local function set_menu(menu)
    end
    local cur_menu = "init"
    local prev_menu = "init"
    function menu_init()

        function set_menu(menu)
            prev_menu = cur_menu
            cur_menu = menu
			selitem = 1
        end
        set_menu(main_menu)
    end




    while fgui_exit == 0 do
        if fs.exists("AndysPrograms/Farm/settings") then
            settings.load("AndysPrograms/Farm/settings")
        end
        local maxW, maxH = term.getSize()

        function menu_back()
            set_menu(prev_menu)
        end

        function start_stop_farm()
            if andy_farm_program_running == 1 then
                andy_farm_program_running = 0
            else
                andy_farm_program_running = 1
            end
        end

        function options_farm()
            set_menu(setmenu) 
        end

        function mainmenu_farm()
            set_menu(main_menu) 
        end

        function exit()
            term.clear()
            term.setCursorPos(1, 1)
            print("EXIT")
            fgui_exit = 1
			farmexit = 1
			stopfarm = 1

        end
        function chngset()
            chngsel = 1
        end

        function savesets()
            settings.save("AndysPrograms/Farm/settings")
        end
        gpstab = {}
        local stgpsx, stgpsy, stgpsz = gps.locate(5)
        table.insert(gpstab, stgpsx)
        table.insert(gpstab, stgpsy)
        table.insert(gpstab, stgpsz)
        table.insert(gpstab, "n")
        if fs.exists("AndysPrograms/Farm/settings") == false then
            if fs.exists("AndysPrograms/Farm") == false then
            fs.makeDir("AndysPrograms/Farm")
            end




            srtbk = {"minecraft:pumpkin", "minecraft:reeds"}
            settings.set("Farm Lenth", 1)
            settings.set("Farm Width", 1)
            settings.set("Mode", 2)
            settings.set("Start Location", gpstab)
            settings.set("Chest Location", gpstab)
            settings.set("Sort Block Names", srtbk)
            settings.set("Sort Blocks", 1)
            settings.set("Chest Direction", 0)
            savesets()
        
            
            
        end
        function resetmenu()
            deftab = {}

            main_menu = {}
            main_menu = {
                {options = "Start", handler = start_stop_farm},
                {options = "Options", handler = options_farm},
                {options = "Exit", handler = exit}
            }

            setmenu = {}
            setmenu = {
                {options = "Finish editing", handler = mainmenu_farm},
                {text = "Farm Lenth", setname = "Farm Lenth", options = settings.get("Farm Lenth"), type = "num", handler = chngset},
                {text = "Farm Width", setname = "Farm Width", options = settings.get("Farm Width"), type = "num", handler = chngset},
                {text = "Mode, 1 = Nrml, 2 = Pump/Mel/SgrCne", setname = "Mode", options = settings.get("Mode"), type = "num", handler = chngset},
                {text = "Start Location", setname = "Start Location", options = settings.get("Start Location"), type = deftab, handler = chngset},
                {text = "Chest Location", setname = "Chest Location", options = settings.get("Chest Location"), type = deftab, handler = chngset},
                {text = "Chest Direction 0=fwd 2=up 1=dn", setname = "Chest Direction", options = settings.get("Chest Direction"), type = "num", handler = chngset},
                {text = "Sort Blocks", setname = "Sort Blocks", options = settings.get("Sort Blocks"), type = "num", handler = chngset},
                {text = "Sort Block Names", setname = "Sort Block Names", options = settings.get("Sort Block Names"), type = deftab, handler = chngset}
            }

        end
        resetmenu()

        function addsettings(num, value)
            settings.set(setmenu[num].setname, value)
            savesets()
        end

        openset = 1

        farmargs = funfarmargs
        if farmargs[1] == "noset" then
            openset = 0
        end

        menu_init()


        while openset == 1 do




        if openset == 1 then
            chngsel = 0
            term.clear()
            setsoffset = 1
            selitem = 1
            --if (maxH) < (#setmenu * 2) then
            --    selitem = maxH / 2
        -- elseif (maxH) > (#setmenu) then
            --selitem = 1
            --end
        function printmenu(menu)
            for sets=1,#setmenu do
                
                setsmul = (sets * 2) - 1
                if (setsmul + setsoffset) <= maxH then
                    term.setCursorPos(1, setsmul + setsoffset) 
                    print(setmenu[sets].text)
                    if #setmenu[sets].text / maxW > 1 then
                        --setsoffset = setsoffset + #setmenu[sets].text / maxW
                        --setsoffset = setsoffset - 0.9
                    end
                    term.setCursorPos(1, (setsmul + 1) + setsoffset) 
                    if setmenu[sets].options ~= nil then
                        term.clearLine()
                        prntset = setmenu[sets].options
                        if (type(prntset) == "table") then
                            prntset = table.concat(setmenu[sets].options, ", ")
                        end
                        if selitem == sets then
                            if chngsel == 1 then 
                                input = read()
                                if input then
                                    inptesset = setmenu[sets].type
                                    if type(inptesset) == "table" then
                                        settingsinputtable = {}
                                        input2 = string.gsub(input, ", ", ",")
                                        --print(input)
                                        for i in string.gmatch(input2, '([^,]+)') do
                                            table.insert(settingsinputtable, i)
                                        end
                                        --print(input)
                                        addsettings(selitem, settingsinputtable)
                                    end
                                    if type(inptesset) ~= "table" then
                                        addsettings(selitem, input)
                                    end
                                    resetmenu()
                                    --print(chngsel)
                                    chngsel = 0
                                end

                            else
                                print(">  "..prntset)
                            end
                        else
                            print("   "..prntset)
                        end
                    end
                end
            end
        end
            function onsel(menu, selected)
                menu[selected].handler()
            end

            function onkeypress(key, menu, selected)
                if key == keys.enter or key == keys.space then
                    if chngsel == 0 then
                        onsel(menu, selected)
                    end
                -- if chngsel == 1 and (key == keys.enter or key == keys.space) then
                    --   chngsel = 0
                -- end
                elseif key == keys.up or key == keys.w then
                    if selitem > 1 then
                        setsoffset = setsoffset + 2.1
                        setsoffset = math.floor(setsoffset)
                        selitem = selitem - 1
                    end
                elseif key == keys.down or key == keys.s then
                    if selitem < (#menu) then
                        setsoffset = setsoffset - 1.9
                        setsoffset = math.floor(setsoffset)
                        selitem = selitem + 1
                    end
                elseif key == keys.q then
                    exit()
                end
            end

		init_gui = 1
        while fgui_exit == 0 do
            term.setCursorPos(1, 1) 
            term.clear()
            printmenu(cur_menu)
            event, key = os.pullEvent("key")
            onkeypress(key, cur_menu, selitem)
        end









        end



        end
    end
end