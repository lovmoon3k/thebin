#ifdef local
#define _GLIBCXX_DEBUG 1
#endif
#pragma GCC optimize("Ofast", "unroll-loops")
#include <bits/stdc++.h>
using namespace std;

#define int int64_t
#define double __float80
using pii = pair<int, int>;
template <typename T> using Prior = std::priority_queue<T>;
template <typename T> using prior = std::priority_queue<T, vector<T>, greater<T>>;

// #define X first
// #define Y second
#define ee emplace
#define eb emplace_back
#define ef emplace_front
#define pb pop_back
#define pf pop_front
#define ALL(x) begin(x), end(x)
#define RALL(x) rbegin(x), rend(x)
#define SZ(x) ((int)(x).size())

#define fastIO() ios_base::sync_with_stdio(0), cin.tie(0)

template <typename T, typename U> bool chmin(T &lhs, U rhs) {return lhs > rhs ? lhs = rhs, 1 : 0;}
template <typename T, typename U> bool chmax(T &lhs, U rhs) {return lhs < rhs ? lhs = rhs, 1 : 0;}

const int mod = 998'244'353;

int fpow(int base, int exp = mod-2, int ans = 1) {
    while (exp) {
        if (exp & 1) ans = ans * base % mod;
        base = base * base % mod, exp >>= 1;
    }
    return ans;
}

void solve() {
    int N; cin >> N;
    
    vector<int> A(N+1, 0), inv(N+1, 0), presp(N+1, 0);
    for (int i = 1; i <= N; ++i) {
        cin >> A[i], inv[A[i]] = i;
        presp[i] = presp[i-1] + (A[i] == 0);
    }
    
    int sp = presp.back(), fact_sp = 1;
    for (int i = 2; i <= sp; ++i) fact_sp = fact_sp * i % mod;
    
    int inv2 = fpow(2);
    int invsp = (sp ? fpow(sp) : 1);
    
    int exp_cnt = 0; /// expected # of [inv[i] > inv[i+1]]
    for (int i = 1; i+1 <= N; ++i) {
        if (inv[i] == 0 and inv[i+1] == 0) exp_cnt += inv2;
        if (inv[i] != 0 and inv[i+1] == 0) exp_cnt += invsp * presp[inv[i]] % mod;
        if (inv[i] == 0 and inv[i+1] != 0) exp_cnt += invsp * (sp - presp[inv[i+1]]) % mod;
        if (inv[i] != 0 and inv[i+1] != 0) exp_cnt += (inv[i] > inv[i+1]);
    }
    exp_cnt %= mod;
    
    int sum_dis = 0;
    if (inv[N] == 0 and inv[1] == 0) sum_dis = 0;
    if (inv[N] != 0 and inv[1] == 0) sum_dis = ({int sum = 0; for (int i = 1; i <= N; ++i) sum += (A[i] == 0) * (inv[N] - i); sum % mod;});
    if (inv[N] == 0 and inv[1] != 0) sum_dis = ({int sum = 0; for (int i = 1; i <= N; ++i) sum += (A[i] == 0) * (i - inv[1]); sum % mod;});
    if (inv[N] != 0 and inv[1] != 0) sum_dis = inv[N] - inv[1];
    
    int ans = (N * exp_cnt + sum_dis * invsp + 1) % mod * fact_sp % mod;
    cout << (ans + mod) % mod << "\n";
}

int32_t main() {
    fastIO();
    
    int t = 1; // cin >> t;
    for (int _ = 1; _ <= t; ++_) {
        solve();
    }
    
    return 0;
}
