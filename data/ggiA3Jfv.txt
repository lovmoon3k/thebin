from abc import ABC, abstractmethod
from connector.market.market_manager import MarketManager, CandleInterval
from connector.user.user_manager import UserManager


class Strategy(ABC):
    """
    mm -- MarketManager
    um -- UserManager
    """
    @abstractmethod
    def subscribe(self, mm: MarketManager, um: UserManager):
        """
        This callback is invoked first
        1) Subscribe for market data
        2) Specify market data history to download
        """
        pass

    @abstractmethod
    def on_start(self, mm: MarketManager, um: UserManager):
        """
        1) All subscriptions are active
        2) All market data history is downloaded
        Then, this callback is invoked
        """

    @abstractmethod
    def on_orderbook_update(self, mm: MarketManager, um: UserManager, depth: int):
        """
        On market OrderBook Update (with certain depth)
        """

    @abstractmethod
    def on_market_trade(self, mm: MarketManager, um: UserManager):
        """
        On others trade (almost surely not our trade)
        """

    @abstractmethod
    def on_order_event(self, mm: MarketManager, um: UserManager):
        """
        1) Error while placing order
        2) Market order is executed
        3) Limit order is placed
        4) Limit order is partially filled
        5) Limit order is filled
        """

    @abstractmethod
    def on_candle(self, mm: MarketManager, um: UserManager, interval: CandleInterval):
        """
        On new candle arrival (with certain interval)
        """
