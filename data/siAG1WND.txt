#include <iostream>
#include <vector>
#include <queue>

struct S {
	std::string_view name;
	size_t size;
};

struct ShittyComp {
	bool operator()(const S& s1, const S& s2) 
	{	
		bool res = false;
		bool reverse = true;
		
		if(reverse)
			res = s2.name > s1.name;
		res = s1.name > s2.name;
		if (!res) {
		if(reverse)
			res = s2.size > s1.size;
		res = s1.size > s2.size;
		}
		return res;
	}
};

int main() {
	std::vector<S> vec{ { "You've been assigned a task!", 55955 }, { "You've been assigned a task!", 55919 }, { "You've been assigned a task!", 55942 }, 
	{ "You've been assigned a task!", 55947 }, { "You've been assigned a task!", 55941 }, { "You've been assigned a task!", 55937 }, { "You have tasks due today!", 59397 }, { "You've been assigned a task!", 55935 } };
	std::priority_queue<S, std::vector<S>, ShittyComp> queue;
	using namespace std::literals;
	std::cout << std::boolalpha << ("You have tasks due today!"sv < "You've been assigned a task!"sv) << std::endl;
	queue.push(vec[0]);
	queue.push(vec[1]);
	queue.push(vec[2]);
	for (size_t i = 3; i < vec.size(); i++) {
	    auto top = queue.top();
	    std::cout << top.name << " " << top.size << std::endl;
	    if (ShittyComp{}(vec[i], top)) {
	      queue.pop();
	      queue.push(vec[i]);
	    }
	}
      for (; !queue.empty(); queue.pop()) {
          std::cout << queue.top().name << " " << queue.top().size << std::endl;
      }
      
}