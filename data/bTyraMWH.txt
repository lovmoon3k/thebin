namespace ConsoleApp1
{
	using System;

	class Palindrome
	{
		static void Main(string[] args)
		{
			//INPUT
			string input = Console.ReadLine();

			while (input != "END")
			{
				//OUTPUT
				Console.WriteLine(PalindromeChecker(input));

				//INPUT
				input = Console.ReadLine();
			}
		}

		static bool PalindromeChecker(string inputCommand)
		{
			char[] numberArray = inputCommand.ToCharArray();

			//If Number's Length Is One
			if (inputCommand.Length == 1)
			{
				return true;
			}
			//If Number's Length Is Even
			else if (inputCommand.Length % 2 == 0)
			{
				char[] numbersFirstHalf = SetHalfArray(numberArray, 0, inputCommand.Length / 2);
				char[] numbersSecondHalf = SetHalfArray(numberArray, inputCommand.Length / 2, inputCommand.Length);

				return IsEqual(numbersFirstHalf, numbersSecondHalf);
			}
			//If Number's Length Is Odd
			else
			{
				char[] numbersFirstHalf = SetHalfArray(numberArray, 0, inputCommand.Length / 2);
				char[] numbersSecondHalf = SetHalfArray(numberArray, inputCommand.Length / 2 + 1, inputCommand.Length);

				return IsEqual(numbersFirstHalf, numbersSecondHalf);
			}
		}

		private static bool IsEqual(char[] numbersFirstHalf, char[] numbersSecondHalf)
		{
			for (int k = 0; k < numbersFirstHalf.Length; k++)
			{
				if (numbersFirstHalf[k] != numbersSecondHalf[numbersFirstHalf.Length - 1 - k])
				{
					return false;
				}
			}

			return true;
		}

		private static char[] SetHalfArray(char[] numberArray, int startIndex, int endIndex)
		{
			char[] resultArray = new char[numberArray.Length / 2];

			int i = 0;
			int j = i;
			if (startIndex != 0)
			{
				j = startIndex;
			}			

			while (j < endIndex)
			{
				resultArray[i] = numberArray[j];

				j++;
				i++;
			}

			return resultArray;
		}
	}
}

