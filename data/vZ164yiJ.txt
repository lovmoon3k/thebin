import subprocess
subprocess.run(["python", "-m", "pip", "install", '--upgrade', 'pip'])
import pip
pip.main(['install','playsound','Pillow','pyautogui', '--upgrade'])
from tkinter import *
from tkinter import  ttk
import tkinter as tk
from tkinter.messagebox import showerror, showwarning, showinfo
import turtle, sys, random, sqlite3, pyautogui, sys
import tkinter.font as tkFont
from PIL import Image, ImageGrab, ImageTk
from playsound import playsound
from urllib.request import urlopen
import requests
from io import BytesIO
from turtle import *
import colorsys
import math


#####Landovskis Gym DataBase###################################################################################################################
sdb = sqlite3.connect('GymStats.db')

ssql = sdb.cursor()
ssql.execute("""CREATE TABLE IF NOT EXISTS stats (
    usermail TEXT,
    Muscles BIGINT,
    Rank TEXT,
    Skill BIGINT
)""")

sdb.commit()
#####Create database###################################################################################################################
db = sqlite3.connect('AppProfiles.db')

sql = db.cursor()
sql.execute("""CREATE TABLE IF NOT EXISTS users (
    username TEXT,
    userpassword TEXT,
    usermail TEXT,
    usergender INT,
    usercountry TEXT
)""")

db.commit()

def Hexagono():
    Gallery.destroy()
    global HexagonTurtle
    HexagonTurtle = Tk()
    HexagonTurtle.title('Just a Hexagon')
    HexagonTurtle.geometry('380x290')
    HexagonTurtle.resizable(False, False)
    HexagonTurtle.configure(bg='black')

    
    HexagonBack = Button(master=HexagonTurtle, text='Back', command=HexagonBacko)
    HexagonBack.pack(side='bottom', anchor='s')
    
    TurtleScreen._RUNNING=True
    canvas = Canvas(HexagonTurtle)
    canvas.pack()
    thex = RawTurtle(canvas)
    colors = ['red','purple','blue','green','orange','yellow']
    thex.speed(30)
    thex.fillcolor('black')
    thex.begin_fill()
    thex.goto(1000,-2000)
    thex.left(90)
    thex.forward(10000)
    thex.left(90)
    thex.forward(10000)
    thex.left(90)
    thex.forward(10000)
    thex.goto(1000,-1000)
    thex.left(90)
    thex.end_fill()
    thex.home()
    for x in range(360):
        thex.color(colors[x%6])
        thex.forward(x)
        thex.left(59)
    HexagonTurtle.mainloop()
    
def changeGal():
    appsmenu.destroy()
    Galleryo()
def Galleryo():
    global Gallery
    Gallery =Tk()
    Gallery.title("Pentagon Gallery")
    width=400
    height=500
    screenwidth = Gallery.winfo_screenwidth()
    screenheight = Gallery.winfo_screenheight()
    alignstr = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
    Gallery.geometry(alignstr)
    Gallery.resizable(width=False, height=False)

    PenArts=tk.Label(Gallery)
    PenArts["anchor"] = "center"
    PenArts["bg"] = "#000000"
    PenArts["cursor"] = "arrow"
    ft = tkFont.Font(family='Times',size=26)
    PenArts["font"] = ft
    PenArts["fg"] = "#20cf20"
    PenArts["justify"] = "center"
    PenArts["text"] = "Pentagon Arts"
    PenArts["relief"] = "sunken"
    PenArts.place(x=0,y=0,width=401,height=76)

    GalBack=tk.Button(Gallery)
    GalBack["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=10)
    GalBack["font"] = ft
    GalBack["fg"] = "#000000"
    GalBack["justify"] = "center"
    GalBack["text"] = "Back"
    GalBack.place(x=320,y=460,width=70,height=25)
    GalBack["command"] = GalBacko

    SQRT=tk.Button(Gallery)
    SQRT["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    SQRT["font"] = ft
    SQRT["fg"] = "#000000"
    SQRT["justify"] = "center"
    SQRT["text"] = "SQRT"
    SQRT.place(x=50,y=250,width=120,height=40)
    SQRT["command"] = SQRTo

    Circle2=tk.Button(Gallery)
    Circle2["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    Circle2["font"] = ft
    Circle2["fg"] = "#000000"
    Circle2["justify"] = "center"
    Circle2["text"] = "Circle 2"
    Circle2.place(x=50,y=190,width=120,height=40)
    Circle2["command"] = Circle2o

    Flower=tk.Button(Gallery)
    Flower["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    Flower["font"] = ft
    Flower["fg"] = "#000000"
    Flower["justify"] = "center"
    Flower["text"] = "Flower"
    Flower.place(x=50,y=130,width=120,height=40)
    Flower["command"] = Flowero

    Hexagon=tk.Button(Gallery)
    Hexagon["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    Hexagon["font"] = ft
    Hexagon["fg"] = "#000000"
    Hexagon["justify"] = "center"
    Hexagon["text"] = "Hexagon"
    Hexagon.place(x=230,y=190,width=120,height=40)
    Hexagon["command"] = Hexagono

    Circle1=tk.Button(Gallery)
    Circle1["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    Circle1["font"] = ft
    Circle1["fg"] = "#000000"
    Circle1["justify"] = "center"
    Circle1["text"] = "Circle 1"
    Circle1.place(x=230,y=130,width=120,height=40)
    Circle1["command"] = Circle1o

def GalBacko():
    Gallery.destroy()
    appsmenue()

def SqrtBacko():
    SqrtTurtle.destroy()
    Galleryo()
def HexagonBacko():
    HexagonTurtle.destroy()
    Galleryo()
def FlowerBacko():
    FlowerTurtle.destroy()
    Galleryo()
def Circle1Backo():
    Circle1Turtle.destroy()
    Galleryo()
def Circle2Backo():
    Circle2Turtle.destroy()
    Galleryo()


def SQRTo():
    Gallery.destroy()
    global SqrtTurtle
    SqrtTurtle = Tk()
    SqrtTurtle.title('Just a Sqrt')
    SqrtTurtle.geometry('600x600')
    SqrtTurtle.resizable(False, False)
    
    Bomb = Button(master=SqrtTurtle, text='Back', command=SqrtBacko)
    Bomb.pack(side='bottom', anchor='s')
    
    TurtleScreen._RUNNING=True
    canvas = Canvas(SqrtTurtle, width=600, height=550)
    canvas.pack()
    anms=RawTurtle(canvas)
    anms.color("red", "yellow")
    anms.speed(1000)

    anms.shape("turtle")

    anms.begin_fill()

    for i in range(2200):
        anms.forward(math.sqrt(i))
        anms.left(i%180)
    
    
    
    SqrtTurtle.mainloop()
    
def Circle2o():
    Gallery.destroy()
    global Circle2Turtle
    Circle2Turtle = Tk()
    Circle2Turtle.title('Just a Circle2')
    Circle2Turtle.geometry('400x450')
    Circle2Turtle.resizable(False, False)
    Circle2Turtle.configure(bg='black')
    
    Bomb = Button(master=Circle2Turtle, text='Back', command=Circle2Backo)
    Bomb.pack(side='bottom', anchor='s')
    
    TurtleScreen._RUNNING=True
    canvas = Canvas(Circle2Turtle, width=400, height=400)
    canvas.pack()
    
    tuc=RawTurtle(canvas)
    tuc.speed(9999999)
    tuc.fillcolor('black')
    tuc.begin_fill()
    tuc.goto(1000,-2000)
    tuc.left(90)
    tuc.forward(10000)
    tuc.left(90)
    tuc.forward(10000)
    tuc.left(90)
    tuc.forward(10000)
    tuc.goto(1000,-1000)
    tuc.left(90)
    tuc.end_fill()
    tuc.home()
    n = 70
    h = 0
    for i in range (360):
        c = colorsys.hsv_to_rgb(h, 1, 0.8)
        h+= 1/n
        tuc.color(c)
        tuc.left(1)
        tuc.fd(1)
        for j in range (2):
            tuc.left(2)
            tuc.circle(100)
    Circle2Turtle.mainloop()
    
    
    Circle2Turtle.mainloop()
def Circle1o():
    Gallery.destroy()
    global Circle1Turtle
    Circle1Turtle = Tk()
    Circle1Turtle.title('Just a Circle')
    Circle1Turtle.geometry('600x700')
    Circle1Turtle.resizable(False, False)
    Circle1Turtle.configure(bg='black')
    
    Bomb = Button(master=Circle1Turtle, text='Back', command=Circle1Backo)
    Bomb.pack(side='bottom', anchor='s')
    
    TurtleScreen._RUNNING=True
    canvas = Canvas(Circle1Turtle, width=600, height=660)
    canvas.pack()
    tuc=RawTurtle(canvas)
    tuc.speed(99999999999)

    n= 36
    h = 0

    tuc.fillcolor('black')
    tuc.begin_fill()
    tuc.goto(1000,-2000)
    tuc.left(90)
    tuc.forward(10000)
    tuc.left(90)
    tuc.forward(10000)
    tuc.left(90)
    tuc.forward(10000)
    tuc.goto(1000,-1000)
    tuc.left(90)
    tuc.end_fill()
    tuc.home()
    for i in range (460):
        c = colorsys.hsv_to_rgb(h,1,0.8)
        h+=1/n
        tuc.color(c)
        tuc.left(145)

        for j in range (5):

            tuc.forward(300)
            tuc.left(150)
    Circle1Turtle.mainloop()
    
def Flowero():
    Gallery.destroy()
    global FlowerTurtle
    FlowerTurtle = Tk()
    FlowerTurtle.title('Just a Flower')
    FlowerTurtle.geometry('350x380')
    FlowerTurtle.resizable(False, False)
    
    Bomb = Button(master=FlowerTurtle, text='Back', command=FlowerBacko)
    Bomb.pack(side='bottom', anchor='s')
    
    TurtleScreen._RUNNING=True
    canvas = Canvas(FlowerTurtle, width=350, height=340)
    anms=RawTurtle(canvas)
    anms.color("red", "yellow")
    anms.speed(100)
    anms.fd(-150)
    anms.ht()
    canvas.pack()
    anms.begin_fill()

    for i in range(90):
        anms.forward(300)
        anms.left(170)

    anms.end_fill()

    FlowerTurtle.mainloop()
    



def FlagBack():
    FFlags.destroy()
    gamesmenue()

def FQuiz():
    games.destroy()
    global FFlag1, FFlag2, FFlag3, FFlag4, FlagNext, v1,v2,v3,v4,v5, FlagLevel, FlagImage, FFlags
    FFlags = Tk()
    FFlags.title("Potential Enemies of the Pentagon")
    #setting window size
    width=400
    height=500
    screenwidth = FFlags.winfo_screenwidth()
    screenheight = FFlags.winfo_screenheight()
    alignstr = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
    FFlags.geometry(alignstr)
    FFlags.resizable(width=False, height=False)

    LatviaFFlag="https://i.imgur.com/gBQhZWo.jpg"
    RussiaFFlag="https://i.imgur.com/ZgdcaYy.jpg"
    UkraineFFlag="https://i.imgur.com/gCTvNWx.png"
    UKFFlag="https://i.imgur.com/wja5ico.png"
    GermanyFFlag="https://i.imgur.com/S6ANzhX.jpg"
    CanadaFFlag="https://i.imgur.com/2lYoVQD.png"
    FranceFFlag="https://i.imgur.com/AfmqaHQ.jpg"
    USAFFlag="https://i.imgur.com/FrdAmVE.jpg"
    SouthKoreaFFlag="https://i.imgur.com/nY3xktP.jpg"
    IrelandFFlag="https://i.imgur.com/iNrGnKE.jpg"
    PolandFFlag="https://i.imgur.com/XLtUYdh.jpg"
    SouthAfricaFFlag="https://i.imgur.com/5u3I2LE.jpg"
    MalaysiaFFlag="https://i.imgur.com/fDFTHyc.png"
    SerbiaFFlag="https://i.imgur.com/Sx1hvpe.jpg"
    IraqFFlag="https://i.imgur.com/wvGb7D3.jpg"
    SingaporeFFlag="https://i.imgur.com/ZGcK93P.jpg"
    KazakhstanFFlag="https://i.imgur.com/97mhYMV.png"
    RomaniaFFlag="https://i.imgur.com/uYjBr9L.jpg"
    IvoryCoastFFlag="https://i.imgur.com/Im0tLKp.jpg"
    AlbaniaFFlag="https://i.imgur.com/t9wofOG.jpg"
    MauritiusFFlag="https://i.imgur.com/d6Hhv02.jpg"
    SaintLuciaFFlag="https://i.imgur.com/9mdz8Cv.png"
    TuvaluFFlag="https://i.imgur.com/bg6pmXc.jpg"
    NauruFFlag="https://i.imgur.com/ZVRrrFM.png"
    KosovoFFlag="https://i.imgur.com/g3R2DUT.jpg"
    ParaguayFFlag="https://i.imgur.com/wkzmDPp.jpg"
    BelizeFFlag="https://i.imgur.com/XrgfiUe.jpg"
    PalauFFlag="https://i.imgur.com/bwC700G.jpg"
    AntiguaFFlag="https://i.imgur.com/AQyNwxs.jpg"
    PivLandFFlag="https://i.imgur.com/cUbWUMf.jpg" 
    
    global LatviaFlag
    response = requests.get(LatviaFFlag)
    img_data = response.content
    LatviaFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global RussiaFlag
    response = requests.get(RussiaFFlag)
    img_data = response.content
    RussiaFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global UkraineFlag
    response = requests.get(UkraineFFlag)
    img_data = response.content
    UkraineFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global UKFlag
    response = requests.get(UKFFlag)
    img_data = response.content
    UKFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global GermanyFlag
    response = requests.get(GermanyFFlag)
    img_data = response.content
    GermanyFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global CanadaFlag
    response = requests.get(CanadaFFlag)
    img_data = response.content
    CanadaFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global FranceFlag
    response = requests.get(FranceFFlag)
    img_data = response.content
    FranceFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global USAFlag
    response = requests.get(USAFFlag)
    img_data = response.content
    USAFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global SouthKoreaFlag
    response = requests.get(SouthKoreaFFlag)
    img_data = response.content
    SouthKoreaFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global IrelandFlag
    response = requests.get(IrelandFFlag)
    img_data = response.content
    IrelandFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global PolandFlag
    response = requests.get(PolandFFlag)
    img_data = response.content
    PolandFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global SouthAfricaFlag
    response = requests.get(SouthAfricaFFlag)
    img_data = response.content
    SouthAfricaFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global MalaysiaFlag
    response = requests.get(MalaysiaFFlag)
    img_data = response.content
    MalaysiaFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global SerbiaFlag
    response = requests.get(SerbiaFFlag)
    img_data = response.content
    SerbiaFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global IraqFlag
    response = requests.get(IraqFFlag)
    img_data = response.content
    IraqFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global SingaporeFlag
    response = requests.get(SingaporeFFlag)
    img_data = response.content
    SingaporeFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global KazakhstanFlag
    response = requests.get(KazakhstanFFlag)
    img_data = response.content
    KazakhstanFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global RomaniaFlag
    response = requests.get(RomaniaFFlag)
    img_data = response.content
    RomaniaFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global IvoryCoastFlag
    response = requests.get(IvoryCoastFFlag)
    img_data = response.content
    IvoryCoastFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global AlbaniaFlag
    response = requests.get(AlbaniaFFlag)
    img_data = response.content
    AlbaniaFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global MauritiusFlag
    response = requests.get(MauritiusFFlag)
    img_data = response.content
    MauritiusFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global SaintLuciaFlag
    response = requests.get(SaintLuciaFFlag)
    img_data = response.content
    SaintLuciaFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global TuvaluFlag
    response = requests.get(TuvaluFFlag)
    img_data = response.content
    TuvaluFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global NauruFlag
    response = requests.get(NauruFFlag)
    img_data = response.content
    NauruFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global KosovoFlag
    response = requests.get(KosovoFFlag)
    img_data = response.content
    KosovoFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global ParaguayFlag
    response = requests.get(ParaguayFFlag)
    img_data = response.content
    ParaguayFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global BelizeFlag
    response = requests.get(BelizeFFlag)
    img_data = response.content
    BelizeFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global PalauFlag
    response = requests.get(PalauFFlag)
    img_data = response.content
    PalauFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global AntiguaFlag
    response = requests.get(AntiguaFFlag)
    img_data = response.content
    AntiguaFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global PivLandFlag
    response = requests.get(PivLandFFlag)
    img_data = response.content
    PivLandFlag = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    global levels, options, index, correct,flags
    levels = [
        ["1/30 Level: Easy"],["2/30 Level: Easy"],["3/30 Level: Easy"],["4/30 Level: Easy"],["5/30 Level: Easy"],["6/30 Level: Easy"],["7/30 Level: Easy"],["8/30 Level: Easy"],["9/30 Level: Easy"],["10/30 Level: Easy"],
        ["11/30 Level: Medium"],["12/30 Level: Medium"],["13/30 Level: Medium"],["14/30 Level: Medium"],["15/30 Level: Medium"],["16/30 Level: Medium"],["17/30 Level: Medium"],["18/30 Level: Medium"],["19/30 Level: Medium"],["20/30 Level: Medium"],
        ["21/30 Level: Hard"],["22/30 Level: Hard"],["23/30 Level: Hard"],["24/30 Level: Hard"],["25/30 Level: Hard"],["26/30 Level: Hard"],["27/30 Level: Hard"],
        ["28/30 Level: Extreme"],["29/30 Level: Extreme"],["30/30 Level: Impossible"]
        ]
    options = [
        ['Latvia','Austria','Lithuania','Lebanon','Latvia'],
        ['Slovenia','Slovakia','Russia','Serbia','Russia'],
        ['Sweden','Ukraine','Ecuador','Palau','Ukraine'],
        ['England','New Zealand','Australia','United Kingdom','United Kingdom'],
        ['Austria','Eqypt','Germany','Poland','Germany'],
        ['Lebanon','Cuba','USA','Canada','Canada'],
        ['France','Italy','Spain','Luxembourg','France'],
        ['Canada','USA','Liberia','Malaysia','USA'],
        ['South Korea','Bangladesh','North Korea','Japan','South Korea'],
        ['Niger','United Kingdom','Ivory Coast','Ireland','Ireland'],
        ['Monako','Indonesia','Poland','Singapore','Poland'],
        ['South Africa','African Republic','Ethiopia','Uganda','South Africa'],
        ['Liberia','Usa','Malaysia','Chile','Malaysia'],
        ['Slovakia','Slovenia','Serbia','Russia','Serbia'],
        ['Iraq','Iran','Syria','Jordan','Iraq'],
        ['Indonesia','Poland','Monako','Singapore','Singapore'],
        ['Nauru','Barbados','Belarus','Kazakhstan','Kazakhstan'],
        ['Ecuador','Moldova','Romania','Andorra','Romania'],
        ['Ireland','Ivory Coast','Nigeria','United Kingdom','Ivory Coast'],
        ['Albania','Monte Negro','Kosovo','Morocco','Albania'],
        ['Ethiopia','South Africa','Mauritius','Madagascar','Mauritius'],
        ['Nauru','Saint Lucia','Palau','Tuvalu','Saint Lucia'],
        ['Tuvalu','Australia','New Zealand','Fiji','Tuvalu'],
        ['Barbados','Tuvalu','Ukraine','Nauru','Nauru'],
        ['Albania','Cyprus','Kosovo','Serbia','Kosovo'],
        ['Solomon Islands','Paraguay','Netherlands','Costa Rica','Paraguay'],
        ['Lesotho','Panama','Costa Rica','Belize','Belize'],
        ['Kenya','Rwanda','Palau','Bangladesh','Palau'],
        ['Antigua','Bolivia','Kiribati','Tuvalu','Antigua'],
        ['MaxLand','PivLand','Latvia','VigLand','PivLand']
        ]
    
    
    
    
    
    GLabel_545=tk.Label(FFlags)
    GLabel_545["anchor"] = "center"
    GLabel_545["bg"] = "#000000"
    GLabel_545["cursor"] = "arrow"
    ft = tkFont.Font(family='Times',size=26)
    GLabel_545["font"] = ft
    GLabel_545["fg"] = "#20cf20"
    GLabel_545["justify"] = "center"
    GLabel_545["text"] = "Name Countries by Flags"
    GLabel_545["relief"] = "sunken"
    GLabel_545.place(x=0,y=0,width=401,height=76)

    v1 = StringVar(FFlags)
    v2 = StringVar(FFlags)
    v3 = StringVar(FFlags)
    v4 = StringVar(FFlags)
    v5 = StringVar(FFlags)
    v1.set(options[0][0])
    v2.set(options[0][1])
    v3.set(options[0][2])
    v4.set(options[0][3])
    v5.set(levels[0][0])
    
    ft = tkFont.Font(family='Times',size=13)
    FFlag1 = Button(FFlags, justify="center", bg="#f0f0f0",font=ft,textvariable=v1,command=lambda : checkAnswer(FFlag1))
    FFlag1.place(x=70,y=340,width=120,height=40)
    
    ft = tkFont.Font(family='Times',size=13)
    FFlag2 = Button(FFlags, justify="center", bg="#f0f0f0",font=ft, textvariable=v2,command=lambda : checkAnswer(FFlag2))
    FFlag2.place(x=210,y=340,width=120,height=40)
    
    ft = tkFont.Font(family='Times',size=13)
    FFlag3 = Button(FFlags, justify="center", bg="#f0f0f0",font=ft,textvariable=v3,command=lambda : checkAnswer(FFlag3))
    FFlag3.place(x=70,y=390,width=120,height=40)

    ft = tkFont.Font(family='Times',size=13)
    FFlag4 = Button(FFlags, justify="center", bg="#f0f0f0",font=ft,textvariable=v4,command=lambda : checkAnswer(FFlag4))
    FFlag4.place(x=210,y=390,width=120,height=40)
    index = 0
    correct = 0

    FlagNext = tk.Button(FFlags, text='Next',bg='Orange', font=('Times', 20), command = lambda : displayNextQuestion())
    FlagNext.place(x=140,y=440,width=120,height=40)
    
    FlagImage = tk.Label(FFlags, image=LatviaFlag)
    FlagImage.pack(side="bottom", fill="both", expand="yes")
    FlagImage.place(x=50,y=140,width=300,height=150)
    
    FlagLevel= Label(FFlags, justify='center',fg='green',textvariable=v5, font=('Times', 16))
    FlagLevel.place(x=105,y=90,width=190,height=35)
    
    FBack=tk.Button(FFlags, justify="center", text="Back", bg="#f0f0f0",command=FlagBack)
    ft = tkFont.Font(family='Times',size=10)
    FBack["font"] = ft
    FBack.place(x=320,y=460,width=70,height=25)
    
    FFlags.mainloop()

def disableButtons(state):
    FFlag1['state'] = state
    FFlag2['state'] = state
    FFlag3['state'] = state
    FFlag4['state'] = state


def checkAnswer(button):
    global correct, index
    if button['text'] == options[index][4]:
        correct +=1
    index +=1
    disableButtons('disable')


# create a function to display the next question
def displayNextQuestion():
    global index, correct

    if FlagNext['text'] == 'Restart':
        correct = 0
        index = 0
        FlagNext['text'] = 'Next'
        FlagImage.configure(image=LatviaFlag)

    if index == len(options):
       FlagLevel['text'] = str(correct) + " / " + str(len(options))
       FlagNext['text'] = 'Restart'
       showinfo(title="You Completed the Test", message="The number of your correct answers is "+str(correct)+" / 30 ")
       





    else:
        disableButtons('normal')
        opts = options[index]
        lev = levels[index]
        FFlag1['text'] = opts[0]
        FFlag2['text'] = opts[1]
        FFlag3['text'] = opts[2]
        FFlag4['text'] = opts[3]
        FlagLevel['text'] = lev[0]
        v1.set(opts[0])
        v2.set(opts[1])
        v3.set(opts[2])
        v4.set(opts[3])
        v5.set(lev[0])
        if index >= 0:
            FlagLevel.configure(fg="green")
        if index >= 10:
            FlagLevel.configure(fg="dark orange")
        if index >= 20:
            FlagLevel.configure(fg="red")
        if index >= 27:
            FlagLevel.configure(fg="purple")
        if index >= 29:
            FlagLevel.configure(fg="black", font=('Times', 13))
            
        
            
        
        if index == 1:
            FlagImage.configure(image=RussiaFlag)
        if index == 2:
            FlagImage.configure(image=UkraineFlag)
        if index == 3:
            FlagImage.configure(image=UKFlag)
        if index == 4:
            FlagImage.configure(image=GermanyFlag)
        if index == 5:
            FlagImage.configure(image=CanadaFlag)
        if index == 6:
            FlagImage.configure(image=FranceFlag)
        if index == 7:
            FlagImage.configure(image=USAFlag)
        if index == 8:
            FlagImage.configure(image=SouthKoreaFlag)
        if index == 9:
            FlagImage.configure(image=IrelandFlag)
        if index == 10:
            FlagImage.configure(image=PolandFlag)
        if index == 11:
            FlagImage.configure(image=SouthAfricaFlag)
        if index == 12:
            FlagImage.configure(image=MalaysiaFlag)
        if index == 13:
            FlagImage.configure(image=SerbiaFlag)
        if index == 14:
            FlagImage.configure(image=IraqFlag)
        if index == 15:
            FlagImage.configure(image=SingaporeFlag)
        if index == 16:
            FlagImage.configure(image=KazakhstanFlag)
        if index == 17:
            FlagImage.configure(image=RomaniaFlag)
        if index == 18:
            FlagImage.configure(image=IvoryCoastFlag)
        if index == 19:
            FlagImage.configure(image=AlbaniaFlag)
        if index == 20:
            FlagImage.configure(image=MauritiusFlag)
        if index == 21:
            FlagImage.configure(image=SaintLuciaFlag)
        if index == 22:
            FlagImage.configure(image=TuvaluFlag)
        if index == 23:
            FlagImage.configure(image=NauruFlag)
        if index == 24:
            FlagImage.configure(image=KosovoFlag)
        if index == 25:
            FlagImage.configure(image=ParaguayFlag)
        if index == 26:
            FlagImage.configure(image=BelizeFlag)
        if index == 27:
            FlagImage.configure(image=PalauFlag)
        if index == 28:
            FlagImage.configure(image=AntiguaFlag)
        if index == 29:
            FlagImage.configure(image=PivLandFlag)
        

        if index == len(options) - 1:
            FlagNext['text'] = 'Check'






def PenBack():
    BombGui.destroy()
    gamesmenue()

def none():
    None

def BombPentagon():
    games.destroy()
    global t
    global Bomb
    global BombGui
    BombGui = Tk()
    BombGui.title('Maybe you should think before doing this?')
    BombGui.geometry('900x750')
    BombGui.resizable(False, False)
    
    pent1 ="https://i.imgur.com/qPDMhEY.jpg"
    response = requests.get(pent1)
    img_data = response.content
    bg = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    
    Bomb = Button(master=BombGui, text='حان وقت القصف!', command=BombThat)
    Bomb.pack(side='bottom', anchor='s')
    BombBack = Button(master=BombGui, text='Back', command=PenBack)
    BombBack.place(x=830,y=724,width=70,height=25)
    
    canvas = Canvas(BombGui, width=1520, height=950)
    t=RawTurtle(canvas)
    t.speed(1000)
    t.pensize(10)
    t.ht()
    canvas.pack(fill= "both", expand=True)
    canvas.create_image(-180, -275, image=bg, anchor="nw")

    BombGui.mainloop()
    
def BombThat():
    TurtleScreen._RUNNING=True
    global t
    t.penup()
    t.goto(random.randint(-100,700),random.randint(-420,200))
    i=1
    while i<=7:
        Bomb.configure(text='Wait',command=none)
        t.pendown()
        t.color('red')
        t.forward(60)
        t.right(180)
        t.color('orange')
        t.forward(60)
        t.right(180)
        t.left(18)
        t.forward(60)
        t.right(180)
        t.color('orange')
        t.forward(60)
        t.right(180)
        t.left(18)
        t.color('black')
        t.forward(60)
        t.right(180)
        t.forward(60)
        t.right(180)
        t.left(18)
        i+=1
    else:
        Bomb.configure(text='حان وقت القصف!',command=BombThat)

def GymGetData():
    games.destroy()
    ssql.execute(f"SELECT * FROM stats WHERE usermail = '{checkmail}'")
    gymrecord = ssql.fetchall()
    global SMuscle, SRank, SSkill
    for dat in gymrecord:
        SMuscle = dat[1]
        SRank = dat[2]
        SSkill = dat[3]
    LandovGym()

   
def LandovGym():
    global GymMuscle
    global gym
    global MuscleGym
    global MusclesGym
    global MPTGym
    global RankGym
    global SRank
    global ShowRank
    global PFP
    global img1, img2, img3, img4, img5, img6, img7, img8, img9, img10
    gym = Tk()
    gym.title("Pentagon Gym")
    width=400
    height=500
    screenwidth = gym.winfo_screenwidth()
    screenheight = gym.winfo_screenheight()
    alignstr = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
    gym.geometry(alignstr)
    gym.resizable(width=False, height=False)
    ShowSkill=SSkill
    ShowMus= SMuscle
    ShowRank=SRank
    
    
    varch=("Muscles Per Tap - "+str(ShowSkill))
    var=("Muscles💪: "+str(ShowMus))
    varrank=("Rank: "+str(SRank))
    gymc1="https://i.imgur.com/wBMzQbA.jpg"
    gymc2="https://i.imgur.com/X2m5lZY.jpg"
    gymc3="https://i.imgur.com/cM2TCWO.jpg"
    gymc4="https://i.imgur.com/Q5sWSwA.jpg"
    gymc5="https://i.imgur.com/qt8iZyU.jpg"
    gymc6="https://i.imgur.com/DR1aDh4.jpg"
    gymc7="https://i.imgur.com/zcMm6zY.jpg"
    gymc8="https://i.imgur.com/mqMbdhp.jpg"
    gymc9="https://i.imgur.com/f1WRuKp.jpg"
    gymc10="https://i.imgur.com/2oiZzPP.jpg" 
    response = requests.get(gymc1)
    img_data = response.content
    img1 = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    response = requests.get(gymc2)
    img_data = response.content
    img2 = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    response = requests.get(gymc3)
    img_data = response.content
    img3 = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    response = requests.get(gymc4)
    img_data = response.content
    img4 = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    response = requests.get(gymc5)
    img_data = response.content
    img5 = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    response = requests.get(gymc6)
    img_data = response.content
    img6 = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    response = requests.get(gymc7)
    img_data = response.content
    img7 = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    response = requests.get(gymc8)
    img_data = response.content
    img8 = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    response = requests.get(gymc9)
    img_data = response.content
    img9 = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    response = requests.get(gymc10)
    img_data = response.content
    img10 = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    if SRank == "Programmer":
        gymch=img1
    elif SRank == "Pivcevičs":
        gymch=img2
    elif SRank == "Ghoul":
        gymch=img3
    elif SRank == "49 Bus":
        gymch=img4
    elif SRank == "Jordan Romero":
        gymch=img5
    elif SRank == "Street Cleaner":
        gymch=img6
    elif SRank == "Viguļars":
        gymch=img7
    elif SRank == "Gym Boss":
        gymch=img8
    elif SRank == "Giga Chad":
        gymch=img9
    elif SRank == "Maksims Landovskis":
        gymch=img10
    else:
        pass
    InfoGym=tk.Label(gym)
    InfoGym["anchor"] = "center"
    InfoGym["bg"] = "#000000"
    InfoGym["cursor"] = "arrow"
    ft = tkFont.Font(family='Times',size=18)
    InfoGym["font"] = ft
    InfoGym["fg"] = "#20cf20"
    InfoGym["justify"] = "center"
    InfoGym["text"] = "Landovskis Pentagon Gym"
    InfoGym["relief"] = "sunken"
    InfoGym.place(x=0,y=0,width=399,height=76)

    BackGym=tk.Button(gym)
    BackGym["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=10)
    BackGym["font"] = ft
    BackGym["fg"] = "#000000"
    BackGym["justify"] = "center"
    BackGym["text"] = "Back"
    BackGym.place(x=320,y=460,width=70,height=25)
    BackGym["command"] = GymBack


    PFP = tk.Label(gym, image=gymch)
    PFP.pack(side="bottom", fill="both", expand="yes")
    PFP.place(x=20,y=100,width=120,height=120)

    StatsGym=tk.Label(gym)
    ft = tkFont.Font(family='Times',size=15)
    StatsGym["font"] = ft
    StatsGym["fg"] = "#333333"
    StatsGym["justify"] = "center"
    StatsGym["text"] = "Stats"
    StatsGym.place(x=150,y=90,width=232,height=30)

    
    RankGym = Label(gym, anchor='w', justify='left',fg='#333333',text=varrank)
    ft = tkFont.Font(family='Times',size=10)
    RankGym["font"] = ft
    RankGym.place(x=160,y=130,width=236,height=30)


    MusclesGym=Label(gym, anchor='w', justify='left',fg='#333333',text=var)
    MusclesGym.pack()
    ft = tkFont.Font(family='Times',size=10)
    MusclesGym["font"] = ft
    MusclesGym.place(x=160,y=160,width=235,height=30)


    BookGym=Button(gym,bg="#f0f0f0", justify="center",text="📕 Book (+1)\n"+"25💪",command=BuyBook)
    ft = tkFont.Font(family='Times',size=7)
    BookGym["font"] = ft
    BookGym.place(x=10,y=312,width=90,height=30)


    TapGym=tk.Button(gym)
    TapGym["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=70)
    TapGym["font"] = ft
    TapGym["fg"] = "#000000"
    TapGym["justify"] = "center"
    TapGym["text"] = "💪"
    TapGym.place(x=250,y=290,width=119,height=122)
    TapGym["command"] = TapActGym


    MPTGym=Label(gym, anchor='w', justify='center',fg='#333333', text=varch)
    MPTGym.pack()
    ft = tkFont.Font(family='Times',size=13)
    MPTGym["font"] = ft
    MPTGym.place(x=190,y=250,width=235,height=35)
    

    CigGym=tk.Button(gym)
    CigGym["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=10)
    CigGym["font"] = ft
    CigGym["fg"] = "#000000"
    CigGym["justify"] = "center"
    CigGym["text"] = "🚬Cigarette(?)"
    CigGym.place(x=10,y=280,width=90,height=30)
    CigGym["command"] = Cigarette

    
    BoxGym=Button(gym,bg="#f0f0f0", justify="center",text="🥊Boxing(+5)\n"+"100💪",command=BuyBox)
    ft = tkFont.Font(family='Times',size=7)
    BoxGym["font"] = ft
    BoxGym.place(x=10,y=344,width=90,height=30)


    DumGym=tk.Button(gym)
    DumGym["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=7)
    DumGym["font"] = ft
    DumGym["fg"] = "#000000"
    DumGym["justify"] = "center"
    DumGym["text"] = "🔩Dumbbell(+15)\n"+ "500💪"
    DumGym.place(x=10,y=376,width=90,height=30)
    DumGym["command"] = BuyDumbbell


    AnchorGym=tk.Button(gym)
    AnchorGym["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=7)
    AnchorGym["font"] = ft
    AnchorGym["fg"] = "#000000"
    AnchorGym["justify"] = "center"
    AnchorGym["text"] = "⚓Anchor(+75)\n"+ "10000💪"
    AnchorGym.place(x=10,y=408,width=90,height=30)
    AnchorGym["command"] = BuyAnchor


    ElephantGym=tk.Button(gym)
    ElephantGym["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=7)
    ElephantGym["font"] = ft
    ElephantGym["fg"] = "#000000"
    ElephantGym["justify"] = "center"
    ElephantGym["text"] = "🐘Elephant(+500)\n"+ "100.000💪"
    ElephantGym.place(x=110,y=280,width=90,height=30)
    ElephantGym["command"] = BuyElephant


    CarGym=tk.Button(gym)
    CarGym["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=7)
    CarGym["font"] = ft
    CarGym["fg"] = "#000000"
    CarGym["justify"] = "center"
    CarGym["text"] = "🚗Car(+3500)\n"+ "500.000💪"
    CarGym.place(x=110,y=312,width=90,height=30)
    CarGym["command"] = BuyCar


    PlaneGym=tk.Button(gym)
    PlaneGym["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=7)
    PlaneGym["font"] = ft
    PlaneGym["fg"] = "#000000"
    PlaneGym["justify"] = "center"
    PlaneGym["text"] = "✈Plane(+7500)\n"+ "2.500.000💪"
    PlaneGym.place(x=110,y=344,width=90,height=30)
    PlaneGym["command"] = BuyPlane


    MoaiGym=tk.Button(gym)
    MoaiGym["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=7)
    MoaiGym["font"] = ft
    MoaiGym["fg"] = "#000000"
    MoaiGym["justify"] = "center"
    MoaiGym["text"] = "🗿Moai(+50000)\n"+ "25.000.000💪"
    MoaiGym.place(x=110,y=376,width=90,height=30)
    MoaiGym["command"] = BuyMoai


    PlanetGym=tk.Button(gym)
    PlanetGym["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=7)
    PlanetGym["font"] = ft
    PlanetGym["fg"] = "#000000"
    PlanetGym["justify"] = "center"
    PlanetGym["text"] = "🌏Planet(+999999)\n"+ "666.666.666💪"
    PlanetGym.place(x=110,y=408,width=90,height=30)
    PlanetGym["command"] = BuyPlanet


    UpgradeInfoGym=tk.Label(gym)
    ft = tkFont.Font(family='Times',size=15)
    UpgradeInfoGym["font"] = ft
    UpgradeInfoGym["fg"] = "#333333"
    UpgradeInfoGym["justify"] = "center"
    UpgradeInfoGym["text"] = "Upgrades"
    UpgradeInfoGym.place(x=40,y=240,width=133,height=30)
    
    gym.mainloop()
    
def update_img():
    if ShowRank == "Programmer":
        PFP.configure(image=img1)
        PFP.image=img1
    elif ShowRank == "Pivcevičs":
        PFP.configure(image=img2)
        PFP.image=img2
    elif ShowRank == "Ghoul":
        PFP.configure(image=img3)
        PFP.image=img3
    elif ShowRank == "49 Bus":
        PFP.configure(image=img4)
        PFP.image=img4
    elif ShowRank == "Jordan Romero":
        PFP.configure(image=img5)
        PFP.image=img5
    elif ShowRank == "Street Cleaner":
        PFP.configure(image=img6)
        PFP.image=img6
    elif ShowRank == "Viguļars":
        PFP.configure(image=img7)
        PFP.image=img7
    elif ShowRank == "Gym Boss":
        PFP.configure(image=img8)
        PFP.image=img8
    elif ShowRank == "Giga Chad":
        PFP.configure(image=img9)
        PFP.image=img9
    elif ShowRank == "Maksims Landovskis":
        PFP.configure(image=img10)
        PFP.image=img10
    else:
        print('You Hacker BD')

def GymBack():
    gym.destroy()
    gamesmenue()

def TapActGym():
    global SSkill
    global SMuscle
    global var
    global gym
    #global MusclesGym
    SMuscle += SSkill
    ssql.execute(f"UPDATE stats SET Muscles = {SMuscle} WHERE usermail = '{checkmail}'")
    sdb.commit()
    ShowMus = SMuscle
    var=("Muscles💪: "+str(ShowMus))
    MusclesGym.config(text=var)


def Cigarette():
    showwarning(title="Maksims Landovskis", message="Please don't smoke, it's bad for your health")

def BuyPlanet():
    global SSkill
    global SMuscle
    global SRank
    global var
    global varch
    global varrank
    global ShowRank
    if SMuscle >=666666666:
        SMuscle -=666666666
        SSkill += 999999
        ssql.execute(f"UPDATE stats SET Skill = {SSkill} WHERE usermail = '{checkmail}'")
        ssql.execute(f"UPDATE stats SET Muscles = {SMuscle} WHERE usermail = '{checkmail}'")
        sdb.commit()
        ShowSkill=SSkill
        ShowMus = SMuscle
        varch=("Muscles Per Tap - "+str(ShowSkill))
        var=("Muscles💪: "+str(ShowMus))
        MusclesGym.config(text=var)
        MPTGym.config(text=varch)
        if SRank == "Giga Chad" or SRank == "Gym Boss" or SRank == "Viguļars" or SRank == "Street Cleaner" or SRank == "Ghoul" or SRank == "49 Bus" or SRank == "Jordan Romero" or SRank == "Pivcevičs" or SRank == "Programmer":
            SRank = "Maksims Landovskis"
            ssql.execute(f"UPDATE stats SET Rank = '{SRank}' WHERE usermail = '{checkmail}'")
            sdb.commit()
            ShowRank = SRank
            varrank=("Rank: "+str(ShowRank))
            RankGym.config(text=varrank)
            update_img()
        else:
            None            
    else:
        showerror(title="Error", message="You Don't Have 666.666.666 muscles")



def BuyMoai():
    global SSkill
    global SMuscle
    global varch
    global var
    global varch
    global varrank
    global SRank
    global ShowRank
    if SMuscle >=25000000:
        SMuscle -=25000000
        SSkill += 50000
        ssql.execute(f"UPDATE stats SET Skill = {SSkill} WHERE usermail = '{checkmail}'")
        ssql.execute(f"UPDATE stats SET Muscles = {SMuscle} WHERE usermail = '{checkmail}'")
        sdb.commit()
        ShowSkill=SSkill
        ShowMus = SMuscle
        varch=("Muscles Per Tap - "+str(ShowSkill))
        var=("Muscles💪: "+str(ShowMus))
        MusclesGym.config(text=var)
        MPTGym.config(text=varch)
        if SRank == "Gym Boss" or SRank == "Viguļars" or SRank == "Street Cleaner" or SRank == "Ghoul" or SRank == "49 Bus" or SRank == "Jordan Romero" or SRank == "Pivcevičs" or SRank == "Programmer":
            SRank = "Giga Chad"
            ssql.execute(f"UPDATE stats SET Rank = '{SRank}' WHERE usermail = '{checkmail}'")
            sdb.commit()
            ShowRank = SRank
            varrank=("Rank: "+str(ShowRank))
            RankGym.config(text=varrank)
            update_img()
        else:
            None            
    else:
        showerror(title="Error", message="You Don't Have 25.000.000 muscles")




def BuyPlane():
    global SSkill
    global SMuscle
    global SRank
    global var
    global varch
    global varrank
    global ShowRank
    if SMuscle >=2500000:
        SMuscle -=2500000
        SSkill += 7500
        ssql.execute(f"UPDATE stats SET Skill = {SSkill} WHERE usermail = '{checkmail}'")
        ssql.execute(f"UPDATE stats SET Muscles = {SMuscle} WHERE usermail = '{checkmail}'")
        sdb.commit()
        ShowSkill=SSkill
        ShowMus = SMuscle
        varch=("Muscles Per Tap - "+str(ShowSkill))
        var=("Muscles💪: "+str(ShowMus))
        MusclesGym.config(text=var)
        MPTGym.config(text=varch)
        if SRank =="Viguļars" or SRank =="Street Cleaner" or SRank == "Jordan Romero" or SRank =="49 Bus" or SRank == "Pivcevičs" or SRank =="Ghoul" or SRank == "Programmer":
            SRank = "Gym Boss"
            ssql.execute(f"UPDATE stats SET Rank = '{SRank}' WHERE usermail = '{checkmail}'")
            sdb.commit()
            ShowRank = SRank
            varrank=("Rank: "+str(ShowRank))
            RankGym.config(text=varrank)
            update_img()
        else:
            None            
    else:
        showerror(title="Error", message="You Don't Have 2.500.000 muscles")


def BuyCar():
    global SSkill
    global SMuscle
    global SRank
    global var
    global varch
    global varrank
    global ShowRank
    if SMuscle >=500000:
        SMuscle -=500000
        SSkill += 3500
        ssql.execute(f"UPDATE stats SET Skill = {SSkill} WHERE usermail = '{checkmail}'")
        ssql.execute(f"UPDATE stats SET Muscles = {SMuscle} WHERE usermail = '{checkmail}'")
        sdb.commit()
        ShowSkill=SSkill
        ShowMus = SMuscle
        varch=("Muscles Per Tap - "+str(ShowSkill))
        var=("Muscles💪: "+str(ShowMus))
        MusclesGym.config(text=var)
        MPTGym.config(text=varch)
        if SRank == "Street Cleaner" or SRank == "Jordan Romero" or SRank =="49 Bus" or SRank == "Pivcevičs" or SRank == "Programmer"or SRank =="Ghoul":
            SRank = "Viguļars"
            ssql.execute(f"UPDATE stats SET Rank = '{SRank}' WHERE usermail = '{checkmail}'")
            sdb.commit()
            ShowRank = SRank
            varrank=("Rank: "+str(ShowRank))
            RankGym.config(text=varrank)
            update_img()
        else:
            None            
    else:
        showerror(title="Error", message="You Don't Have 500.000 muscles")



def BuyElephant():
    global SSkill
    global SMuscle
    global SRank
    global var
    global varch
    global varrank
    global ShowRank
    if SMuscle >=100000:
        SMuscle -=100000
        SSkill += 500
        ssql.execute(f"UPDATE stats SET Skill = {SSkill} WHERE usermail = '{checkmail}'")
        ssql.execute(f"UPDATE stats SET Muscles = {SMuscle} WHERE usermail = '{checkmail}'")
        sdb.commit()
        ShowSkill=SSkill
        ShowMus = SMuscle
        varch=("Muscles Per Tap - "+str(ShowSkill))
        var=("Muscles💪: "+str(ShowMus))
        MusclesGym.config(text=var)
        MPTGym.config(text=varch)
        if SRank == "Jordan Romero" or SRank =="49 Bus" or SRank == "Pivcevičs" or SRank == "Programmer"or SRank =="Ghoul":
            SRank = "Street Cleaner"
            ssql.execute(f"UPDATE stats SET Rank = '{SRank}' WHERE usermail = '{checkmail}'")
            sdb.commit()
            ShowRank = SRank
            varrank=("Rank: "+str(ShowRank))
            RankGym.config(text=varrank)
            update_img()
        else:
            None    
    else:
        showerror(title="Error", message="You Don't Have 100.000 muscles")



def BuyAnchor():
    global SSkill
    global SMuscle
    global SRank
    global var
    global varch
    global varrank
    global ShowRank
    if SMuscle >=10000:
        SMuscle -=10000
        SSkill += 75
        ssql.execute(f"UPDATE stats SET Skill = {SSkill} WHERE usermail = '{checkmail}'")
        ssql.execute(f"UPDATE stats SET Muscles = {SMuscle} WHERE usermail = '{checkmail}'")
        sdb.commit()
        ShowSkill=SSkill
        ShowMus = SMuscle
        varch=("Muscles Per Tap - "+str(ShowSkill))
        var=("Muscles💪: "+str(ShowMus))
        MusclesGym.config(text=var)
        MPTGym.config(text=varch)
        if SRank == "49 Bus" or SRank == "Pivcevičs" or SRank == "Programmer"or SRank =="Ghoul":
            SRank = "Jordan Romero"
            ssql.execute(f"UPDATE stats SET Rank = '{SRank}' WHERE usermail = '{checkmail}'")
            sdb.commit()
            ShowRank = SRank
            varrank=("Rank: "+str(ShowRank))
            RankGym.config(text=varrank)
            update_img()
        else:
            None            
    else:
        showerror(title="Error", message="You Don't Have 10.000 muscles")



def BuyDumbbell():
    global SSkill
    global SMuscle
    global SRank
    global var
    global varch
    global varrank
    global ShowRank
    if SMuscle >=500:
        SMuscle -=500
        SSkill += 15
        ssql.execute(f"UPDATE stats SET Skill = {SSkill} WHERE usermail = '{checkmail}'")
        ssql.execute(f"UPDATE stats SET Muscles = {SMuscle} WHERE usermail = '{checkmail}'")
        sdb.commit()
        ShowSkill=SSkill
        ShowMus = SMuscle
        varch=("Muscles Per Tap - "+str(ShowSkill))
        var=("Muscles💪: "+str(ShowMus))
        MusclesGym.config(text=var)
        MPTGym.config(text=varch)
        if SRank == "Pivcevičs" or SRank == "Programmer"or SRank =="Ghoul":
            SRank = "49 Bus"
            ShowRank = SRank
            ssql.execute(f"UPDATE stats SET Rank = '{SRank}' WHERE usermail = '{checkmail}'")
            sdb.commit()
            varrank=("Rank: "+str(ShowRank))
            RankGym.config(text=varrank)
            update_img()
        else:
            None
    else:
        showerror(title="Error", message="You Don't Have 500 muscles")



def BuyBox():
    global SSkill
    global SMuscle
    global SRank
    global var
    global varch
    global varrank
    global ShowRank
    if SMuscle >=100:
        SMuscle -=100
        SSkill += 5
        ssql.execute(f"UPDATE stats SET Skill = {SSkill} WHERE usermail = '{checkmail}'")
        ssql.execute(f"UPDATE stats SET Muscles = {SMuscle} WHERE usermail = '{checkmail}'")
        sdb.commit()
        ShowSkill=SSkill
        ShowMus = SMuscle
        varch=("Muscles Per Tap - "+str(ShowSkill))
        var=("Muscles💪: "+str(ShowMus))
        MusclesGym.config(text=var)
        MPTGym.config(text=varch)
        if SRank == "Pivcevičs" or SRank == "Programmer":
            SRank = "Ghoul"
            ShowRank = SRank
            ssql.execute(f"UPDATE stats SET Rank = '{SRank}' WHERE usermail = '{checkmail}'")
            sdb.commit()
            varrank=("Rank: "+str(ShowRank))
            RankGym.config(text=varrank)
            update_img()
        else:
            None
    else:
        showerror(title="Error", message="You Don't Have 100 muscles")


def BuyBook():
    global SSkill
    global SMuscle
    global SRank
    global var
    global varch
    global varrank
    global ShowRank
    if SMuscle >=25:
        SMuscle -=25
        SSkill += 1
        ssql.execute(f"UPDATE stats SET Skill = {SSkill} WHERE usermail = '{checkmail}'")
        ssql.execute(f"UPDATE stats SET Muscles = {SMuscle} WHERE usermail = '{checkmail}'")
        sdb.commit()
        ShowSkill=SSkill
        ShowMus = SMuscle
        varch=("Muscles Per Tap - "+str(ShowSkill))
        var=("Muscles💪: "+str(ShowMus))
        MusclesGym.config(text=var)
        MPTGym.config(text=varch)
        if SRank == "Programmer":
            SRank = "Pivcevičs"
            ShowRank = SRank
            ssql.execute(f"UPDATE stats SET Rank = '{SRank}' WHERE usermail = '{checkmail}'")
            sdb.commit()
            varrank=("Rank: "+str(ShowRank))
            RankGym.config(text=varrank)
            update_img()
        else:
            None
    else:
        showerror(title="Error", message="You Don't Have 25 muscles")
    
    


def myclick(number):
    global entry
    entry.insert(tk.END, number)
    

def equal():
    try:
        y = str(eval(entry.get()))
        entry.delete(0, tk.END)
        entry.insert(0, y)
    except:
        showerror(title="Error", message="Syntax Error!")
 
 
def clear():
    entry.delete(0, tk.END)

def calculatoro():
    global entry
    global calculator
    appsmenu.destroy()
    calculator = Tk()
    calculator.title("Pentagon Calculator")
    width=400
    height=500
    screenwidth = calculator.winfo_screenwidth()
    screenheight = calculator.winfo_screenheight()
    alignstr = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
    calculator.geometry(alignstr)
    calculator.resizable(width=False, height=False)

    entry=tk.Entry(calculator)
    entry["bg"] = "#ffffff"
    entry["borderwidth"] = "3px"
    ft = tkFont.Font(family='Times',size=18)
    entry["font"] = ft
    entry["fg"] = "#333333"
    entry["justify"] = "right"
    entry["text"] = "Entry"
    entry["relief"] = "sunken"
    entry.place(x=0,y=130,width=240,height=56)

    CalculatorBack=tk.Button(calculator)
    CalculatorBack["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=10)
    CalculatorBack["font"] = ft
    CalculatorBack["fg"] = "#000000"
    CalculatorBack["justify"] = "center"
    CalculatorBack["text"] = "Back"
    CalculatorBack.place(x=320,y=460,width=70,height=25)
    CalculatorBack["command"] = calcback

    Calc1=tk.Button(calculator)
    Calc1["anchor"] = "center"
    Calc1["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    Calc1["font"] = ft
    Calc1["fg"] = "#000000"
    Calc1["justify"] = "center"
    Calc1["text"] = "1"
    Calc1.place(x=10,y=330,width=50,height=50)
    Calc1["command"] =lambda: myclick(1)

    Calc2=tk.Button(calculator)
    Calc2["anchor"] = "center"
    Calc2["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    Calc2["font"] = ft
    Calc2["fg"] = "#000000"
    Calc2["justify"] = "center"
    Calc2["text"] = "2"
    Calc2.place(x=70,y=330,width=50,height=50)
    Calc2["command"] =lambda: myclick(2)

    Calc3=tk.Button(calculator)
    Calc3["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    Calc3["font"] = ft
    Calc3["fg"] = "#000000"
    Calc3["justify"] = "center"
    Calc3["text"] = "3"
    Calc3.place(x=130,y=330,width=50,height=50)
    Calc3["command"] =lambda: myclick(3)

    CalculatorBack5=tk.Button(calculator)
    CalculatorBack5["anchor"] = "center"
    CalculatorBack5["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    CalculatorBack5["font"] = ft
    CalculatorBack5["fg"] = "#000000"
    CalculatorBack5["justify"] = "center"
    CalculatorBack5["text"] = "0"
    CalculatorBack5.place(x=70,y=390,width=50,height=50)
    CalculatorBack5["command"] =lambda: myclick(0)

    Calc6=tk.Button(calculator)
    Calc6["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    Calc6["font"] = ft
    Calc6["fg"] = "#000000"
    Calc6["justify"] = "center"
    Calc6["text"] = "6"
    Calc6.place(x=130,y=270,width=50,height=50)
    Calc6["command"] =lambda: myclick(6)

    Calc5=tk.Button(calculator)
    Calc5["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    Calc5["font"] = ft
    Calc5["fg"] = "#000000"
    Calc5["justify"] = "center"
    Calc5["text"] = "5"
    Calc5.place(x=70,y=270,width=50,height=50)
    Calc5["command"] =lambda: myclick(5)

    Calc4=tk.Button(calculator)
    Calc4["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    Calc4["font"] = ft
    Calc4["fg"] = "#000000"
    Calc4["justify"] = "center"
    Calc4["text"] = "4"
    Calc4.place(x=10,y=270,width=50,height=50)
    Calc4["command"] =lambda: myclick(4)

    Calc7=tk.Button(calculator)
    Calc7["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    Calc7["font"] = ft
    Calc7["fg"] = "#000000"
    Calc7["justify"] = "center"
    Calc7["text"] = "7"
    Calc7.place(x=10,y=210,width=50,height=50)
    Calc7["command"] =lambda: myclick(7)

    Calc8=tk.Button(calculator)
    Calc8["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    Calc8["font"] = ft
    Calc8["fg"] = "#000000"
    Calc8["justify"] = "center"
    Calc8["text"] = "8"
    Calc8.place(x=70,y=210,width=50,height=50)
    Calc8["command"] =lambda: myclick(8)

    Calc9=tk.Button(calculator)
    Calc9["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    Calc9["font"] = ft
    Calc9["fg"] = "#000000"
    Calc9["justify"] = "center"
    Calc9["text"] = "9"
    Calc9.place(x=130,y=210,width=50,height=50)
    Calc9["command"] =lambda: myclick(9)

    CalcPluso=tk.Button(calculator)
    CalcPluso["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    CalcPluso["font"] = ft
    CalcPluso["fg"] = "#000000"
    CalcPluso["justify"] = "center"
    CalcPluso["text"] = "+"
    CalcPluso.place(x=190,y=210,width=50,height=50)
    CalcPluso["command"] =lambda: myclick('+')

    CalcMinuso=tk.Button(calculator)
    CalcMinuso["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    CalcMinuso["font"] = ft
    CalcMinuso["fg"] = "#000000"
    CalcMinuso["justify"] = "center"
    CalcMinuso["text"] = "-"
    CalcMinuso.place(x=190,y=270,width=50,height=50)
    CalcMinuso["command"] =lambda: myclick('-')

    CalcMulitply=tk.Button(calculator)
    CalcMulitply["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    CalcMulitply["font"] = ft
    CalcMulitply["fg"] = "#000000"
    CalcMulitply["justify"] = "center"
    CalcMulitply["text"] = "*"
    CalcMulitply.place(x=190,y=330,width=50,height=50)
    CalcMulitply["command"] =lambda: myclick('*')

    CalcD=tk.Button(calculator)
    CalcD["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    CalcD["font"] = ft
    CalcD["fg"] = "#000000"
    CalcD["justify"] = "center"
    CalcD["text"] = "/"
    CalcD.place(x=190,y=390,width=50,height=50)
    CalcD["command"] =lambda: myclick('/')

    CalcC=tk.Button(calculator)
    CalcC["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    CalcC["font"] = ft
    CalcC["fg"] = "#000000"
    CalcC["justify"] = "center"
    CalcC["text"] = "C"
    CalcC.place(x=10,y=390,width=50,height=50)
    CalcC["command"] =clear

    CalcE=tk.Button(calculator)
    CalcE["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    CalcE["font"] = ft
    CalcE["fg"] = "#000000"
    CalcE["justify"] = "center"
    CalcE["text"] = "="
    CalcE.place(x=130,y=390,width=50,height=50)
    CalcE["command"] = equal

    CalcPI=tk.Label(calculator)
    CalcPI["anchor"] = "center"
    ft = tkFont.Font(family='Times',size=148)
    CalcPI["font"] = ft
    CalcPI["fg"] = "#333333"
    CalcPI["justify"] = "center"
    CalcPI["text"] = "𝝅"
    CalcPI.place(x=270,y=180,width=105,height=139)

    C4Code=tk.Label(calculator)
    C4Code["activebackground"] = "#90ee90"
    C4Code["activeforeground"] = "#20cf20"
    C4Code["anchor"] = "center"
    C4Code["bg"] = "#000000"
    ft = tkFont.Font(family='Times',size=25)
    C4Code["font"] = ft
    C4Code["fg"] = "#20cf20"
    C4Code["justify"] = "center"
    C4Code["text"] = "C4"
    C4Code.place(x=0,y=0,width=401,height=76)
    
def calcback():
    calculator.destroy()
    appsmenue()


def paintback():
    painting.destroy()
    appsmenue()




            
def on_key_press(event):
    if event.keysym == 'Left':
        TurtleScreen._RUNNING=True
        tu.left(45)
    elif event.keysym == 'Right':
        TurtleScreen._RUNNING=True
        tu.right(45)
    elif event.keysym == 'Up':
        TurtleScreen._RUNNING=True
        tu.forward(45)
    elif event.keysym == 'Down':
        TurtleScreen._RUNNING=True
        tu.back(45)
        


def save():
    x=painting.winfo_rootx() + canvas.winfo_x()
    y=painting.winfo_rooty() + canvas.winfo_y()
    x1=x+canvas.winfo_width()
    y1=y+canvas.winfo_height()
    ImageGrab.grab().crop((x, y, x1, y1)).save('pentagon_painting.png')
    


def paintingo():
    global tu
    global painting
    global canvas
    global color
    global colors
    appsmenu.destroy()
    painting = Tk()
    painting.title('Paint')
    painting.geometry('500x540')
    painting.resizable(False, False)
    colors = ['black', 'forest green', 'green']
    color = colors[0]

    canvas = Canvas(master=painting, width=500, height=500)
    canvas.pack()

    tu=RawTurtle(canvas)
    tu.pensize(10)
    tu.color(color)
    painting.bind('<KeyPress>', on_key_press)
    
    btn_color = Button(master=painting, text='Change Colour', command=color_change)
    btn_color.pack(side=LEFT)

    btn_save = Button(master=painting, text='Save', command=save)
    btn_save.pack(side=LEFT)

    btn_back = Button(master=painting, text='Back', command=paintback)
    btn_back.pack(side=RIGHT)
    
    info = Label(master=painting, text='Paint with arrows')
    info.pack(side=RIGHT)


def color_change():
    global color
    global colors
    TurtleScreen._RUNNING=True
    for i in range(len(color) -1):
        if colors[i] == color:
            if i+1 == len(colors) - 1:
                tu.color(colors [0])
                color = colors[0]
                break
            else:
                tu.color(colors[i+1])
                color = colors[i+1]
                break


def change1():
    menue.destroy()
    appsmenue()
    
def change2():
    menue.destroy()
    gamesmenue()

def appsmenue():
    global appsmenu
    appsmenu = Tk()
    appsmenu.title("Pentagon Hacker")
    width=400
    height=500
    screenwidth = appsmenu.winfo_screenwidth()
    screenheight = appsmenu.winfo_screenheight()
    alignstr = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
    appsmenu.geometry(alignstr)
    appsmenu.resizable(width=False, height=False)
    
    img_url = "https://www.marketbeat.com/scripts/temp/estimateswide4879.png"
    response = requests.get(img_url)
    img_data = response.content
    img = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    panel = tk.Label(appsmenu, image=img)

    AppsInfo=tk.Label(appsmenu)
    AppsInfo["anchor"] = "center"
    AppsInfo["bg"] = "#000000"
    AppsInfo["cursor"] = "arrow"
    ft = tkFont.Font(family='Times',size=26)
    AppsInfo["font"] = ft
    AppsInfo["fg"] = "#20cf20"
    AppsInfo["justify"] = "center"
    AppsInfo["text"] = "Apps To Hack Pentagon"
    AppsInfo["relief"] = "sunken"
    AppsInfo.place(x=0,y=0,width=401,height=76)

    AppsBack=tk.Button(appsmenu)
    AppsBack["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=10)
    AppsBack["font"] = ft
    AppsBack["fg"] = "#000000"
    AppsBack["justify"] = "center"
    AppsBack["text"] = "Back"
    AppsBack.place(x=320,y=460,width=70,height=25)
    AppsBack["command"] = AppsBacko

    AppCalc=tk.Button(appsmenu)
    AppCalc["anchor"] = "center"
    AppCalc["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=16)
    AppCalc["font"] = ft
    AppCalc["fg"] = "#000000"
    AppCalc["justify"] = "center"
    AppCalc["text"] = "Calculator"
    AppCalc.place(x=10,y=140,width=120,height=40)
    AppCalc["command"] = calculatoro

    AppPain=tk.Button(appsmenu)
    AppPain["anchor"] = "center"
    AppPain["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=10)
    AppPain["font"] = ft
    AppPain["fg"] = "#000000"
    AppPain["justify"] = "center"
    AppPain["text"] = "Paint The Pentagon"
    AppPain.place(x=140,y=140,width=120,height=40)
    AppPain["command"] = paintingo

    AppGall=tk.Button(appsmenu)
    AppGall["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=16)
    AppGall["font"] = ft
    AppGall["fg"] = "#000000"
    AppGall["justify"] = "center"
    AppGall["text"] = "Gallery"
    AppGall.place(x=270,y=140,width=120,height=40)
    AppGall["command"] = changeGal

    AppMore=tk.Button(appsmenu)
    AppMore["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=10)
    AppMore["font"] = ft
    AppMore["fg"] = "#000000"
    AppMore["justify"] = "center"
    AppMore["text"] = "..."
    AppMore.place(x=10,y=200,width=120,height=40)
    AppMore["command"] = None

def AppsBacko():
    appsmenu.destroy()
    appmenue()







def AppGallo():
    print("command")


def profile():
    menue.destroy()
    pfp1 = "https://i.imgur.com/9ya3LE5.jpeg"
    pfp2 = "https://i.imgur.com/KFgdOu0.jpeg"
    pfp3 = "https://i.imgur.com/LUOG4Zm.png"
    pfp4 = "https://i.imgur.com/Z5GfQ34.jpeg"
    Secure = "https://i.imgur.com/bO0nW4f.png"
    pfpch = "1"
    global profilegui
    profilegui = Tk()
    profilegui.title("Pentagon Employee Profile")
    width=400
    height=500
    screenwidth = profilegui.winfo_screenwidth()
    screenheight = profilegui.winfo_screenheight()
    alignstr = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
    profilegui.geometry(alignstr)
    profilegui.resizable(width=False, height=False)
    
    PenInfo=tk.Label(profilegui)
    PenInfo["anchor"] = "center"
    PenInfo["bg"] = "#000000"
    PenInfo["cursor"] = "arrow"
    ft = tkFont.Font(family='Times',size=14)
    PenInfo["font"] = ft
    PenInfo["fg"] = "#20cf20"
    PenInfo["justify"] = "center"
    PenInfo["text"] = "The official account of a Pentagon employee"
    PenInfo["relief"] = "sunken"
    PenInfo.place(x=0,y=0,width=401,height=76)
    
    profback=tk.Button(profilegui)
    profback["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=10)
    profback["font"] = ft
    profback["fg"] = "#000000"
    profback["justify"] = "center"
    profback["text"] = "Back"
    profback.place(x=320,y=460,width=70,height=25)
    profback["command"] = profbacko

    
    global DisplayGender
    if DisplayGender == 1:
        pfpch=pfp1
    elif DisplayGender == 2:
       pfpch=pfp2
    elif DisplayGender == 3:
        pfpch=pfp3
    else:
        pfpch=pfp4
    response = requests.get(pfpch)
    img_data = response.content
    img = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    panel = tk.Label(profilegui, image=img)
    panel.pack(side="bottom", fill="both", expand="yes")
    panel.place(x=20,y=100,width=120,height=120)

    Mark=tk.Label(profilegui)
    ft = tkFont.Font(family='Times',size=15)
    Mark["font"] = ft
    Mark["fg"] = "#333333"
    Mark["justify"] = "center"
    Mark["text"] = "US Department of Defense"
    Mark.place(x=150,y=90,width=232,height=30)

    ProfName=tk.Label(profilegui)
    ProfName["anchor"] = "w"
    ft = tkFont.Font(family='Times',size=10)
    ProfName["font"] = ft
    ProfName["fg"] = "#333333"
    ProfName["justify"] = "left"
    ProfName["text"] = "Name: " + DisplayUser
    ProfName.place(x=160,y=130,width=236,height=30)

    ProfAge=tk.Label(profilegui)
    ProfAge["anchor"] = "w"
    ft = tkFont.Font(family='Times',size=10)
    ProfAge["font"] = ft
    ProfAge["fg"] = "#333333"
    ProfAge["justify"] = "left"
    profgender = ""
    if pfpch == pfp1:
        profgender="Male"
    elif pfpch == pfp2:
        profgender="Female"
    elif pfpch == pfp3:
        profgender="Arsenijs"
    else:
        profgender="Hacker"
    ProfAge["text"] = "Gender: "+profgender
    ProfAge.place(x=160,y=160,width=235,height=30)

    ProfCountry=tk.Label(profilegui)
    ProfCountry["anchor"] = "w"
    ft = tkFont.Font(family='Times',size=10)
    ProfCountry["font"] = ft
    ProfCountry["fg"] = "#333333"
    ProfCountry["justify"] = "left"
    ProfCountry["text"] = "Country:"+ DisplayCountry
    ProfCountry.place(x=160,y=190,width=235,height=30)

    ProfSecure=tk.Label(profilegui)
    ProfSecure["anchor"] = "n"
    ft = tkFont.Font(family='Times',size=24)
    ProfSecure["font"] = ft
    ProfSecure["fg"] = "#333333"
    ProfSecure["justify"] = "center"
    ProfSecure["text"] = "Confidential information"
    ProfSecure["relief"] = "flat"
    ProfSecure.place(x=0,y=240,width=399,height=93)

    USA=tk.Label(profilegui)
    ft = tkFont.Font(family='Times',size=98)
    USA["font"] = ft
    USA["fg"] = "#333333"
    USA["justify"] = "center"
    USA["text"] = "🦅"
    USA.place(x=90,y=300,width=209,height=180)
    

    profilegui.mainloop()


def profbacko():
    profilegui.destroy()
    appmenue()


def gamesmenue():
    global games
    games = Tk()
    games.title("Pentagon Hacker")
    width=400
    height=500
    screenwidth = games.winfo_screenwidth()
    screenheight = games.winfo_screenheight()
    alignstr = '%dx%d+%d+%d' % (width, height, (screenwidth - width) / 2, (screenheight - height) / 2)
    games.geometry(alignstr)
    games.resizable(width=False, height=False)

    PenLabel=tk.Label(games)
    PenLabel["anchor"] = "center"
    PenLabel["bg"] = "#000000"
    PenLabel["cursor"] = "arrow"
    ft = tkFont.Font(family='Times',size=28)
    PenLabel["font"] = ft
    PenLabel["fg"] = "#20cf20"
    PenLabel["justify"] = "center"
    PenLabel["text"] = "Games To Hack Pentagon"
    PenLabel["relief"] = "sunken"
    PenLabel.place(x=0,y=0,width=401,height=76)

    LandGym=tk.Button(games)
    LandGym["anchor"] = "center"
    LandGym["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=12)
    LandGym["font"] = ft
    LandGym["fg"] = "#000000"
    LandGym["justify"] = "center"
    LandGym["text"] = "Landovskis GYM"
    LandGym.place(x=10,y=140,width=120,height=40)
    LandGym["command"] = GymGetData

    FQuizz=tk.Button(games)
    FQuizz["anchor"] = "center"
    FQuizz["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=18)
    FQuizz["font"] = ft
    FQuizz["fg"] = "#000000"
    FQuizz["justify"] = "center"
    FQuizz["text"] = "Flag quizz"
    FQuizz.place(x=140,y=140,width=120,height=40)
    FQuizz["command"] = FQuiz

    BombPent=tk.Button(games)
    BombPent["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=10)
    BombPent["font"] = ft
    BombPent["fg"] = "#000000"
    BombPent["justify"] = "center"
    BombPent["text"] = "Bomb the Pentagon"
    BombPent.place(x=270,y=140,width=120,height=40)
    BombPent["command"] = BombPentagon

    BackButton=tk.Button(games)
    BackButton["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=10)
    BackButton["font"] = ft
    BackButton["fg"] = "#000000"
    BackButton["justify"] = "center"
    BackButton["text"] = "Back"
    BackButton.place(x=320,y=460,width=70,height=25)
    BackButton["command"] = BackButtono

    PentagonGame=tk.Button(games)
    PentagonGame["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=10)
    PentagonGame["font"] = ft
    PentagonGame["fg"] = "#000000"
    PentagonGame["justify"] = "center"
    PentagonGame["text"] = "..."
    PentagonGame.place(x=10,y=200,width=120,height=40)
    PentagonGame["command"] = None


def secretbutoask():
    msg_box = tk.messagebox.askquestion('PLEASE DO NOT DO THIS!!!!1!!!!!1!111!!', 'Are you sure about your decision?',
                                        icon='warning')
    if msg_box == 'yes':
        secretbuto()
    else:
        tk.messagebox.showinfo('Excellent', 'You made the right choice!')

def secretbuto():
    menue.destroy()
    root = Tk()
     
    label = Label(root, text='Locker by Pentagon', font='Courier 8',bg='black',fg='red')
    label.place(relx=.5, rely=.94, anchor="center")
     
    label = Label(root, text='You Tried to Hack Pentagon', font='Courier 30',bg='black',fg='red')
    label.place(relx=.5, rely=.4, anchor="center")
     
    entry = Entry(root, font='Courier 16')
    entry.place(relx=.5, rely=.5, anchor="center", width=380, height=40)
    entry.focus()
    def place_msg():
        playsound('C:/Windows/Media/ringout.wav')
        x = random.randint(10, pyautogui.size().width)
        y = random.randint(10, pyautogui.size().height)
        msg = tk.Label(root, text='🦅 Device blocked by the US Department of Defense 🦅',bg='black',fg='red', font=('Arial',15))
        msg.place(x=x,y=y)
        root.after(1000, place_msg)
    root.after(1000, place_msg)
    
    root.protocol('WM_DELETE_WINDOW', lambda: None)
    root.attributes('-fullscreen', True)
    root.config(cursor="none", bg='black')
    pyautogui.FAILSAFE = False
     
    while True:
        pyautogui.moveTo(0, 0)
        root.update()
        if entry.get() == 'Free':
            sys.exit()

def logoutbuto():
    menue.destroy()
    Registrationform()

def menueback():
    menue.destroy()
    Registrationform()

#####App menu###################################################################################################################
def appmenue():
    global menue
    menue = Tk()
    menue.title("Pentagon Hacker")
    menue.geometry("400x500")
    menue.resizable(False, False)

    img_url = "https://i.imgur.com/LUOG4Zm.png"
    response = requests.get(img_url)
    img_data = response.content
    img = ImageTk.PhotoImage(Image.open(BytesIO(img_data)))
    panel = tk.Label(menue, image=img)
    panel.pack(side="bottom", fill="both", expand="yes")
    
    PenLabel=tk.Label(menue)
    PenLabel["anchor"] = "center"
    PenLabel["bg"] = "#000000"
    PenLabel["cursor"] = "arrow"
    ft = tkFont.Font(family='Times',size=28)
    PenLabel["font"] = ft
    PenLabel["fg"] = "#20cf20"
    PenLabel["justify"] = "center"
    PenLabel["text"] = "Pentagon Hacker 3000"
    PenLabel["relief"] = "sunken"
    PenLabel.place(x=0,y=0,width=401,height=76)

    WelLabel=tk.Label(menue)
    WelLabel["anchor"] = "w"
    ft = tkFont.Font(family='Times',size=28)
    WelLabel["font"] = ft
    WelLabel["fg"] = "#333333"
    WelLabel["justify"] = "left"
    WelLabel["text"] = "Welcome, " + DisplayUser
    WelLabel.place(x=10,y=90,width=391,height=66)

    profilebut=tk.Button(menue)
    profilebut["anchor"] = "center"
    profilebut["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=23)
    profilebut["font"] = ft
    profilebut["fg"] = "#000000"
    profilebut["justify"] = "center"
    profilebut["text"] = "Profile"
    profilebut.place(x=10,y=160,width=120,height=40)
    profilebut["command"] = profile

    appbut=tk.Button(menue)
    appbut["anchor"] = "center"
    appbut["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=23)
    appbut["font"] = ft
    appbut["fg"] = "#000000"
    appbut["justify"] = "center"
    appbut["text"] = "Apps"
    appbut.place(x=10,y=240,width=120,height=40)
    appbut["command"] = change1

    gamesbut=tk.Button(menue)
    gamesbut["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=23)
    gamesbut["font"] = ft
    gamesbut["fg"] = "#000000"
    gamesbut["justify"] = "center"
    gamesbut["text"] = "Games "
    gamesbut.place(x=10,y=300,width=120,height=40)
    gamesbut["command"] = change2

    logoutbut=tk.Button(menue)
    logoutbut["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=10)
    logoutbut["font"] = ft
    logoutbut["fg"] = "#000000"
    logoutbut["justify"] = "center"
    logoutbut["text"] = "Log out"
    logoutbut.place(x=320,y=460,width=70,height=25)
    logoutbut["command"] = logoutbuto

    secretbut=tk.Button(menue)
    secretbut["bg"] = "#f0f0f0"
    ft = tkFont.Font(family='Times',size=13)
    secretbut["font"] = ft
    secretbut["fg"] = "#000000"
    secretbut["justify"] = "center"
    secretbut["text"] = "D̴̢̝͖͒͒̕O̷̼̽Ǹ̵̡͇̩̠̪͚͘͠'̴̡̛̥͋T̷͇̖̗͈͒̄̎̈ ̸̣͖̫̓T̴̨̐̾̎͗̂͐O̶̢̞̬̘͂̾͘̚Ụ̵̧̤̻̼̅͐̐͑C̷̡̺̗̹̜̃̀́͠͝͝H̷͕̤̰̙͒̀̎̈́̈́"
    secretbut.place(x=10,y=360,width=120,height=40)
    secretbut["command"] = secretbutoask
    
def BackButtono():
    games.destroy()
    appmenue()

#####Get user data from Data Base###########################################################################################################
def getdata():
    sql.execute(f"SELECT * FROM users WHERE usermail = '{checkmail}'")
    record = sql.fetchall()
    global DisplayUser, DisplayPass, DisplayMail, DisplayGender, DisplayCountry
    for dat in record:
        DisplayUser = dat[0]
        DisplayPass = dat[1]
        DisplayMail = dat[2]
        DisplayGender = dat[3]
        DisplayCountry = dat[4]
    login_screen.destroy()
    appmenue()
    
    
#####The process of storing data in a database#################################################################################################
def submit_profiles():
    sql.execute(f"SELECT usermail, username FROM users WHERE usermail = '{email1}' or username = '{name1}'")
    ssql.execute(f"SELECT usermail, Skill, Rank FROM stats WHERE usermail = '{email1}' and Skill = '{Skill1}' and Rank = '{Rank1}'")
    if sql.fetchone() is None:
        sql.execute(f"INSERT INTO users VALUES ('{name1}', '{password1}', '{email1}', '{gen1}', '{Country1}')")
        ssql.execute(f"INSERT INTO stats VALUES('{email1}', '{0}', '{Rank1}', '{Skill1}')")
        sdb.commit()
        db.commit()
        #for value in sql.execute("SELECT * FROM users"):
            #print(value)
        showinfo(title="Success", message="You have completed registration!")
        loginform()
    else:
        showerror(title="Error", message="This user already exists")
        #for value in sql.execute("SELECT * FROM users"):
            #print(value)

#####Login process###########################################################################################################################################
def sign_in():
    global checkmail
    checkmail = enter_email.get()
    checkpass = enter_password.get()
    
    sql.execute(f"SELECT usermail, userpassword FROM users WHERE usermail = '{checkmail}' and userpassword = '{checkpass}'")
    if sql.fetchone() is None:
        showerror(title="Error", message="Wrong password or email or account does not exist at all")
        #for value in sql.execute("SELECT * FROM users"):
            #print(value)
    else:
        showinfo(title="Success", message="You have successfully logged in")
        getdata()

#####Registration process######################################################################################################################
def register():
    global Rank1, Skill1
    Rank1=StringVar()
    Rank1 = ('Programmer')
    Skill1 = 1
    
    global email1
    global password1
    global name1
    global gen1
    global Country1
    name1=name.get()
    password1=password.get()
    repassword1=repassword.get()
    email1=email.get()
    gen1=gender.get()
    Country1=Country.get()
    
    if name1=='' or password1==''or email1=='' or gen1==''or Country1=='':
        showerror(title="Error", message="Fill in each field!")
    else:
        allowed_characters=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','1','2','3','4','5','6','7','8','9','0']
        mallowed_characters=['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','1','2','3','4','5','6','7','8','9','0','@','.']
        if any(x not in allowed_characters for x in password1):
            showerror(title="Error", message="Error: invalid character!")
        if any(x not in mallowed_characters for x in email1):
            showerror(title="Error", message="Incorrect mail!")
        else:
            if password1==repassword1:
                submit_profiles()      
            else:
                showerror(title="Error", message="Passwords do not match!")
            
#####Button BACK from login screen to registration screen###############################################################################################
def ltorback():
    
    login_screen.destroy()
    Registrationform()

#####Login screen#################################################################################################################################
def loginform():
    reg_screen.destroy()
    global login_screen
    login_screen = Tk()
    login_screen.title("Not a Pentagon Hacker")
    login_screen.geometry("350x200")
    login_screen.resizable(False, False)
    
    global enter_email
    global enter_password
    enter_email = StringVar()
    enter_password = StringVar()
    
    Label(login_screen,width="300", text="Please login to continue", bg="orange",fg="white").pack()
    Label(login_screen, text="Email * ",).place(x=40, y=70)
    Entry(login_screen, textvariable=enter_email).place(x=120, y=72)
    Label(login_screen, text="Password * ").place(x=40,y=110)
    Entry(login_screen, textvariable=enter_password, show='*').place(x=120,y=112)
    Button(login_screen, text="Login", width=10, height=1, bg="orange",command=sign_in).place(x=130,y=145)
    Button(login_screen, text="Back", width=10, height=1, bg="orange",command=ltorback).place(x=260,y=170)
    
    login_screen.mainloop()

#####Registration screen#######################################################################################################################
def Registrationform():
    global reg_screen
    reg_screen = Tk()
    reg_screen.title("Not a Pentagon Hacker")
    reg_screen.geometry("350x400")
    reg_screen.resizable(False, False)
    
    

    global name
    global password
    global repassword
    global email
    global gender
    global Country

    name = StringVar()
    password = StringVar()
    repassword = StringVar()
    email=StringVar()
    gender=IntVar()
    Country=StringVar()   
            
    Label(reg_screen,width="300", text="Please enter details below", bg="orange",fg="white").pack()
    Label(reg_screen, text="Name * ").place(x=20,y=40)
    Entry(reg_screen, textvariable=name).place(x=140,y=42)
    Label(reg_screen, text="Password * ").place(x=20,y=80)
    password = Entry(reg_screen, textvariable=password, show='*')
    password.place(x=140,y=82)
    Label(reg_screen, text="Re-enter Password * ").place(x=20,y=120)
    repassword = Entry(reg_screen, textvariable=repassword, show='*')
    repassword.place(x=140,y=122)  
    Label(reg_screen, text="Email * ").place(x=20, y=160)
    Entry(reg_screen, textvariable=email).place(x=140, y=162)
    Label(reg_screen, text="Gender * ").place(x=20, y=200)
    Radiobutton(reg_screen,text="Male",variable=gender,value=1).place(x=80,y=202)
    Radiobutton(reg_screen, text="Female", variable=gender, value=2).place(x=140, y=202)
    Radiobutton(reg_screen, text="Arsenijs", variable=gender, value=3).place(x=202, y=202)
    Radiobutton(reg_screen, text="Hacker", variable=gender, value=4).place(x=268, y=202)

    Label(reg_screen, text="Select Country * ").place(x=20, y=240)
    monthchoosen = ttk.Combobox(reg_screen, width=27, textvariable=Country, state = "readonly")
    monthchoosen['values'] = (' Latvia',
                              ' Lithuania',
                              ' Estonia',
                              ' Russia',
                              ' Ukraine',
                              ' Belarus',
                              ' Poland',
                              ' Serbia',
                              ' Kosovo',
                              ' VigLand')
    monthchoosen.current()
    monthchoosen.place(x=110,y=242)

   
    Button(reg_screen, text="Login", width=10, height=1, bg="orange",command=loginform).place(x=130,y=340)
    Button(reg_screen, text="Submit", width=10, height=1, bg="orange",command=register).place(x=130,y=310)
    #####Button SHOW passwords#####
    ButtonInt=IntVar(value=0)
    def my_show():
        if(ButtonInt.get()==1):
            password.config(show='')
            repassword.config(show='')
        else:
            password.config(show='*')
            repassword.config(show='*')
    Buttonite = Checkbutton(reg_screen, text='Show',variable=ButtonInt,onvalue=1,offvalue=0,command=my_show)
    Buttonite.place(x=270,y=120)
    reg_screen.mainloop()


Registrationform()
