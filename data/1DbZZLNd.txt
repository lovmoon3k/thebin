sub token-alighnment-chk($l , $s)
{
    loop (my $t = 0 ; $t <= 13 ; $t++)
    {
        if ($l[$t] ne $s[$t])
        {
        print("misaligned tokens, starting over again...\n");
        $l = (Empty);
        }
        else
        {
        return $l[$t];
        }
    }
}

    sub valid-token-chk($tok, $toknum) returns Bool
    {
        if ($toknum ~~ (0..1))
        {
            if ($tok !%% 1)
            {
            print("token: ", $tok, " must be an intager value.\n");
            return False;
            }
        }
        elsif ($toknum ~~ (2..13))
        {
            if (Str($tok) == False)
            {
            print("token: ", $tok, " must be a string value.\n");
            return False;
            }
        }
        else
        {
        print("the token number is not valid (must be an integer between 0 and 13).\n");
        return False;
        }
        return True;
    }

    my $line = ('1','0','0.0','0','0','1','0','0','0','1','0','0','0','3024.dat');
    my $spec = ('%d','%d','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s','%s');
    my $format;
    my $token;

    loop ($token = 0 ; $token <= 13 ; $token++)
    {
     $format[$token] = sprintf($spec[$token], $line[$token]);
    }

print($format, "\n");
                #$tok , #$toknum
    valid-token-chk(0 , 0);     #this works
    valid-token-chk(0.0 , 0);   #should fail
    valid-token-chk(0 , 0.0);   #should fail
    valid-token-chk(2 , 0.0);   #should fail
    valid-token-chk(0.0 , 2);   #this works
    valid-token-chk('0' , 2);   #should work
    valid-token-chk('0.0' , 2); #should work