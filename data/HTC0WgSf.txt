#include <bits/stdc++.h>
// tiom4eg's precompiler options
// POGGERS POGGERS POGGERS POGGERS POGGERS POGGERS POGGERS
// IO settings
#define fastIO ios_base::sync_with_stdio(false); cin.tie(0)
// Quick types
#define ll long long
#define ld long double
#define ull unsigned long long
#define pii pair <int, int>
#define vi vector <int>
#define mi vector <vector <int>>
// Quick functions
#define endl "\n"
#define F first
#define S second
#define all(a) a.begin(), a.end()
#define sz(a) (int)(a.size())
#define pb push_back
#define mp make_pair
// Quick fors
#define FOR(i, a, b) for (int i = a; i < b; ++i)
#define FORS(i, a, b, c) for (int i = a; i < b; i += c)
#define RFOR(i, a, b) for (int i = a; i >= b; --i)
#define EACH(e, a) for (auto& e : a)
// Pragmas
#ifndef TIOM4EG
#pragma GCC optimize("O3,unroll-loops") // let the chaos begin!
#pragma GCC target("avx,bmi,tune=native")
//#pragma GCC comment(linker, "/stack:200000000")
#endif
// PBDS
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ordered_set tree <int, null_type, less <int>, rb_tree_tag, tree_order_statistics_node_update>
#define ook order_of_key
#define fbo find_by_order
using namespace __gnu_pbds;
// POGGERS POGGERS POGGERS POGGERS POGGERS POGGERS POGGERS
using namespace std;
mt19937 rng(chrono::duration_cast<chrono::milliseconds>(chrono::system_clock::now().time_since_epoch()).count());
//#define int long long
const int INF = 1e9 + 100007, INFLL = 2e18 + 7, MAX = 200160, MD = 998244353, LG = 18, B = 8192, R = 1 << 18;

struct segtree {
    struct node { int mn, d; };
    vector <node> t;
    void merge(int v) { t[v].mn = min(t[2 * v].mn, t[2 * v + 1].mn); }
    void tag(int v, int x) { t[v].mn += x, t[v].d += x; }
    void push(int v) {
        if (v >= R || !t[v].d) return;
        tag(2 * v, t[v].d), tag(2 * v + 1, t[v].d);
        t[v].d = 0;
    }
    void build() { t.assign(2 * R, {INF, 0}); }
    void zero(int p, int v = 1, int nl = 0, int nr = R) {
        push(v);
        if (p < nl || nr <= p) return;
        if (nl + 1 == nr) {
            t[v].mn = 0;
            return;
        }
        int nm = (nl + nr) / 2;
        zero(p, 2 * v, nl, nm), zero(p, 2 * v + 1, nm, nr);
        merge(v);
    }
    void upd(int x) { t[1].d += x, push(1); }
    pii get(int v = 1, int nl = 0, int nr = R) {
        push(v);
        if (nl + 1 == nr) return {t[v].mn, nl};
        int nm = (nl + nr) / 2;
        if (t[2 * v].mn < 0) return get(2 * v, nl, nm);
        else return get(2 * v + 1, nm, nr);
    }
} t;

int a[MAX];
pii up[MAX][LG];

signed main() {
    fastIO;
    int n; cin >> n;
    vector <pii> bl;
    bl.pb({-1, -1});
    FOR(i, 0, n) {
        cin >> a[i];
        if (a[i] != bl.back().F) bl.pb({a[i], i});
        else ++bl.back().S;
    }
    int m = sz(bl);
    t.build();
    RFOR(i, m - 2, 1) {
        t.zero(i), t.upd((bl[i + 1].F - bl[i].F) - (bl[i + 1].S - bl[i].S));
        pii cur = t.get();
        if (cur.F < 0) up[i][0] = {cur.S + 1, -cur.F};
    }

    FOR(k, 1, LG) FOR(i, 1, m - 1) if (up[i][k - 1].F && up[up[i][k - 1].F][k - 1].F) up[i][k] = make_pair(up[up[i][k - 1].F][k - 1].F, up[i][k - 1].S + up[up[i][k - 1].F][k - 1].S);
    int q; cin >> q;
    while (q--) {
        int l, r; cin >> l >> r, --l, --r;
        if (a[l] == a[r]) {
            cout << 0 << endl;
            continue;
        }
        int lp = lower_bound(all(bl), make_pair(a[l], l)) - bl.begin(), rp = lower_bound(all(bl), make_pair(a[r], r)) - bl.begin();
        int ans = a[r] - a[l] + bl[lp].S - l;
        RFOR(i, LG - 1, 0) if (up[lp][i].F && up[lp][i].F < rp) ans += up[lp][i].S, lp = up[lp][i].F;
        cout << ans << endl;
    }
}
