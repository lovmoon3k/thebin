//TO USE, PASTE INTO CONSOLE (CTRL+SHIFT+J FOR LINUX & WIN OR CMD+OPT+J FOR MAC)

var applet = document.getElementById('maingame');

//range of the starting point of the oligo, the length of the oligo
var oligolen = applet.get_full_sequence(0).indexOf("&");
var startingpos = parseInt(prompt("starting position")) - 1 - oligolen;
var endpos = parseInt(prompt("ending position")) - 1 -oligolen;
var oligos = [];
var bindingoligos = [];

//get sequence
var sequence = applet.get_full_sequence(0);
//the non-oligo part
if (sequence.indexOf("&") != -1)
  	sequence = sequence.substring(sequence.indexOf("&") + 1, sequence.length);

//
if (endpos + oligolen > sequence.length)
  if (startingpos >= oligolen){
  	startingpos = sequence.length - oligolen - (endpos - startingpos) - 1;
    endpos = sequence.length - oligolen - 1;
  }
  else {
    endpos = sequence.length - oligolen - 1;
  }
//dictionary that makes the best pair (strongest)
const pairs = {A:"U", U:"A", C:"G", G:"C"}

//make sequence
for (var i=startingpos; i <= endpos; i++){
  	global_timer = new Date();
	var oligo = "";
  	var temp = oligo;
    for (var j=i; j < i+oligolen; j++){
      	temp = oligo
    	oligo = temp + pairs[sequence[j]];
    }
  	//reverse string
  	oligo = oligo.split('').reverse().join('');
  	oligos.push(oligo);
}

//alert(oligos);

//prunes to get only the binding oligos
for (var i=0; i<oligos.length; i++){
	applet.set_sequence_string(oligos[i]);
	global_timer = new Date();
  	var bindinglocations = [];
  	var structure = applet.get_full_structure(0);
  	var oligoopenparen = 0
    if (structure.substring(0, structure.indexOf("&")).match(/\(/g) != null)
    	oligoopenparen += structure.substring(0, structure.indexOf("&")).match(/\(/g).length;
    if (structure.substring(0, structure.indexOf("&")).match(/\)/g) != null)
  		oligoopenparen -= structure.substring(0, structure.indexOf("&")).match(/\)/g).length;
    
  	if (oligoopenparen == 0)
      	continue;
  	var prevmin = oligoopenparen;
  	//find nucleotides that it binds to
  	for (var j=structure.indexOf("&"); j<structure.length; j++){
  		if (structure[j] == "\)")
          oligoopenparen -= 1
        if (structure[j] == "\(")
          oligoopenparen += 1
        if (oligoopenparen < prevmin){
          prevmin = oligoopenparen;
          bindinglocations.push(j + 1)
        }
  	}
  	for (var j=0; j<bindinglocations.length; j++){
  		bindinglocations[j] = bindinglocations[j].toString();
  	}
  //prune if it doesn't bind correctly, because it can bind to other sequences
  if (!(startingpos + 1<= bindinglocations[0] - (startingpos - endpos) <= endpos + 1))
  	continue;
  bindingoligos.push([oligos[i], bindinglocations]);
}
applet.set_sequence_string("A".repeat(oligolen))

alert("output in console")

for (var i = 0; i<bindingoligos.length; i++){
  console.log('sequence: ' + bindingoligos[i][0] + '. binds to following nts:' + bindingoligos[i][1].join());
}