#include <stdio.h>
#include <ctype.h>
#include <stdlib.h>
#include <string.h>
#define inc1 10 
#define inc2 50

int scan_sentence(char** str)
{
	int str_size = inc2;
	int i = 0;
	char symb;
	*str = malloc(str_size * sizeof(char));
	while ((symb = getchar()) != '.')
	{
		if (symb == '\n')
		{
			free(*str);
			return -1;
		}
		if (i == 0 && symb == ' ')
		{
			continue;
		}
		(*str)[i] = symb;
		if (i == str_size - 1)
		{
			str_size += inc2;
			(*str) = realloc((*str), str_size * sizeof(char));
		}
		i++;
	}
	if (str_size - i <= 1)
	{
		str_size += inc2;
		(*str) = realloc((*str), str_size * sizeof(char));
	}
	(*str)[i] = '.';
	(*str)[i + 1] = '\0';
	return 1;
}

int scan_text(char*** text)
{
	int text_size = inc1;
	int num = 0;
	*text = malloc(text_size * sizeof(char*));
	while (scan_sentence(*text + num) != -1)
	{
		if (num == text_size - 1)
		{
			text_size += inc1;
			(*text) = realloc((*text), text_size * sizeof(char*));
		}
		num++;
	}
	return num;
}

void delete_null_sentences(char*** text, int* text_size)
{
	for (int i = 0; i < *text_size; i++)
	{
		if ((*text)[i] == NULL)
		{
			memmove((*text + i), (*text + i + 1), ((*text_size - i) * sizeof(char*)));
			i--;
			(*text_size)--;
		}
	}
}

void delete_same_sentences(char*** text, int* text_size)
{
	char* snt1;
	char* snt2;
	for (int i = 0; i < *text_size; i++)
	{
		for (int j = i + 1; j < *text_size; j++)
		{
			snt1 = (*text)[i];
			snt2 = (*text)[j];
			if (snt1 != NULL && snt2 != NULL)
			{
				if (strcasecmp(snt1, snt2) == 0)
				{
					free((*text)[j]);
					(*text)[j] = NULL;
				}
			}
		}
	}
	delete_null_sentences(text, text_size);
}

void print_text(char** text, int text_size)
{
	for (int i = 0; i < text_size; i++)
	{
		printf("%s", text[i]);
	}
}

void free_text(char** text, int text_size)
{
	for (int i = 0; i < text_size; i++)
	{
		free(text[i]);
	}
	free(text);
}

char** delete_dollar(char** text, int* text_size) {
    int first_snt = -1,last_snt = -1,first_smb = -1, last_smb = -1;
    int first = 1;
    for(int i = 0; i < *text_size; i++) {
        for(int j = 0; j < strlen(text[i]); j++) {
            if(text[i][j]=='$') {
                if(first==1) {
                    first_snt = i;
                    first_smb = j;
                    first = 0;
                }
                last_snt = i;
                last_smb = j;
            }
        }
    }
    if(first==1) {
        return text;
    } 
    char **new_text = malloc(*text_size*sizeof(char*));
    char* snt;
    int k = 0;
	int t = 0;
    if(first_snt == last_snt && first_smb == last_smb) {
        snt = malloc(strlen(text[first_snt]+1)*sizeof(char));
        for(int j = 0; j < strlen(text[first_snt]);j++) {
            if(j!=first_smb) {
                snt[k] = text[first_snt][j];
				k++;
            }
        }
		snt[strlen(snt)] = '\0';
		new_text[first_snt] = snt;
		t = *text_size;
    } else {
		for(int i = first_snt; i <= last_snt; i++) {
			snt = malloc(strlen(text[i]+1)*sizeof(char));
			k = 0;
			if(first_snt == last_snt) {
				for(int j = first_smb; j<= last_smb; j++) {
					snt[k] = text[i][j];
					k++;
				}
			} else if(i==first_snt) {
				for(int j = first_smb; j < strlen(text[i]); j++) {
					snt[k] = text[i][j];
					k++;
				}
			} else if(i==last_snt) {
				for(int j = 0; j <= last_smb; j++) {
					snt[k] = text[i][j];
					k++;
				}
			} else {
				for(int j = 0; j < strlen(text[i]); j++) {
					snt[k] = text[i][j];
					k++;
				}
			}
			snt[strlen(snt)] = '\0';
			new_text[t] = snt;
			t++;
		}
	}
	*text_size = t;
	return new_text;
}

int is_separator(char symbol) {
	if(symbol == ' ' || symbol == ',') {
		return 1;
	}
	return 0;
}

int cmp_word_count(const void* a, const void* b) {
	const char** a1 = (const char**)a;
	const char** b1 = (const char**)b;
	int count_a = 1;
	int count_b = 1;
	for(int i = 0; i < strlen(*a1); i++) {
		if(is_separator((*a1)[i])==1) {
			count_a++;
		}
	}
	for(int i = 0; i < strlen(*b1); i++) {
		if(is_separator((*b1)[i])==1) {
			count_b++;
		}
	}
	if(count_a<count_b) {
		return 1;
	}
	if(count_a>count_b) {
		return -1;
	}
	return 0;
}

char** sort_word_count(char** text, int text_size) {
	qsort(text,text_size,sizeof(char*),cmp_word_count);
	return text;
}	

void print_every_symbol(char** text, int text_size) {
	int size = 0;
	for(int i = 0; i < text_size; i++) {
		size += strlen(text[i]);
	}
	char* symbols = malloc(size*sizeof(char));
	int k = 0;
	for(int i = 0; i < text_size; i++) {
		for(int j = 0; j < strlen(text[i]); j++) {
			if(is_separator(text[i][j])==0) {
				symbols[k] = text[i][j];
				k++;
			}
		}
	}
	int count;
	int st_len = strlen(symbols);
	for(int i = 0; i < st_len; i++) {
		count = 1;
		if(symbols[i]!='\0') {
			for(int j = i+1; j < st_len; j++) {
				if(symbols[j]!='\0' && symbols[j]==symbols[i]) {
					count++;
					symbols[j] = '\0';
				}
			}
			printf("symb = %c ; count = %d\n",symbols[i],count);
		}
	}
}

char** delete_even_sentences(char** text, int* text_size) {
	char** new_text = malloc(*text_size*sizeof(char*));
	int k = 0;
	for(int i = 0; i < *text_size; i++) {
		if(i%2==0) {
			new_text[k] = text[i];
			k++;
		}
	}
	*text_size = k;
	return new_text;
}

int main()
{
	int text_size;
	int str_size;
	char** text;
	puts("Введите текст:");
	text_size = scan_text(&text);
	puts("Одинаковые предложения удалены:");
	delete_same_sentences(&text, &text_size);
	print_text(text, text_size);
	printf("\n");
    printf("Для обработки доступны следующие опции:\n"\
    "1) Удалить все символы до первого $ и после последнего $ (если в тексте всего 1 $, то удаляется этот символ).\n"\
    "2) Отсортировать предложения по уменьшению количества слов в предложении.\n"\
    "3) Вывести все символы текста и их количество(не учитывая разделители).\n"\
    "4) Удалить все предложения с чётным индексом.\n"\
    "5) Вывести текст.\n");
	int menu;
	scanf("%d", &menu);
	char symb = getchar();
	switch (menu)
	{
	case 1:
		text = delete_dollar(text,&text_size);
		print_text(text,text_size);
		break;
	case 2:
		text = sort_word_count(text,text_size);
		print_text(text,text_size);
		break;
	case 3:
		print_every_symbol(text,text_size);
		break;
	case 4:
		text = delete_even_sentences(text,&text_size);
		print_text(text,text_size);
		break;
	case 5:
		print_text(text,text_size);
		break;
	default:
		puts("Такой опции не существует.");
	}
	free_text(text, text_size);
	printf("\n");
	return 0;
}