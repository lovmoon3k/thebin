#include <iostream>
#include <format>
#include <string>
#include <map>

class Fibonacci {
private:
	std::map<uint16_t, uint64_t> m_results;
public:
	Fibonacci() {
		m_results.insert({ 0, 1 });
		m_results.insert({ 1, 1 });
	}
	uint64_t calculate(uint16_t index) {
		std::cout << "Call calculate for index => " << index << std::endl;
		if (m_results.contains(index))
			return m_results.at(index);

		std::cout << "\tCache miss" << std::endl;

		auto result = calculate(index - 1) + calculate(index - 2);
		m_results[index] = result;//try delete ;=)
		return result;
	}
};

int main() {
	auto calculator = Fibonacci{};
	std::cout << std::format("Result => {}", calculator.calculate(25)) << std::endl;
}


