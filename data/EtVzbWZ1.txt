#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define Num_of_Digits(n) ((int)log10(n) + 1)
#define sz(x) int(x.size())
#define all(vec) vec.begin(), vec.end()
#define rall(vec) vec.rbegin(), vec.rend()
#define fixed(n) fixed << setprecision(n)
#define ll long long
#define ull unsigned long long
#define PI 3.14159
#define inf 2000000000
#define cin(v) for (auto&i:v) cin >> i;
#define cout(v) for (auto&i:v) cout << i << " "; cout << "\n";
#define cin_2d(vec, n, m) for(int i = 0; i < n; i++) for(int j = 0; j < m && cin >> vec[i][j]; j++);
//#define d double
#define ceil(w, m) (((w) / (m)) + ((w) % (m) ? 1 : 0)
#define Time cerr << "Time Taken: " << (float)clock() / CLOCKS_PER_SEC << " Secs" << "\n";
#define MOD 1000000007
#define multiOrderedSet tree <int, null_type, less_equal<int>, rb_tree_tag,tree_order_statistics_node_update>
#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>
using namespace std;
using namespace __gnu_pbds;
template <typename T = int> istream &operator>>(istream &in, vector<T> &v)
{
    for (auto &x : v)
        in >> x;
    return in;
}
template <typename T = int> ostream &operator<<(ostream &out, const vector<T> &v)
{
    for (const T &x : v)
        out << x << " ";
    return out;
}
void btats()
{
    ios_base::sync_with_stdio(false); cin.tie(nullptr); cout.tie(nullptr);
    #ifndef ONLINE_JUDGE
        freopen("input.txt", "r", stdin), freopen("output.txt", "w", stdout);
    #endif
    // freopen("input.txt", "r", stdin);
    // freopen("output.txt", "w", stdout);
}

int sz;
vector <int> v(sz);
vector <vector <int> > dp;


//  1 3 - 1 + 1
int max_food(int i , int c)
{
    if(i == sz)
        return c >= 0 ? 0 : -inf;
    if(c <= 0)
        return c == 0 ? 0 : -inf;
    
    int& ret = dp[i][c];
    if(~ret)
        return ret;
    
    ret = 0;
    ret = max_food(i + 1, c);
    //if(c >= v[i])
    ret = max(ret , 1 + max_food(i + 1, c - (v[i] * sz - i)));
    
    return ret;
}

void solve()
{
    int totalfood;
    cin >> sz >> totalfood; 
    v = vector <int> (sz);
    dp = vector <vector <int> > (sz, vector <int> (totalfood + 1, -1));
    cin >> v;
    cout << max_food(0, totalfood);
}

    

int main()
{
    btats();
    int test = 1;
    //cin >> test;
    while(test--)
    {
        solve();
        cout << "\n";
    }
    Time
}