#include <iostream>
#include <algorithm>
#include <unordered_set>

using namespace std;

struct TreeNode {
    int val; // Опциональное поле для хранения значения
    TreeNode* left;
    TreeNode* right;
};

void Node_Add(TreeNode*& p, int x);
void Node_Clear(TreeNode* p);
int  Node_Height(TreeNode* root); // why Node_Height(const Node*& root) // error?! // int  Node_Height(TreeNode*& root); // slow

int main() {

    TreeNode* tr = nullptr;
    int x;
    cin >> x;

    unordered_set <int> leaflets = { x };
    int size_leaflets = -1;
    while (x != 0) {
        // Если элемент уже существует в дереве, добавлять его не надо.
        if (leaflets.size() != size_leaflets) {
            size_leaflets = leaflets.size();
            Node_Add(tr, x);
        }

        cin >> x;
        leaflets.insert(x);
    }

    cout << Node_Height(tr);
   // Node_Clear(tr); // это точно нужно?

    return 0;
}

//вставка
void Node_Add(TreeNode*& p, int x) { // Node*& == auto и узнать тип auto
    if (p == nullptr) {
        p = new  TreeNode;
        if (p != nullptr) {
            p->left = p->right = nullptr;
            p->val = x;
        }
    }
    else if (x < p->val)
        Node_Add(p->left, x);
    else
        Node_Add(p->right, x);
}

//удаление всех элементов
void Node_Clear(TreeNode* p) {
    if (p != nullptr) {
        if (p->left != nullptr) {
            Node_Clear(p->left);
        }
        if (p->right != nullptr) {
            Node_Clear(p->right);
        }
        delete p;
    }
}

//высота дерева
int  Node_Height(TreeNode* root) { // int  Node_Height(TreeNode*& root) {
    if (!root) { return 0; }
    int max_height_left = Node_Height(root->left);
    int max_height_right = Node_Height(root->right);
    return  max(max_height_left, max_height_right) + 1;

}