海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥奇妙工具箱-2022年8月推荐@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"gmtModified\":0,\"id\":0,\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"pic\",\"path\":\"pic\",\"rule\":\"js:\\nvar d = [];\\nlet x = getItem(\\\"x\\\", \\\"否\\\");\\nlet desc = x == \\\"是\\\" ? \\\"float&&300\\\" : \\\"float&&1\\\";\\nd.push({\\n    col_type: \\\"x5_webview_single\\\",\\n    url: \\\"\\\",\\n    desc: desc,\\n    title: \\\"\\\",\\n    extra: {\\n        js: $.toString(() => {\\n            function getimgs() {\\n                var videoElements = document.getElementsByTagName(\\\"img\\\");\\n                if (videoElements == null) {\\n                    return [];\\n                }\\n                let urls = [];\\n                for (let i = 0; i < videoElements.length; i++) {\\n                    if (videoElements[i].width > 70 && videoElements[i].height > 70) {\\n                        const src = videoElements[i].src;\\n                        if (src == null || src.length < 5 || urls.includes(src) || src.indexOf(\\\"data:\\\") == 0) {\\n                            continue;\\n                        }\\n                        //log(src);\\n                        urls.push(new URL(src).toString());\\n                    }\\n                }\\n                return urls;\\n            }\\n\\n            function check() {\\n                try {\\n                    let urls = getimgs();\\n                    //fba.log(\\\"getimgs：\\\" + urls.length);\\n                    if (window.checkedUrls == null) {\\n                        window.checkedUrls = [];\\n                    }\\n                    let checkedUrls = window.checkedUrls;\\n                    urls = urls.filter(it => {\\n                        return !checkedUrls.includes(it)\\n                    });\\n\\n                    if (urls.length > 0) {\\n                        let pics = urls.filter(it => it != null && it != \\\"\\\")\\n                            .map(it => {\\n                                let u = fba.getHeaderUrl(it);\\n                                let uu = u.split(\\\";\\\");\\n                                let pic = u;\\n                                if (uu.length > 1) {\\n                                    let u1 = uu[0];\\n                                    let u2 = uu[1].slice(1, -1).split(\\\"&&\\\");\\n                                    let referer = null;\\n                                    let ua = null;\\n                                    let cookie0 = null;\\n                                    for (let ii of u2) {\\n                                        let it2 = ii.split(\\\"@\\\");\\n                                        if (it2[0] == \\\"Referer\\\") {\\n                                            referer = it2[1].replace(/；；/g, \\\";\\\");\\n                                        }\\n                                        if (it2[0] == \\\"User-Agent\\\") {\\n                                            ua = it2[1].replace(/；；/g, \\\";\\\");\\n                                        }\\n                                        if (it2[0] == \\\"Cookie\\\") {\\n                                            cookie0 = it2[1].replace(/；；/g, \\\";\\\");\\n                                        }\\n                                    }\\n                                    pic = u1;\\n                                    if (referer) {\\n                                        pic = pic + \\\"@Referer=\\\" + referer;\\n                                    }\\n                                    if (ua) {\\n                                        pic = pic + \\\"@User-Agent=\\\" + ua;\\n                                    }\\n                                    if (cookie0) {\\n                                        pic = pic + \\\"@Cookie=\\\" + cookie0\\n                                    }\\n\\n                                } else {\\n                                    pic = it;\\n                                }\\n                                return {\\n                                    pic: pic,\\n                                    url: u\\n                                }\\n                            });\\n                        fba.log(pics.length + \\\"\\\");\\n                        fba.parseLazyRuleAsync($$$().lazyRule((urls) => {\\n                            //log(urls);\\n\\n                            let arr = urls.map(it => {\\n                                return {\\n                                    title: \\\"\\\",\\n                                    url: it.pic,\\n                                    pic_url: it.pic,\\n                                    col_type: \\\"card_pic_3\\\",\\n                                    extra: {\\n                                        cls: \\\"pics\\\"\\n                                    }\\n                                }\\n                            });\\n                            addItemBefore(\\\"pic_line\\\", arr);\\n                        }, pics), function() {\\n\\n                        });\\n                        for (let it of urls) {\\n                            window.checkedUrls.push(it);\\n                        }\\n                    }\\n\\n                } catch (e) {\\n                    fba.log(e.toString());\\n                }\\n                setTimeout(check, 300);\\n            }\\n            check();\\n        })\\n    }\\n});\\n\\n\\nd.push({\\n    title: \\\"提取\\\",\\n    url: $.toString(() => {\\n        putMyVar(\\\"i\\\", input);\\n        deleteItemByCls(\\\"pics\\\");\\n        refreshX5WebView(input);\\n    }),\\n    col_type: \\\"input\\\",\\n    desc: \\\"请输入网页地址\\\",\\n    pic_url: \\\"\\\",\\n    extra: {\\n        defaultValue: getMyVar(\\\"i\\\", \\\"\\\")\\n    }\\n});\\nd.push({\\n    title: \\\"显示网页组件：\\\" + x,\\n    url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n        let x = getItem(\\\"x\\\", \\\"否\\\");\\n        let next = x == \\\"否\\\" ? \\\"是\\\" : \\\"否\\\";\\n        setItem(\\\"x\\\", next);\\n        let desc = x == \\\"否\\\" ? \\\"float&&300\\\" : \\\"float&&1\\\";\\n        updateItem(\\\"pic_tip\\\", {\\n            title: \\\"显示网页组件：\\\" + next\\n        });\\n        refreshX5Desc(desc);\\n        return \\\"hiker://empty\\\"\\n    }),\\n    col_type: \\\"text_1\\\",\\n    desc: \\\"\\\",\\n    pic_url: \\\"\\\",\\n    extra: {\\n        id: \\\"pic_tip\\\"\\n    }\\n});\\n\\nd.push({\\n    col_type: \\\"line_blank\\\",\\n    extra: {\\n        id: \\\"pic_line\\\"\\n    }\\n});\\n\\nsetResult(d);\"},{\"col_type\":\"text_1\",\"name\":\"epub\",\"path\":\"epub\",\"rule\":\"js:\\nvar d = [];\\nlet path = base64Decode(getParam(\\\"p\\\"));\\nlog(path);\\nlet meta = getEpubMetadata(path);\\n//setPageTitle(meta.firstTitle);\\nlet chapters = getEpubChapters(path);\\n//log(chapters);\\nfor (let it of chapters) {\\n    d.push({\\n        title: it.title,\\n        url: \\\"hiker://page/content#readTheme##autoPage#\\\",\\n        extra: {\\n            href: it.url,\\n            path: path\\n        }\\n    });\\n}\\nsetResult(d);\\n\"},{\"col_type\":\"rich_text\",\"name\":\"正文\",\"path\":\"content\",\"rule\":\"js:\\nvar d = [];\\nlet path = MY_PARAMS.path;\\nlet url = MY_PARAMS.href;\\nlet c = getEpubContent(path, url);\\nd.push({\\n    title: c,\\n    url: \\\"\\\",\\n});\\nsetResult(d);\"}],\"saved\":false,\"title\":\"奇妙工具箱\",\"version\":0,\"url\":\"hiker://empty\",\"col_type\":\"x5_webview_single\",\"find_rule\":\"js:setResult([{\\n    url:\\\"https://haikuoshijie.cn/archives/2022nian-8yue-tui-jian\\\",\\ndesc:\\\"100%&&float\\\",\\nextra:{canBack: true}\\n}]);\",\"group\":\"①推荐\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"pic\\\",\\\"path\\\":\\\"pic\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nlet x = getItem(\\\\\\\"x\\\\\\\", \\\\\\\"否\\\\\\\");\\\\nlet desc = x == \\\\\\\"是\\\\\\\" ? \\\\\\\"float&&300\\\\\\\" : \\\\\\\"float&&1\\\\\\\";\\\\nd.push({\\\\n    col_type: \\\\\\\"x5_webview_single\\\\\\\",\\\\n    url: \\\\\\\"\\\\\\\",\\\\n    desc: desc,\\\\n    title: \\\\\\\"\\\\\\\",\\\\n    extra: {\\\\n        js: $.toString(() => {\\\\n            function getimgs() {\\\\n                var videoElements = document.getElementsByTagName(\\\\\\\"img\\\\\\\");\\\\n                if (videoElements == null) {\\\\n                    return [];\\\\n                }\\\\n                let urls = [];\\\\n                for (let i = 0; i < videoElements.length; i++) {\\\\n                    if (videoElements[i].width > 70 && videoElements[i].height > 70) {\\\\n                        const src = videoElements[i].src;\\\\n                        if (src == null || src.length < 5 || urls.includes(src) || src.indexOf(\\\\\\\"data:\\\\\\\") == 0) {\\\\n                            continue;\\\\n                        }\\\\n                        //log(src);\\\\n                        urls.push(new URL(src).toString());\\\\n                    }\\\\n                }\\\\n                return urls;\\\\n            }\\\\n\\\\n            function check() {\\\\n                try {\\\\n                    let urls = getimgs();\\\\n                    //fba.log(\\\\\\\"getimgs：\\\\\\\" + urls.length);\\\\n                    if (window.checkedUrls == null) {\\\\n                        window.checkedUrls = [];\\\\n                    }\\\\n                    let checkedUrls = window.checkedUrls;\\\\n                    urls = urls.filter(it => {\\\\n                        return !checkedUrls.includes(it)\\\\n                    });\\\\n\\\\n                    if (urls.length > 0) {\\\\n                        let pics = urls.filter(it => it != null && it != \\\\\\\"\\\\\\\")\\\\n                            .map(it => {\\\\n                                let u = fba.getHeaderUrl(it);\\\\n                                let uu = u.split(\\\\\\\";\\\\\\\");\\\\n                                let pic = u;\\\\n                                if (uu.length > 1) {\\\\n                                    let u1 = uu[0];\\\\n                                    let u2 = uu[1].slice(1, -1).split(\\\\\\\"&&\\\\\\\");\\\\n                                    let referer = null;\\\\n                                    let ua = null;\\\\n                                    let cookie0 = null;\\\\n                                    for (let ii of u2) {\\\\n                                        let it2 = ii.split(\\\\\\\"@\\\\\\\");\\\\n                                        if (it2[0] == \\\\\\\"Referer\\\\\\\") {\\\\n                                            referer = it2[1].replace(/；；/g, \\\\\\\";\\\\\\\");\\\\n                                        }\\\\n                                        if (it2[0] == \\\\\\\"User-Agent\\\\\\\") {\\\\n                                            ua = it2[1].replace(/；；/g, \\\\\\\";\\\\\\\");\\\\n                                        }\\\\n                                        if (it2[0] == \\\\\\\"Cookie\\\\\\\") {\\\\n                                            cookie0 = it2[1].replace(/；；/g, \\\\\\\";\\\\\\\");\\\\n                                        }\\\\n                                    }\\\\n                                    pic = u1;\\\\n                                    if (referer) {\\\\n                                        pic = pic + \\\\\\\"@Referer=\\\\\\\" + referer;\\\\n                                    }\\\\n                                    if (ua) {\\\\n                                        pic = pic + \\\\\\\"@User-Agent=\\\\\\\" + ua;\\\\n                                    }\\\\n                                    if (cookie0) {\\\\n                                        pic = pic + \\\\\\\"@Cookie=\\\\\\\" + cookie0\\\\n                                    }\\\\n\\\\n                                } else {\\\\n                                    pic = it;\\\\n                                }\\\\n                                return {\\\\n                                    pic: pic,\\\\n                                    url: u\\\\n                                }\\\\n                            });\\\\n                        fba.log(pics.length + \\\\\\\"\\\\\\\");\\\\n                        fba.parseLazyRuleAsync($$$().lazyRule((urls) => {\\\\n                            //log(urls);\\\\n\\\\n                            let arr = urls.map(it => {\\\\n                                return {\\\\n                                    title: \\\\\\\"\\\\\\\",\\\\n                                    url: it.pic,\\\\n                                    pic_url: it.pic,\\\\n                                    col_type: \\\\\\\"card_pic_3\\\\\\\",\\\\n                                    extra: {\\\\n                                        cls: \\\\\\\"pics\\\\\\\"\\\\n                                    }\\\\n                                }\\\\n                            });\\\\n                            addItemBefore(\\\\\\\"pic_line\\\\\\\", arr);\\\\n                        }, pics), function() {\\\\n\\\\n                        });\\\\n                        for (let it of urls) {\\\\n                            window.checkedUrls.push(it);\\\\n                        }\\\\n                    }\\\\n\\\\n                } catch (e) {\\\\n                    fba.log(e.toString());\\\\n                }\\\\n                setTimeout(check, 300);\\\\n            }\\\\n            check();\\\\n        })\\\\n    }\\\\n});\\\\n\\\\n\\\\nd.push({\\\\n    title: \\\\\\\"提取\\\\\\\",\\\\n    url: $.toString(() => {\\\\n        putMyVar(\\\\\\\"i\\\\\\\", input);\\\\n        deleteItemByCls(\\\\\\\"pics\\\\\\\");\\\\n        refreshX5WebView(input);\\\\n    }),\\\\n    col_type: \\\\\\\"input\\\\\\\",\\\\n    desc: \\\\\\\"请输入网页地址\\\\\\\",\\\\n    pic_url: \\\\\\\"\\\\\\\",\\\\n    extra: {\\\\n        defaultValue: getMyVar(\\\\\\\"i\\\\\\\", \\\\\\\"\\\\\\\")\\\\n    }\\\\n});\\\\nd.push({\\\\n    title: \\\\\\\"显示网页组件：\\\\\\\" + x,\\\\n    url: $(\\\\\\\"#noLoading#\\\\\\\").lazyRule(() => {\\\\n        let x = getItem(\\\\\\\"x\\\\\\\", \\\\\\\"否\\\\\\\");\\\\n        let next = x == \\\\\\\"否\\\\\\\" ? \\\\\\\"是\\\\\\\" : \\\\\\\"否\\\\\\\";\\\\n        setItem(\\\\\\\"x\\\\\\\", next);\\\\n        let desc = x == \\\\\\\"否\\\\\\\" ? \\\\\\\"float&&300\\\\\\\" : \\\\\\\"float&&1\\\\\\\";\\\\n        updateItem(\\\\\\\"pic_tip\\\\\\\", {\\\\n            title: \\\\\\\"显示网页组件：\\\\\\\" + next\\\\n        });\\\\n        refreshX5Desc(desc);\\\\n        return \\\\\\\"hiker://empty\\\\\\\"\\\\n    }),\\\\n    col_type: \\\\\\\"text_1\\\\\\\",\\\\n    desc: \\\\\\\"\\\\\\\",\\\\n    pic_url: \\\\\\\"\\\\\\\",\\\\n    extra: {\\\\n        id: \\\\\\\"pic_tip\\\\\\\"\\\\n    }\\\\n});\\\\n\\\\nd.push({\\\\n    col_type: \\\\\\\"line_blank\\\\\\\",\\\\n    extra: {\\\\n        id: \\\\\\\"pic_line\\\\\\\"\\\\n    }\\\\n});\\\\n\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"text_1\\\",\\\"name\\\":\\\"epub\\\",\\\"path\\\":\\\"epub\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nlet path = base64Decode(getParam(\\\\\\\"p\\\\\\\"));\\\\nlog(path);\\\\nlet meta = getEpubMetadata(path);\\\\n//setPageTitle(meta.firstTitle);\\\\nlet chapters = getEpubChapters(path);\\\\n//log(chapters);\\\\nfor (let it of chapters) {\\\\n    d.push({\\\\n        title: it.title,\\\\n        url: \\\\\\\"hiker://page/content#readTheme##autoPage#\\\\\\\",\\\\n        extra: {\\\\n            href: it.url,\\\\n            path: path\\\\n        }\\\\n    });\\\\n}\\\\nsetResult(d);\\\\n\\\"},{\\\"col_type\\\":\\\"rich_text\\\",\\\"name\\\":\\\"正文\\\",\\\"path\\\":\\\"content\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nlet path = MY_PARAMS.path;\\\\nlet url = MY_PARAMS.href;\\\\nlet c = getEpubContent(path, url);\\\\nd.push({\\\\n    title: c,\\\\n    url: \\\\\\\"\\\\\\\",\\\\n});\\\\nsetResult(d);\\\"}]\"}","title":"奇妙工具箱-2022年8月推荐"}