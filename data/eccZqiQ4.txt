import junit.framework.TestCase;
import static java.lang.Math.*;

/**
 * Inspired by twitter post https://twitter.com/allenholub/status/1617619350080598016
 * And https://twitter.com/lucasmeijer/status/1615767525928615956
 */
public class StaticMethodTest extends TestCase {

    private static String getPercentageRounds(final double percentage) {
        return getPercentageRounds_JeffGrigg(percentage);
//        return getPercentageRounds_AllenHolub(percentage);
//        return getPercentageRounds_AllenHolub_JeffGrigg(percentage);
//        return getPercentageRounds_MichaelGrafl(percentage);
//        return getPercentageRounds_NSS(percentage);
    }

    private static final int TOTAL_NUMBER_OF_DOTS = 10;

    private static String getPercentageRounds_JeffGrigg(final double percentage) {
        final var blueCircles = max(min((int) ceil(percentage * TOTAL_NUMBER_OF_DOTS), TOTAL_NUMBER_OF_DOTS), 0);
        final var emptyCircles = TOTAL_NUMBER_OF_DOTS - blueCircles;
        return "ğŸ”µ".repeat(blueCircles) + "âšª".repeat(emptyCircles);
    }

    private static final String[] _dots = new String[]{
            "âšªâšªâšªâšªâšªâšªâšªâšªâšªâšª",
            "ğŸ”µâšªâšªâšªâšªâšªâšªâšªâšªâšª",
            "ğŸ”µğŸ”µâšªâšªâšªâšªâšªâšªâšªâšª",
            "ğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšªâšªâšª",
            "ğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšªâšª",
            "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšª",
            "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšª",
            "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšª",
            "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšª",
            "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšª",
            "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µ"
    };

    private static String getPercentageRounds_AllenHolub(final double percentage) {
//        assert 0.0 <= percentage && percentage <= 1.0;
        final var percentageAsIntBetween0And10 = max(min((int) ceil(percentage * TOTAL_NUMBER_OF_DOTS), TOTAL_NUMBER_OF_DOTS), 0);
//        final var percentageAsIntBetween0And10 = (int) (percentage * 10);
        return _dots[percentageAsIntBetween0And10];
    }

    private static String getPercentageRounds_MichaelGrafl(final double percentage) {
        final var pot = max(min((int) ceil(percentage * TOTAL_NUMBER_OF_DOTS), TOTAL_NUMBER_OF_DOTS), 0);
//        final var pot = (int) (percentage * 10 + 0.5);
        switch (pot) {
            case 0: return "âšªâšªâšªâšªâšªâšªâšªâšªâšªâšª";
            case 1: return "ğŸ”µâšªâšªâšªâšªâšªâšªâšªâšªâšª";
            case 2: return "ğŸ”µğŸ”µâšªâšªâšªâšªâšªâšªâšªâšª";
            case 3: return "ğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšªâšªâšª";
            case 4: return "ğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšªâšª";
            case 5: return "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšª";
            case 6: return "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšª";
            case 7: return "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšª";
            case 8: return "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšª";
            case 9: return "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšª";
            case 10: return "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µ";
            default: return "âšªâšªâšªâšªâšªâšªâšªâšªâšªâšª";
        }
    }

    // https://twitter.com/NabheetS/status/1616461311139016710
    private static String getPercentageRounds_NSS(final double percentage) {
        final var blueCircles = max(min((int) ceil(percentage * TOTAL_NUMBER_OF_DOTS), TOTAL_NUMBER_OF_DOTS), 0);
        final var result = new StringBuilder(10);
        for (int i = 0; i < 10; ++i) {
            result.append(i < blueCircles ? "ğŸ”µ" : "âšª");
        }
        return result.toString();
    }

    private static String getPercentageRounds_AllenHolub_JeffGrigg(final double percentage) {
        final String[] dots = new String[]{
                "âšªâšªâšªâšªâšªâšªâšªâšªâšªâšª",
                "ğŸ”µâšªâšªâšªâšªâšªâšªâšªâšªâšª",
                "ğŸ”µğŸ”µâšªâšªâšªâšªâšªâšªâšªâšª",
                "ğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšªâšªâšª",
                "ğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšªâšª",
                "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšª",
                "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšª",
                "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšª",
                "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšª",
                "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšª",
                "ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µ"
        };
        final var percentageAsIntBetween0And10 = max(min((int) ceil(percentage * 10), 10), 0);
        return dots[percentageAsIntBetween0And10];
    }

    public void testZero() {
        assertEquals("âšªâšªâšªâšªâšªâšªâšªâšªâšªâšª", getPercentageRounds(0.00));
    }

    public void testJustOverZero() {
        assertEquals("ğŸ”µâšªâšªâšªâšªâšªâšªâšªâšªâšª", getPercentageRounds(0.00001));
    }

    public void test10Percent() {
        assertEquals("ğŸ”µâšªâšªâšªâšªâšªâšªâšªâšªâšª", getPercentageRounds(0.10));
    }

    public void testJustOver10Percent() {
        assertEquals("ğŸ”µğŸ”µâšªâšªâšªâšªâšªâšªâšªâšª", getPercentageRounds(0.100001));
    }

    public void test20Percent() {
        assertEquals("ğŸ”µğŸ”µâšªâšªâšªâšªâšªâšªâšªâšª", getPercentageRounds(0.20));
    }

    public void testJustOver20Percent() {
        assertEquals("ğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšªâšªâšª", getPercentageRounds(0.200001));
    }

    public void test30Percent() {
        assertEquals("ğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšªâšªâšª", getPercentageRounds(0.30));
    }

    public void testJustOver30Percent() {
        assertEquals("ğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšªâšª", getPercentageRounds(0.300001));
    }

    public void test40Percent() {
        assertEquals("ğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšªâšª", getPercentageRounds(0.40));
    }

    public void testJustOver40Percent() {
        assertEquals("ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšª", getPercentageRounds(0.400001));
    }

    public void test50Percent() {
        assertEquals("ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšªâšª", getPercentageRounds(0.50));
    }

    public void testJustOver50Percent() {
        assertEquals("ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšª", getPercentageRounds(0.500001));
    }

    public void test60Percent() {
        assertEquals("ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšªâšª", getPercentageRounds(0.60));
    }

    public void testJustOver60Percent() {
        assertEquals("ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšª", getPercentageRounds(0.600001));
    }

    public void test70Percent() {
        assertEquals("ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšªâšª", getPercentageRounds(0.70));
    }

    public void testJustOver70Percent() {
        assertEquals("ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšª", getPercentageRounds(0.700001));
    }

    public void test80Percent() {
        assertEquals("ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšªâšª", getPercentageRounds(0.80));
    }

    public void testJustOver80Percent() {
        assertEquals("ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšª", getPercentageRounds(0.800001));
    }

    public void test90Percent() {
        assertEquals("ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µâšª", getPercentageRounds(0.90));
    }

    public void testJustOver90Percent() {
        assertEquals("ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µ", getPercentageRounds(0.900001));
    }

    public void testAlmost100Percent() {
        assertEquals("ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µ", getPercentageRounds(0.999999));
    }

    public void test100Percent() {
        assertEquals("ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µ", getPercentageRounds(1.00));
    }

    public void testJustOver100Percent() {
        assertEquals("ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µ", getPercentageRounds(1.0000001));
    }

    public void test200Percent() {
        assertEquals("ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µ", getPercentageRounds(2.00));
    }

    public void testCrazyLargePercentage() {
        assertEquals("ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µ", getPercentageRounds(999999.999999));
    }

    public void testMaxIntegerValue() {
        assertEquals("ğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µğŸ”µ", getPercentageRounds(Integer.MAX_VALUE));
    }

    public void testJustBelowZero() {
        assertEquals("âšªâšªâšªâšªâšªâšªâšªâšªâšªâšª", getPercentageRounds(-0.0000001));
    }

    public void testNegative10Percent() {
        assertEquals("âšªâšªâšªâšªâšªâšªâšªâšªâšªâšª", getPercentageRounds(-0.10));
    }

    public void testNegative20Percent() {
        assertEquals("âšªâšªâšªâšªâšªâšªâšªâšªâšªâšª", getPercentageRounds(-0.20));
    }

    public void testCrazyLargeNegativePercentage() {
        assertEquals("âšªâšªâšªâšªâšªâšªâšªâšªâšªâšª", getPercentageRounds(-999999.999999));
    }

    public void testMinIntegerValue() {
        assertEquals("âšªâšªâšªâšªâšªâšªâšªâšªâšªâšª", getPercentageRounds(Integer.MIN_VALUE));
    }

}