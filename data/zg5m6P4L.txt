  import java.util.ArrayDeque;
  import java.util.Deque;
  import java.lang.IllegalStateException;
  import java.lang.ArithmeticException;
  import java.util.NoSuchElementException;






  public class PostfixAccumulator implements AccumulatorInterface {
      Deque<Integer> myStack;

      public PostfixAccumulator(){
	  this.myStack = new ArrayDeque<>();
      }

      @Override
      public int enterNumber(int n){
	  myStack.push(n);
	  return myStack.peekLast();
      }

      @Override
      public int enterOperator(char op) throws IllegalStateException, ArithmeticException{
	  Integer a,b;
	  try{
	      a = myStack.pop();
	      b = myStack.pop();
	  }catch(NoSuchElementException e){
	      throw new IllegalStateException("Not enuf operands for "+op);
	  }

	  switch(op){
	      case '+':
		  myStack.push(a+b);
		  return a+b;
	      case '-':
		  myStack.push(b-a);
		  return b-a;
	      case '*':
		  myStack.push(a*b);
		  return a*b;
	      case '/':
		  myStack.push(b/a);
		  return b/a;
	      default:
		  throw new IllegalStateException();
	  }
      }

      @Override
      public int getValue() throws IllegalStateException{
	  if(myStack.size()>1) throw new IllegalStateException("Too many numbers in expression");
	  return myStack.peekLast();
      }

      @Override
      public void reset(){
	  this.myStack = new ArrayDeque<>();
      }

  }

