海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥⚙直播设置⚙@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbXSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi6IGa5b2x4oiaXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9lbXB0eSNub1JlY29yZEhpc3RvcnkjO2dldDtVVEYtODt7VXNlci1BZ2VudEBNb3ppbGxhLzUuMCAoV2luZG93cyBOVCAxMC4w77yb77ybIFdpbjY077yb77ybIHg2NCkgQXBwbGVXZWJLaXQvNTM3LjM2IChLSFRNTCwgbGlrZSBHZWNrbykgQ2hyb21lLzEwNS4wLjAuMCBTYWZhcmkvNTM3LjM2fVwiLFwiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcImZpbmRfcnVsZVwiOlwianM6KFxcbigpID0+IHtcXG4gICAgYWRkTGlzdGVuZXIoXFxcIm9uQ2xvc2VcXFwiLCAkLnRvU3RyaW5nKCgpID0+IHtcXG4gICAgfVxcbiAgICApKTtcXG4gICAgc2V0UGFnZVRpdGxlKFxcXCJcXFxcdTI2OTlcXFxcdTc2ZjRcXFxcdTY0YWRcXFxcdThiYmVcXFxcdTdmNmVcXFxcdTI2OTlcXFwiKTtcXG4gICAgbGV0IGxpdmVjZmdmaWxlID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL0p1eWluZy9saXZlY29uZmlnLmpzb25cXFwiO1xcbiAgICBsZXQgbGl2ZWNmZyA9IGZldGNoKGxpdmVjZmdmaWxlKTtcXG4gICAgaWYgKGxpdmVjZmcgIT0gXFxcIlxcXCIpIHtcXG4gICAgICAgIGV2YWwoXFxcInZhciBsaXZlY29uZmlnID0gXFxcIiArIGxpdmVjZmcpO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgICAgdmFyIGxpdmVjb25maWcgPSB7fTtcXG4gICAgfVxcbiAgICB2YXIgZCA9IFtdO1xcbiAgICBkLnB1c2goe3RpdGxlOiBcXFwiXFxcXHUyMDE4XFxcXHUyMDE4XFxcXHUyMDE5XFxcXHUyMDE5PGI+XFxcXHVkODNkXFxcXHVkY2ZhIFxcXFx1OGJhMlxcXFx1OTYwNVxcXFx1NmU5MFxcXFx1N2JhMVxcXFx1NzQwNjwvYj4gJm5ic3AgJm5ic3AgPHNtYWxsPlxcXFx1NmRmYlxcXFx1NTJhMFxcXFx1ODFlYVxcXFx1NWI5YVxcXFx1NGU0OVxcXFx1OTRmZVxcXFx1NjNhNTwvc21hbGw+XFxcIiwgaW1nOiBcXFwiaHR0cHM6Ly9pbWcudmludWEuY24vaW1hZ2VzL1FxeUMucG5nXFxcIiwgdXJsOiAkKFxcXCJcXFwiLCBcXFwiXFxcXHU4ZjkzXFxcXHU1MTY1XFxcXHU5MDFhXFxcXHU3NTI4XFxcXHU2ODNjXFxcXHU1ZjBmXFxcXHU3Njg0dHZcXFxcdTk0ZmVcXFxcdTYzYTVcXFxcdTU3MzBcXFxcdTU3NDBcXFwiKS5pbnB1dCgobGl2ZWNmZ2ZpbGUsIGxpdmVjb25maWcpID0+IHtcXG4gICAgICAgIGlmIChpbnB1dCkge1xcbiAgICAgICAgICAgIGlmICgvXFxcXC9zdG9yYWdlXFxcXC9lbXVsYXRlZFxcXFwvLy50ZXN0KGlucHV0KSkge1xcbiAgICAgICAgICAgICAgICBpbnB1dCA9IFxcXCJmaWxlOi8vXFxcIiArIGlucHV0O1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBsZXQgbGl2ZWRhdGEgPSBsaXZlY29uZmlnW1xcXCJkYXRhXFxcIl0gfHwgW107XFxuICAgICAgICAgICAgaWYgKCFsaXZlZGF0YS5zb21lKGl0ZW0gPT4gaXRlbS51cmwgPT0gaW5wdXQpKSB7XFxuICAgICAgICAgICAgICAgIHNob3dMb2FkaW5nKFxcXCJcXFxcdTZiNjNcXFxcdTU3MjhcXFxcdTlhOGNcXFxcdThiYzFcXFxcdTk0ZmVcXFxcdTYzYTVcXFxcdTY3MDlcXFxcdTY1NDhcXFxcdTYwMjcuLi5cXFwiKTtcXG4gICAgICAgICAgICAgICAgbGV0IFlDaHRtbCA9IHJlcXVlc3QoaW5wdXQsIHt0aW1lb3V0OiAzMDAwfSk7XFxuICAgICAgICAgICAgICAgIGlmIChZQ2h0bWwuaW5kZXhPZihcXFwiI2dlbnJlI1xcXCIpID4gLTEgfHwgWUNodG1sLmluZGV4T2YoXFxcIiNFWFRJTkY6LTFcXFwiKSA+IC0xKSB7XFxuICAgICAgICAgICAgICAgICAgICBoaWRlTG9hZGluZygpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoXFxcIlxcXCIsIFxcXCJcXFxcdTk0ZmVcXFxcdTYzYTVcXFxcdTY3MDlcXFxcdTY1NDhcXFxcdWZmMGNcXFxcdThkNzdcXFxcdTRlMmFcXFxcdTU0MGRcXFxcdTViNTdcXFxcdTRmZGRcXFxcdTViNThcXFwiKS5pbnB1dCgobGl2ZWRhdGEsIHVybCwgbGl2ZWNmZ2ZpbGUsIGxpdmVjb25maWcpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGl2ZWRhdGEucHVzaCh7bmFtZTogaW5wdXQsIHVybDogdXJsfSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpdmVjb25maWdbXFxcImRhdGFcXFwiXSA9IGxpdmVkYXRhO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUZpbGUobGl2ZWNmZ2ZpbGUsIEpTT04uc3RyaW5naWZ5KGxpdmVjb25maWcpKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8vXFxcXHU1ODllXFxcXHU1MmEwXFxcXHU4MWVhXFxcXHU1YjlhXFxcXHU0ZTQ5dHZcXFxcdTk0ZmVcXFxcdTYzYTVcXFxcdTU3MzBcXFxcdTU3NDBcXFxcdTYyMTBcXFxcdTUyOWZcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly9cXFxcdThmOTNcXFxcdTUxNjVcXFxcdTRlMGRcXFxcdTgwZmRcXFxcdTRlM2FcXFxcdTdhN2FcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICwgbGl2ZWRhdGEsIGlucHV0LCBsaXZlY2ZnZmlsZSwgbGl2ZWNvbmZpZyk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICBoaWRlTG9hZGluZygpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL1xcXFx1NjVlMFxcXFx1NmNkNVxcXFx1OGJjNlxcXFx1NTIyYlxcXFx1ZmYwY1xcXFx1OTcwMFxcXFx1NTQyYiNnZW5yZSNcXFxcdTc2ODRcXFxcdTkwMWFcXFxcdTc1MjhcXFxcdTY4M2NcXFxcdTVmMGZcXFwiO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL1xcXFx1NWRmMlxcXFx1NWI1OFxcXFx1NTcyOFxcXCI7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8vXFxcXHU1NzMwXFxcXHU1NzQwXFxcXHU0ZTBkXFxcXHU4MGZkXFxcXHU0ZTNhXFxcXHU3YTdhXFxcIjtcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICAsIGxpdmVjZmdmaWxlLCBsaXZlY29uZmlnKSwgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwifSk7XFxuICAgIGxldCBsaXZlZGF0YSA9IGxpdmVjb25maWdbXFxcImRhdGFcXFwiXSB8fCBbXTtcXG4gICAgaWYgKGxpdmVkYXRhLmxlbmd0aCA+IDApIHtcXG4gICAgICAgIGQucHVzaCh7dGl0bGU6IFxcXCJcXFxcdTcwYjlcXFxcdTUxZmJcXFxcdTRlMGJcXFxcdTY1YjlcXFxcdTc2ODRcXFxcdThiYTJcXFxcdTk2MDVcXFxcdTZlOTBcXFxcdTY3NjFcXFxcdTc2ZWVcXFxcdWZmMGNcXFxcdThmZGJcXFxcdTg4NGNcXFxcdTY0Y2RcXFxcdTRmNWNcXFxcdWQ4M2RcXFxcdWRjNDdcXFwiLCBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCJ9KTtcXG4gICAgICAgIGQucHVzaCh7Y29sX3R5cGU6IFxcXCJsaW5lXFxcIn0pO1xcbiAgICAgICAgZnVuY3Rpb24gZ2V0aWRlKGlzKSB7XFxuICAgICAgICAgICAgaWYgKGlzID09IDEpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJcXFxcdTIwMThcXFxcdTIwMThcXFxcdTIwMTlcXFxcdTIwMTk8c3Ryb25nPjxmb250IGNvbG9yPVxcXFxcXFwiI2YxM2I2NmFcXFxcXFxcIj5cXFxcdTI1YzkgPC9mcm9udD48L3N0cm9uZz5cXFwiO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwiXFxcXHUyMDE4XFxcXHUyMDE4XFxcXHUyMDE5XFxcXHUyMDE5PHN0cm9uZz48Zm9udCBjb2xvcj1cXFxcXFxcIiNGNTQzNDNcXFxcXFxcIj5cXFxcdTI1YzkgPC9mcm9udD48L3N0cm9uZz5cXFwiO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGl2ZWRhdGEubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICBkLnB1c2goe3RpdGxlOiAobGl2ZWRhdGFbaV0uc2hvdyAhPSAwID8gZ2V0aWRlKDEpIDogZ2V0aWRlKDApKSArIGxpdmVkYXRhW2ldLm5hbWUsIGRlc2M6IGxpdmVkYXRhW2ldLnVybCwgdXJsOiAkKFtcXFwiXFxcXHU1OTBkXFxcXHU1MjM2XFxcXHU5NGZlXFxcXHU2M2E1XFxcIiwgXFxcIlxcXFx1NWJmY1xcXFx1NTE2NVxcXFx1ODA1YVxcXFx1NWY3MVxcXFx1MjIxYVxcXCIsIFxcXCJcXFxcdTY2ZjRcXFxcdTY1YjBcXFxcdTdmMTNcXFxcdTViNThcXFwiLCBcXFwiXFxcXHU1YmZjXFxcXHU1MTY1XFxcXHU4MDVhXFxcXHU3NmY0XFxcXHU2NGFkXFxcIiwgXFxcIlxcXFx1NTIyMFxcXFx1OTY2NFxcXFx1OGJhMlxcXFx1OTYwNVxcXCIsIGxpdmVkYXRhW2ldLnNob3cgIT0gMCA/IFxcXCJcXFxcdTUwNWNcXFxcdTc1MjhcXFxcdThiYTJcXFxcdTk2MDVcXFwiIDogXFxcIlxcXFx1NTQyZlxcXFx1NzUyOFxcXFx1OGJhMlxcXFx1OTYwNVxcXCJdLCAyLCBcXFwiXFxcIikuc2VsZWN0KChsaXZlY2ZnZmlsZSwgdXJsKSA9PiB7XFxuICAgICAgICAgICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT0gXFxcIlxcXFx1NjZmNFxcXFx1NjViMFxcXFx1N2YxM1xcXFx1NWI1OFxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93TG9hZGluZyhcXFwiXFxcXHU2YjYzXFxcXHU1NzI4XFxcXHU3ZjEzXFxcXHU1YjU4XFxcXHVmZjBjXFxcXHU4YmY3XFxcXHU3YTBkXFxcXHU1NDBlLlxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBZQ2h0bWwgPSByZXF1ZXN0KHVybCwge3RpbWVvdXQ6IDMwMDB9KTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoWUNodG1sLmluZGV4T2YoXFxcIiNnZW5yZSNcXFwiKSA+IC0xKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUNhY2hlKHVybCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBZQ2h0bWwgPSBmZXRjaENhY2hlKHVybCwgMjQsIHt0aW1lb3V0OiAzMDAwfSkucmVwbGFjZSgvVFYtL2csIFxcXCJUVlxcXCIpLnJlcGxhY2UoL1xcXFxbLipcXFxcXS9nLCBcXFwiXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVMb2FkaW5nKCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly9cXFxcdTY2ZjRcXFxcdTY1YjBcXFxcdTY1ODdcXFxcdTRlZjZcXFxcdTdmMTNcXFxcdTViNThcXFxcdTYyMTBcXFxcdTUyOWZcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVMb2FkaW5nKCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly9cXFxcdTY2ZjRcXFxcdTY1YjBcXFxcdTU5MzFcXFxcdThkMjVcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0ID09IFxcXCJcXFxcdTUyMjBcXFxcdTk2NjRcXFxcdThiYTJcXFxcdTk2MDVcXFwiKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgvXmh0dHAvLnRlc3QodXJsKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlQ2FjaGUodXJsKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGl2ZWNmZyA9IGZldGNoKGxpdmVjZmdmaWxlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpdmVjZmcgIT0gXFxcIlxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2YWwoXFxcInZhciBsaXZlY29uZmlnID0gXFxcIiArIGxpdmVjZmcpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGxpdmVkYXRhID0gbGl2ZWNvbmZpZ1tcXFwiZGF0YVxcXCJdIHx8IFtdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXZlZGF0YS5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaXZlZGF0YVtpXS51cmwgPT0gdXJsKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpdmVkYXRhLnNwbGljZShpLCAxKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGl2ZWNvbmZpZ1tcXFwiZGF0YVxcXCJdID0gbGl2ZWRhdGE7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUZpbGUobGl2ZWNmZ2ZpbGUsIEpTT04uc3RyaW5naWZ5KGxpdmVjb25maWcpKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PSBcXFwiXFxcXHU1YmZjXFxcXHU1MTY1XFxcXHU4MDVhXFxcXHU3NmY0XFxcXHU2NGFkXFxcIikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IEp1bGl2ZWZpbGUgPSBcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9saXZlL2NvbmZpZy5qc29uXFxcIjtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBKdWxpdmUgPSBmZXRjaChKdWxpdmVmaWxlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChKdWxpdmUgIT0gXFxcIlxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmFsKFxcXCJ2YXIgSnVkYXRhPVxcXCIgKyBKdWxpdmUgKyBcXFwiO1xcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgSnVkYXRhbGlzdCA9IEp1ZGF0YVtcXFwiZGF0YVxcXCJdIHx8IFtdO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIUp1ZGF0YWxpc3Quc29tZShpdGVtID0+IGl0ZW0udXJsID09IHVybCkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKFxcXCJcXFwiLCBcXFwiXFxcXHU1M2Q2XFxcXHU0ZTJhXFxcXHU1NDBkXFxcXHU1YjU3XFxcXHU0ZmRkXFxcXHU1YjU4XFxcXHU1NDI3XFxcIikuaW5wdXQoKEp1bGl2ZWZpbGUsIEp1ZGF0YSwgdXJsKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0KSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEp1ZGF0YVtcXFwiZGF0YVxcXCJdLnB1c2goe25hbWU6IGlucHV0LCB1cmw6IHVybH0pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUZpbGUoSnVsaXZlZmlsZSwgSlNPTi5zdHJpbmdpZnkoSnVkYXRhKSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly9cXFxcdTViZmNcXFxcdTUxNjVcXFxcdTgwNWFcXFxcdTc2ZjRcXFxcdTY0YWRcXFxcdThiYTJcXFxcdTk2MDVcXFxcdTYyMTBcXFxcdTUyOWZcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly9cXFxcdTU0MGRcXFxcdTc5ZjBcXFxcdTRlMGRcXFxcdTgwZmRcXFxcdTRlM2FcXFxcdTdhN2FcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICwgSnVsaXZlZmlsZSwgSnVkYXRhLCB1cmwpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL1xcXFx1NWRmMlxcXFx1NWI1OFxcXFx1NTcyOFxcXFx1ODA1YVxcXFx1NzZmNFxcXFx1NjRhZFxcXFx1OGJhMlxcXFx1OTYwNVxcXCI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nKFxcXCJcXFxcdTViZmNcXFxcdTUxNjVcXFxcdTgwNWFcXFxcdTc2ZjRcXFxcdTY0YWRcXFxcdThiYTJcXFxcdTk2MDVcXFxcdTU5MzFcXFxcdThkMjU+XFxcIiArIGUubWVzc2FnZSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly9cXFxcdTViZmNcXFxcdTUxNjVcXFxcdTgwNWFcXFxcdTc2ZjRcXFxcdTY0YWRcXFxcdThiYTJcXFxcdTk2MDVcXFxcdTU5MzFcXFxcdThkMjVcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL1xcXFx1NGVkM1xcXFx1NWU5M1xcXFx1NTE0OFxcXFx1NWJmY1xcXFx1NTE2NVxcXFx1ODA1YVxcXFx1NzZmNFxcXFx1NjRhZFxcXFx1NWMwZlxcXFx1N2EwYlxcXFx1NWU4ZlxcXCI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT0gXFxcIlxcXFx1NWJmY1xcXFx1NTE2NVxcXFx1ODA1YVxcXFx1NWY3MVxcXFx1MjIxYVxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93TG9hZGluZyhcXFwiXFxcXHU1M2UwXFxcXHU1MmEwXFxcXHU1YmZjXFxcXHU1MTY1XFxcXHU3NmY0XFxcXHU2NGFkXFxcXHVmZjBjXFxcXHU2NzAwXFxcXHU1OTI3XFxcXHU0ZTA3XFxcXHU4ODRjXFxcXHU5NjUwXFxcXHU1MjM2XFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IFlDaHRtbCA9IGZldGNoQ2FjaGUodXJsLCAyNCwge3RpbWVvdXQ6IDMwMDB9KS5yZXBsYWNlKC9UVi0vZywgXFxcIlRWXFxcIikucmVwbGFjZSgvXFxcXFsuKlxcXFxdL2csIFxcXCJcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoWUNodG1sLmluZGV4T2YoXFxcIiNnZW5yZSNcXFwiKSA+IC0xKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBZQ2xpdmVzID0gWUNodG1sLnNwbGl0KFxcXCJcXFxcblxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBZQ2xpdmVzID0gW107XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChZQ2xpdmVzLmxlbmd0aCA+IDApIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGltcG9ydG51bSA9IDA7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBKWWxpdmVmaWxlID0gXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvU3JjL0p1eWluZy9saXZlLnR4dFxcXCI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBKWWxpdmUgPSBmZXRjaChKWWxpdmVmaWxlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEpZbGl2ZSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIEpZbGl2ZXMgPSBKWWxpdmUuc3BsaXQoXFxcIlxcXFxuXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaWQgPSAwO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHB5ID0gMDtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgWUNsaXZlcy5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChKWWxpdmVzLmxlbmd0aCA+IDEwMDAwKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZyhcXFwiXFxcXHU3NmY0XFxcXHU2NGFkXFxcXHU2NTcwXFxcXHU2MzZlXFxcXHU2ZTkwXFxcXHU2NTg3XFxcXHU0ZWY2XFxcXHU1ZGYyXFxcXHU1OTI3XFxcXHU0ZThlMTAwMDBcXFxcdTg4NGNcXFxcdWZmMGNcXFxcdTRlM2FcXFxcdTRmZGRcXFxcdThiYzFcXFxcdTY1NDhcXFxcdTczODdcXFxcdTUwNWNcXFxcdTZiNjJcXFxcdTViZmNcXFxcdTUxNjVcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFlDbGl2ZXNbaV0uaW5kZXhPZihcXFwiI2dlbnJlI1xcXCIpID4gLTEgJiYgSllsaXZlcy5pbmRleE9mKFlDbGl2ZXNbaV0pID4gLTEpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkID0gSllsaXZlcy5pbmRleE9mKFlDbGl2ZXNbaV0pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHkgPSAwO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFlDbGl2ZXNbaV0uaW5kZXhPZihcXFwiI2dlbnJlI1xcXCIpID4gLTEgJiYgSllsaXZlcy5pbmRleE9mKFlDbGl2ZXNbaV0pID09IC0xKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQgPSBKWWxpdmVzLmxlbmd0aCArIDE7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHkgPSAwO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEpZbGl2ZXMuc3BsaWNlKGlkICsgMSwgMCwgWUNsaXZlc1tpXSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChZQ2xpdmVzW2ldLmluZGV4T2YoXFxcIixcXFwiKSA+IC0xICYmIEpZbGl2ZXMuaW5kZXhPZihZQ2xpdmVzW2ldKSA9PSAtMSAmJiBZQ2xpdmVzW2ldLnRyaW0oKSAhPSBcXFwiXFxcIikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKWWxpdmVzLnNwbGljZShpZCArIDEgKyBweSwgMCwgWUNsaXZlc1tpXSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB5Kys7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydG51bSsrO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBKWWxpdmVzID0gWUNsaXZlcztcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGltcG9ydG51bSA9IEpZbGl2ZXMubGVuZ3RoO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlRmlsZShKWWxpdmVmaWxlLCBKWWxpdmVzLmpvaW4oXFxcIlxcXFxuXFxcIikpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoaWRlTG9hZGluZygpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW1wb3J0bnVtID4gMCAmJiBnZXRNeVZhcihcXFwiSllsaXZlZHl1cmxcXFwiLCBcXFwianV5aW5nXFxcIikgPT0gXFxcImp1eWluZ1xcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXCJpc0VkaXRcXFwiLCBcXFwiMVxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly9cXFxcdTYyMTBcXFxcdTUyOWZcXFxcdTViZmNcXFxcdTUxNjVcXFwiICsgaW1wb3J0bnVtO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhpZGVMb2FkaW5nKCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly9cXFxcdTY1ODdcXFxcdTRlZjZcXFxcdTVmMDJcXFxcdTVlMzhcXFxcdTYyMTZcXFxcdTRlMGRcXFxcdTY1MmZcXFxcdTYzMDFcXFxcdTc2ODRcXFxcdTY4M2NcXFxcdTVmMGZcXFxcdWZmMGNcXFxcdTViZmNcXFxcdTUxNjVcXFxcdTU5MzFcXFxcdThkMjVcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0ID09IFxcXCJcXFxcdTU5MGRcXFxcdTUyMzZcXFxcdTk0ZmVcXFxcdTYzYTVcXFwiKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcHkodXJsKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT0gXFxcIlxcXFx1NTA1Y1xcXFx1NzUyOFxcXFx1OGJhMlxcXFx1OTYwNVxcXCIgfHwgaW5wdXQgPT0gXFxcIlxcXFx1NTQyZlxcXFx1NzUyOFxcXFx1OGJhMlxcXFx1OTYwNVxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBsaXZlY2ZnID0gZmV0Y2gobGl2ZWNmZ2ZpbGUpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxpdmVjZmcgIT0gXFxcIlxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmFsKFxcXCJ2YXIgbGl2ZWNvbmZpZyA9IFxcXCIgKyBsaXZlY2ZnKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgbGl2ZWRhdGEgPSBsaXZlY29uZmlnW1xcXCJkYXRhXFxcIl0gfHwgW107XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXZlZGF0YS5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGl2ZWRhdGFbaV0udXJsID09IHVybCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGl2ZWRhdGFbaV0uc2hvdyA9IGlucHV0ID09IFxcXCJcXFxcdTUwNWNcXFxcdTc1MjhcXFxcdThiYTJcXFxcdTk2MDVcXFwiID8gMCA6IDE7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXZlY29uZmlnW1xcXCJkYXRhXFxcIl0gPSBsaXZlZGF0YTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUZpbGUobGl2ZWNmZ2ZpbGUsIEpTT04uc3RyaW5naWZ5KGxpdmVjb25maWcpKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XFxuICAgICAgICAgICAgICAgICAgICBoaWRlTG9hZGluZygpO1xcbiAgICAgICAgICAgICAgICAgICAgbG9nKGUubWVzc2FnZSk7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8vXFxcXHU2NGNkXFxcXHU0ZjVjXFxcXHU1ZjAyXFxcXHU1ZTM4XFxcXHVmZjBjXFxcXHU4YmU2XFxcXHU2MGM1XFxcXHU2N2U1XFxcXHU3NzBiXFxcXHU2NWU1XFxcXHU1ZmQ3XFxcIjtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAsIGxpdmVjZmdmaWxlLCBsaXZlZGF0YVtpXS51cmwpLCBjb2xfdHlwZTogXFxcInRleHRfMVxcXCJ9KTtcXG4gICAgICAgIH1cXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIGQucHVzaCh7dGl0bGU6IFxcXCJcXFxcdTIxYmJcXFxcdTY1ZTBcXFxcdThiYjBcXFxcdTVmNTVcXFwiLCBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCJ9KTtcXG4gICAgfVxcbiAgICBzZXRIb21lUmVzdWx0KGQpO1xcbn1cXG4pKClcIixcImdyb3VwXCI6XCLikaDmjqjojZBcIixcInVhXCI6XCJwY1wiLFwicHJlUnVsZVwiOlwibGV0IGZpbGUxID0gXFxcImh0dHBzOi8vZ2l0Y29kZS5uZXQvc3JjNDg1OTc5NjIvaGsvLS9yYXcvbWFzdGVyL1NyY0p1eWluZy5qc1xcXCI7XFxubGV0IGZpbGUyID0gXFxcImh0dHBzOi8vYWdpdC5haS9zcmM0ODU5Nzk2Mi9TcmMvcmF3L2JyYW5jaC9tYXN0ZXIvU3JjSnV5aW5nLmpzXFxcIjtcXG5pZighY29uZmlnLuS+nei1lnx8KCFmaWxlRXhpc3QoJ2hpa2VyOi8vZmlsZXMvbGlicy8nICsgbWQ1KGZpbGUxKSArICcuanMnKSYmIWZpbGVFeGlzdCgnaGlrZXI6Ly9maWxlcy9saWJzLycgKyBtZDUoZmlsZTIpICsgJy5qcycpKSl7XFxuICBsZXQgY2pGaWxlID0gZmV0Y2goZmlsZTIse3RpbWVvdXQ6MjAwMH0pO1xcbiAgaWYoY2pGaWxlLmluZGV4T2YoJ25vd1ZlcnNpb24nKSA+IC0xKXtcXG4gICAgdmFyIHJlbHlmaWxlID0gZmlsZTI7XFxuICB9ZWxzZXtcXG4gICAgdmFyIHJlbHlmaWxlID0gZmlsZTE7XFxuICB9XFxuICBpbml0Q29uZmlnKHtcXG4gICAg5L6d6LWWOiByZWx5ZmlsZVxcbiAgfSk7XFx0XFxufVxcbi8vYnku5biF4oiaYOS6uuaJjSDogZrlvbHmqKHmnb/vvIFcIixcInBhZ2VzXCI6XCJbXVwifSIsInRpdGxlIjoi4pqZ55u05pKt6K6+572u4pqZIn0=