-- API de gestion des registres de sécurité (GRS)

-- APIs externes
local DIVERS	=	require("DIVERS")

-- Variables globales
local sRepRegistres	=	"Securite/Registres"
local sPortes		=	sRepRegistres.."/rsPORTES"
local sJoueurs		=	sRepRegistres.."/rsJOUEURS"
local sAcces		=	sRepRegistres.."/rsACCES"
local sAdmins		=	sRepRegistres.."/rsADMINS"

local tabstPortes	=	{}
local tabstJoueurs	=	{}
local tabstAcces	=	{}
local tabstAdmins	=	{}

-- Fonctions de lecture des registres

local function LireRegPortes()
	local sLigne	=	""
	local nID		=	0
	local sCode		=	""
	local fPortes	=	nil
	tabstPortes		=	{}
	if not fs.exists(sPortes) then return false end
	fPortes	=	fs.open(sPortes,"r")
	if fPortes == nil then return false end
	sLigne	=	fPortes.readLine()
	sLigne	=	fPortes.readLine()
	while sLigne ~= nil and sLigne ~= "" do
		nID		=	tonumber(DIVERS.ExtraitChaine(sLigne,1,";"))
		sCode	=	DIVERS.ExtraitChaine(sLigne,2,";")
		table.insert(tabstPortes,{nID = nID,sCode = sCode})
		sLigne	=	fPortes.readLine()
	end
	fPortes.close()
	return true
end

local function LireRegJoueurs()
	local sLigne	=	""
	local sJoueur	=	""
	local fJoueurs	=	nil
	tabstJoueurs		=	{}
	if not fs.exists(sJoueurs) then return false end
	fJoueurs = fs.open(sJoueurs,"r")
	if fJoueurs == nil then return false end
	sLigne	=	fJoueurs.readLine()
	sLigne	=	fJoueurs.readLine()
	while sLigne ~= nil and sLigne ~= "" do
		sJoueur	=	DIVERS.ExtraitChaine(sLigne,1,";")
		table.insert(tabstJoueurs,sJoueur)
		sLigne	=	fJoueurs.readLine()
	end
	fJoueurs.close()
	return true
end

local function LireRegAcces()
	local sLigne	=	""
	local nID		=	0
	local sCode		=	""
	local sJoueur	=	""
	local fAcces	=	nil
	tabstAcces		=	{}
	if not fs.exists(sAcces) then return false end
	fAcces	=	fs.open(sAcces,"r")
	if fAcces == nil then return false end
	sLigne	=	fAcces.readLine()
	sLigne	=	fAcces.readLine()
	while sLigne ~= nil and sLigne ~= "" do
		nID		=	tonumber(DIVERS.ExtraitChaine(sLigne,1,";"))
		sCode	=	DIVERS.ExtraitChaine(sLigne,2,";")
		sJoueur	=	DIVERS.ExtraitChaine(sLigne,3,";")
		table.insert(tabstAcces,{stPorte = {nID = nID,sCode = sCode},sJoueur = sJoueur})
		sLigne	=	fAcces.readLine()
	end
	fAcces.close()
	return true
end

local function LireRegAdmins()
	local sLigne	=	""
	local nID		=	0
	local sCode		=	""
	local fAdmins	=	nil
	tabstAdmins		=	{}
	if not fs.exists(sAdmins) then return false end
	fAdmins	=	fs.open(sAdmins,"r")
	if fAdmins == nil then return false end
	sLigne	=	fAdmins.readLine()
	sLigne	=	fAdmins.readLine()
	while sLigne ~= nil and sLigne ~= "" do
		nID		=	tonumber(DIVERS.ExtraitChaine(sLigne,1,";"))
		sCode	=	DIVERS.ExtraitChaine(sLigne,2,";")
		table.insert(tabstAdmins,{nID = nID,sCode = sCode})
		sLigne	=	fAdmins.readLine()
	end
	fAdmins.close()
	return true
end

-- Fonctions d'écriture des registres

local function EcrireRegPortes()
	local sLigne	=	""
	local fPortes	=	nil
	local stPorte
	local i
	fPortes = fs.open(sPortes,"w")
	fPortes.writeLine("-- ID;CODE")
	for i,stPorte in ipairs(tabstPortes) do
		sLigne = tostring(stPorte.nID)..";"..stPorte.sCode
		fPortes.writeLine(sLigne)
	end
	fPortes.close()
	return true
end

local function EcrireRegJoueurs()
	local sLigne	=	""
	local fJoueurs	=	nil
	local sJoueur
	local i
	fJoueurs = fs.open(sJoueurs,"w")
	fJoueurs.writeLine("-- NOM")
	for i,sJoueur in ipairs(tabstJoueurs) do
		sLigne = sJoueur
		fJoueurs.writeLine(sLigne)
	end
	fJoueurs.close()
	return true
end

local function EcrireRegAcces()
	local sLigne	=	""
	local fAcces	=	nil
	local stAcces
	local i
	fAcces = fs.open(sAcces,"w")
	fAcces.writeLine("-- ID;CODE;JOUEUR")
	for i,stAcces in ipairs(tabstAcces) do
		sLigne = stAcces.stPorte.nID..";"..stAcces.stPorte.sCode..";"..stAcces.sJoueur
		fAcces.writeLine(sLigne)
	end
	fAcces.close()
	return true
end

local function EcrireRegAdmins()
	local sLigne	=	""
	local fAdmins	=	nil
	local stAdmin
	local i
	fAdmins = fs.open(sAdmins,"w")
	fAdmins.writeLine("-- ID;CODE")
	for i,stAdmin in ipairs(tabstAdmins) do
		sLigne = stAdmin.nID..";"..stAdmin.sCode
		fAdmins.writeLine(sLigne)
		nInd = nInd+1
	end
	fAdmins.close()
	return true
end

-- Fonctions de recherche dans les registres

function RechercherPorte(stPorte,bIndividuel)
	local i
	local stPorteReg
	for i,stPorteReg in ipairs(tabstPortes) do
		if bIndividuel then
			if stPorteReg.nID == stPorte.nID or stPorteReg.sCode == stPorte.sCode then return i end
		else
			if stPorteReg.nID == stPorte.nID and stPorteReg.sCode == stPorte.sCode then return i end
		end
	end
	return 0
end

function RechercherJoueur(sJoueur)
	local i
	local sJouueurReg
	for i,sJouueurReg in ipairs(tabstJoueurs) do
		if sJouueurReg == sJoueur then return i end
	end
	return 0
end

function RechercherAcces(stAcces)
	local i
	local stAccesReg
	if RechercherPorte(stAcces.stPorte) == 0 then return 0 end
	if RechercherJoueur(stAcces.sJoueur) == 0 then return 0 end
	for i,stAccesReg in ipairs(tabstAcces) do
		if stAccesReg.stPorte.nID == stAcces.stPorte.nID and stAccesReg.stPorte.sCode == stAcces.stPorte.sCode and stAccesReg.sJoueur == stAcces.sJoueur then return i end
	end
	return 0
end

function RechercherAdmin(stAdmin)
	local i
	local stAdminReg
	for i,stAdminReg in ipairs(tabstAdmins) do
		if stAdminReg.nID == stAdmin.nID and stAdminReg.sCode == stAdmin.sCode then return i end
	end
	return 0
end

-- Fonctions d'ajout dans les registres

function AjouterPorte(stPorte)
	LireRegPortes()
	if RechercherPorte(stPorte,true) == 0 then
		table.insert(tabstPortes,stPorte)
		EcrireRegPortes()
		return true
	end
	return false
end

function AjouterJoueur(sJoueur)
	LireRegJoueurs()
	if RechercherJoueur(sJoueur) == 0 then
		table.insert(tabstJoueurs,sJoueur)
		EcrireRegJoueurs()
		return true
	end
	return false
end

function AjouterAcces(stAcces)
	LireRegJoueurs()
	if RechercherPorte(stAcces.stPorte,false) == 0 then return false end
	if RechercherJoueur(stAcces.sJoueur) == 0 then return false end
	if RechercherAcces(stAcces) == 0 then
		table.insert(tabstAcces,{stPorte = stAcces.stPorte,sJoueur = stAcces.sJoueur})
		EcrireRegAcces()
		return true
	end
	return false
end

-- Fonctions de suppression dans les registres

function SupprimerPorte(stPorte)
	local nInd
	LireRegPortes()
	nInd = RechercherPorte(stPorte)
	if nInd > 0 then
		table.remove(tabstPortes,nInd)
		EcrireRegPortes()
	end
end

function SupprimerJoueur(sJoueur)
	local nInd
	LireRegJoueurs()
	nInd = RechercherJoueur(sJoueur)
	if nInd > 0 then
		table.remove(tabstJoueurs,nInd)
		EcrireRegJoueurs()
	end
end

-- Fonctions diverses

function LireRegistres()
	LireRegPortes()
	LireRegJoueurs()
	LireRegAcces()
	LireRegAdmins()
end

function stabstPortes()
	return textutils.serialize(tabstPortes)
end

function stabstJoueurs()
	return textutils.serialize(tabstJoueurs)
end

return {LireRegistres = LireRegistres,stabstPortes = stabstPortes;stabstJoueurs = stabstJoueurs,RechercherPorte = RechercherPorte,RechercherJoueur = RechercherJoueur,RechercherAcces = RechercherAcces,RechercherAdmin = RechercherAdmin,AjouterPorte = AjouterPorte,AjouterJoueur = AjouterJoueur,AjouterAcces=AjouterAcces,SupprimerPorte = SupprimerPorte,SupprimerJoueur = SupprimerJoueur}