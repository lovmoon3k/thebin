import copy
import csv
import os
import sys
import time

BOARD_ROWS = 3
BOARD_COLUMNS = 3


def clear_console():
    os.system('clear')


def create_board(val):
    return [[val] * BOARD_COLUMNS] * BOARD_ROWS


def print_board(b):
    for row in b:
        r = "| "
        for cell in row:
            r += "* " if cell else "  "

        print(r + "|")


def run(generations, init_board):
    b = init_board

    for i in range(generations):
        print_board(b)

        time.sleep(0.1)
        clear_console()
        b = calculate_next_gen(b)


def how_name_neighbours(b, r, c):
    count = 0

    if r - 1 >= 0:
        if c-1 >= 0:
            count += 1 if b[r-1][c-1] else 0
        count += 1 if b[r-1][c] else 0
        if c + 1 < BOARD_COLUMNS:
            count += 1 if b[r-1][c+1] else 0

    if c - 1 >= 0:
        count += 1 if b[r][c-1] else 0
    if c + 1 < BOARD_COLUMNS:
        count += 1 if b[r][c + 1] else 0

    if r + 1 < BOARD_ROWS:
        if c - 1 >= 0:
            count += 1 if b[r+1][c-1] else 0
        count += 1 if b[r+1][c] else 0
        if c + 1 < BOARD_COLUMNS:
            count += 1 if b[r+1][c+1] else 0

    return count


def calculate_next_gen(b):
    new_board = copy.deepcopy(b)

    for r in range(len(b)):
        for c in range(len(b[r])):
            neighbours = how_name_neighbours(b, r, c)
            v = b[r][c]

            if c and neighbours in [0, 1]:
                v = False
            if c and neighbours in [2, 3]:
                v = True
            if c and neighbours > 3:
                v = False
            if not c and neighbours == 3:
                v = True

            new_board[r][c] = v

    return new_board


def generate_board_from_file(file_path):
    with open(file_path) as csv_file:
        read = csv.reader(csv_file)

        board = []
        for row in read:
            new_row = []
            for v in row:
                new_row.append(True if v == "1" else False)
            board.append(new_row)

        return board


if __name__ == '__main__':
    file_path = sys.argv[1]
    try:
        generations = int(sys.argv[2])
    except ValueError:
        generations = 30

    init_board = generate_board_from_file(file_path)
    run(generations, init_board)

