/* A binary tree node has data, pointer to left child
   and a pointer to right child
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
}; */


// Iterative Approach
// Inorder : L N R
class Solution {
  public:
    // Function to return a list containing the inorder traversal of the tree.
    vector<int> inOrder(Node* root) {
        // Your code here
        vector<int> tree;
        stack<Node*> stk;
        
        Node* curr = root;
        while(curr || !stk.empty()){
            while(curr){
                stk.push(curr);
                curr = curr->left;
            }
            curr = stk.top(); stk.pop();
            tree.push_back(curr->data);
            curr = curr->right;
        }
        return tree;
    }
};


/*
// Recursive:
// Inorder : L N R
class Solution {
  private:
    void inorder(vector<int> &tree, Node* curr){
        if(!curr) return;
        inorder(tree, curr->left);
        tree.push_back(curr->data);
        inorder(tree, curr->right);
    }
  public:
    // Function to return a list containing the inorder traversal of the tree.
    vector<int> inOrder(Node* root) {
        // Your code here
        vector<int> answer;
        inorder(answer, root);
        return answer;
    }
};
*/