#include <mpi.h>
#include <stdio.h>
#include <string>

int main(int argc, char** argv) {
    // Initialize the MPI environment
    MPI_Init(&argc, &argv);

    // Get the number of processes
    int world_size;
    MPI_Comm_size(MPI_COMM_WORLD, &world_size);

    // Get the rank of the process
    int world_rank;
    MPI_Comm_rank(MPI_COMM_WORLD, &world_rank);

    const int ITERATION_NUMBER = 1000;

    switch (world_rank) {
    case 0: {
        double time = MPI_Wtime();

     
        for (int i = 0; i < ITERATION_NUMBER; i++)
            MPI_Send(&i, 1, MPI_INT, 1, 0, MPI_COMM_WORLD);
        time = MPI_Wtime() - time;
        printf("Send: %.10f\n", time / ITERATION_NUMBER * 1E6);


        MPI_Request requests[ITERATION_NUMBER];
        MPI_Status statuses[ITERATION_NUMBER];
        time = MPI_Wtime();
        for (int i = 0; i < ITERATION_NUMBER; i++)
            MPI_Isend(&i, 1, MPI_INT, 1, 0, MPI_COMM_WORLD, &requests[i]);
        MPI_Waitall(ITERATION_NUMBER, requests, statuses);
        time = MPI_Wtime() - time;
        printf("Isend: %.10f\n", time / ITERATION_NUMBER * 1E6);

        
    

        break;
    }
    case 1: {
        MPI_Status status;
        int rec;
        for (int i = 0; i < ITERATION_NUMBER; i++) {
            MPI_Recv(&rec, 1, MPI_INT, 0, 0, MPI_COMM_WORLD, &status);
        }
        break;
    }
    default: {
        break;
    }
    }

    // Finalize the MPI environment.
    MPI_Finalize();
}