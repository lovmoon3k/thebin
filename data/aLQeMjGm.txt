#include <bits/stdc++.h>
#include <iomanip>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace std;
using namespace __gnu_pbds;
template<class T> using ordered_set =tree<T, null_type, less_equal<T>, rb_tree_tag,tree_order_statistics_node_update> ;
template <typename T = int>ostream &operator<<(ostream &out, const vector<T> &v){for (const T &x : v)    out << x << ' ';return out;}
template <typename T = int>istream &operator>>(istream &in, vector<T> &v){for (auto &x : v) in >> x;return in;}
using namespace __gnu_pbds;
#define getline(s) getline(cin >> ws ,s)
#define ll long long
#define sz(s)   (int)(s.size())
const int M = 2 * 1e5 + 5;
#define HABIBA ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
#define PI 3.14159
#define pi 3.141592653589793
#define ull unsigned long long
#define all(s) s.begin(), s.end()
#define PB push_back
#define Mod  1'000'000'007
#define to_binary(bin) stoll(bin, nullptr, 10)
#define ceill(n, m) (((n) / (m)) + ((n) % (m) ? 1 : 0))
#define cin(v) for(auto &i: v)  cin>>i
#define cout(v) for(auto &i: v) cout << i << " ";
#define Ndigits(n) ((int)log10(n) + 1)
#define unq(VEC) sort(all(VEC)); VEC.resize(unique(all(VEC)) - VEC.begin());
using namespace std;
#define Num_of_Digits(n) ((int)log10(n) + 1)
#define cin_2d(vec, n, m)                               \
    for (int i = 0; i < n; i++)                         \
        for (int j = 0; j < m && cin >> vec[i][j]; j++) \
            ;
#define cout_2d(vec, n, m)                                      \
    for (int i = 0; i < n; i++, cout << "\n")                   \
        for (int j = 0; j < m && cout << vec[i][j] << " "; j++) \
//freopen("input.txt", "r", stdin), freopen("output.txt", "w", stdout);
 
 
int main() {
    HABIBA
    ll n , z;           
    cin >> n >> z;
    vector < ll > vec(n) , res;
    vector < bool > visited(n , false);
    for(int i = 0; i < z; i++)
    { 
        cin >> vec[i];
    }
    // cout << vec;
    for (int i = 0; i < n; i++)
    {
        ll test = vec[i] , hbd = vec[i];
         while(hbd != n and hbd != 0)
         {
            if(visited[hbd] == 0)
            {
            res.push_back(test) 
            ,visited[hbd] = true;
            }
             hbd++;
         }
        if(hbd == n)
        {
            if(visited[hbd] == 0)
            {
            res.push_back(test) 
            ,visited[hbd] = true;
            }

        }    
        
    }
    sort(all(res));
    cout << res;
    
        



    
     
 
 
 
 
 
 
 
    return 0;
}
 
 
 
 
 
 
 
 
 
 