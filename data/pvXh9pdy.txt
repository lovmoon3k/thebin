#include <cstdlib>
#include <cstring>

class String{
    public:
        String();
        String(char);
        String(const char *); 
        String(const String &);
        void assign(const String &arg);
        void append(const String &arg);
        const char* get() const;
        int compare(const String &arg) const;
        ~String();
    private:
        char *s;
};

String::String(){
    s = static_cast<char*>(calloc(1, sizeof (char)));
}

String::String(char arg){
    s = static_cast<char*>(calloc(2, sizeof (char)));
    *s = arg;
    *(s+1) = 0;
}

String::String(const String &arg){
    free(s);
    s = static_cast<char*>(malloc(strlen(arg.get()) + 1));
    strcpy(s, arg.get());
}
String::~String(){
    free(s);
}
String::String(const char *arg){
    s = static_cast<char*>(malloc(strlen(arg) + 1));
    strcpy(s, arg);
}
const char *
String::get() const{
    return s;
}

void
String::append(const String &arg){
    s = static_cast<char*>(realloc(s, strlen(s) + strlen(arg.get()) + 1));
    strcat(s, arg.get());
    return;
}
void
String::assign(const String &arg){
    free(s);
    s = static_cast<char*>(malloc(strlen(arg.get()) + 1));
    strcpy(s, arg.get());
    return;
}

int
String::compare(const String &arg) const{
    return strcmp(s, arg.get());
}


int 
main(void){
	String a("asd");
	return 0;}