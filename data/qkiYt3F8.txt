#pragma once

#include <iostream>

namespace praktikum {

template <typename Iterator>
class IteratorRange {
public:
    explicit IteratorRange(const Iterator& begin, const Iterator& end)
        : begin_(begin), end_(end), size_(std::distance(begin, end)) {}

public:
    inline Iterator begin() const {
        return begin_;
    }

    inline Iterator end() const {
        return end_;
    }

    inline auto size() const {
        return size_;
    }

private:
    const Iterator begin_;
    const Iterator end_;
    const ptrdiff_t size_;
};

template <typename Iterator>
std::ostream& operator<<(std::ostream& out, const IteratorRange<Iterator>& range) {
    for (const auto& value : range) {
        out << value;
    }

    return out;
}

template <typename Iterator>
class Paginator {
public:
    Paginator() = default;

public:
    inline auto begin() const {
        return std::begin(pages_);
    }

    inline auto end() const {
        return std::end(pages_);
    }

    inline auto IsInitialized() {
        return is_initialized_;
    }

public:
    // Using Praktikum code for Paginator because my way was too complex
    void Init(Iterator begin, Iterator end, ptrdiff_t page_size) noexcept {
        for (ptrdiff_t remained_distance = std::distance(begin, end); remained_distance > 0;) {
            const ptrdiff_t final_page_size = std::min(remained_distance, page_size);
            const Iterator page_end = std::next(begin, final_page_size);

            pages_.emplace_back(IteratorRange<Iterator>{begin, page_end});

            remained_distance -= final_page_size;
            begin = page_end;
        }
        is_initialized_ = true;
    }

private:
    bool is_initialized_ = false;
    std::vector<IteratorRange<Iterator>> pages_;
};

template <typename Container>
inline auto Paginate(const Container& containter, ptrdiff_t page_size) {
    Paginator<decltype(std::begin(containter))> paginator;

    paginator.Init(std::begin(containter), std::end(containter), page_size);

    return paginator;
}

} // namespace praktikum