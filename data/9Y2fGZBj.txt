#include <bits/stdc++.h>
// tiom4eg's precompiler options
// POGGERS POGGERS POGGERS POGGERS POGGERS POGGERS POGGERS
// IO settings
#define fastIO ios_base::sync_with_stdio(false); cin.tie(0)
// Quick types
#define ll long long
#define ld long double
#define ull unsigned long long
#define pii pair <int, int>
#define vi vector <int>
#define mi vector <vector <int>>
// Quick functions
#define endl "\n"
#define F first
#define S second
#define all(a) a.begin(), a.end()
#define sz(a) (int)(a.size())
#define pb push_back
#define mp make_pair
// Quick fors
#define FOR(i, a, b) for (int i = a; i < b; ++i)
#define FORS(i, a, b, c) for (int i = a; i < b; i += c)
#define RFOR(i, a, b) for (int i = a; i >= b; --i)
#define EACH(e, a) for (auto& e : a)
// Pragmas
#ifndef TIOM4EG
#pragma GCC optimize("O3") // let the chaos begin!
#pragma GCC target("avx,avx2,bmi,bmi2,popcnt,lzcnt,tune=native")
#pragma GCC comment(linker, "/stack:200000000")
#endif
// PBDS
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ordered_set tree <int, null_type, less <int>, rb_tree_tag, tree_order_statistics_node_update>
#define ook order_of_key
#define fbo find_by_order
using namespace __gnu_pbds;
// POGGERS POGGERS POGGERS POGGERS POGGERS POGGERS POGGERS
using namespace std;
mt19937 rng(chrono::duration_cast<chrono::milliseconds>(chrono::system_clock::now().time_since_epoch()).count());
#define int long long
const int INF = 1e9 + 7, MD = 998244353, MAX = 100005, R = 1 << 18, MOD = 1e9 + 7, MOD2 = 1e9 + 9, MOD12 = MOD * MOD, MOD22 = MOD2 * MOD2, LG = 20, B1 = 300007, B2 = 107, B = 320;
const ll INFLL = 1e18 + 7;

vector <array <int, 3>> g[MAX];

array <int, 2> dfs(int v, int p) {
    int ans0 = 0, mx1 = 0, mx2 = 0, mx1d = 0;
    EACH(e, g[v]) if (e[0] != p) {
        auto cur = dfs(e[0], v);
        if (e[2]) {
            if (cur[1] + e[1] > mx1) mx2 = mx1, mx1 = cur[1] + e[1], mx1d = cur[1];
            else if (cur[1] + e[1] > mx2) mx2 = cur[1] + e[1];
        }
        else ans0 = max(ans0, min(cur[0], cur[1] + e[1]));
    }
    return {max(ans0, mx1), max(ans0, max(mx1d, mx2))};
}

signed main() {
    fastIO;
    int n; cin >> n;
    FOR(i, 1, n) {
        int u, v, w; cin >> u >> v >> w, --u, --v;
        g[u].pb({v, w, 1}), g[v].pb({u, w, 0});
    }
    cout << dfs(0, 0)[1];
}
