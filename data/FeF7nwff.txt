from random import randint


class House:
    """
    Класс описывающий жилой дом (квартиру)

    Attributes:
        __nightstand (int): Общий бюджет семьи. По умолчанию - 100
        refrigerator (int): кол-во еды в холодильнике. По умолчанию - 50
        cat_feeder (int): кол-во еды в кормушке для кота. По умолчанию - 30
        house_filth (int): кол-во грязи в доме. По умолчанию - 0
    """
    def __init__(self):
        self.__nightstand = 100
        self.refrigerator = 50
        self.cat_feeder = 30
        self.house_filth = 0

    def get_money(self):
        """
        Геттер возвращающий кол-во денег в тумбочке
        
        @return: __money_in_nightstand
        @rtype: int
        """
        return self.__nightstand

    def take_money(self, money):
        """
        Функция позволяющая взять указанное кол-во денег в тумбочку

        @param money: Кол-во денег
        @type: int
        """
        self.__nightstand -= money
        return money

    def put_money(self, money):
        """
        Функция позволяющая положить указанное кол-во денег из тумбочки

        @param money: Кол-во денег
        @type: int
        """
        self.__nightstand += money


class Human:
    """
    Базовый класс, описывающий человека

    Args:
        name (str): передается имя человека
        age (int): передается возраст человека
        house (class): передается объект, в котором живет человек

    Attributes:
        __satiety (int): степень сытости, по умолчанию 30
        happiness (int): уровень счастья, по умолчанию 100
    """
    def __init__(self, name, age, house: "House"):
        self.name = name
        self.age = age
        self.house = house
        self.__satiety = 30
        self.happiness = 100

    def __str__(self):
        """
        Возвращает строку с именем и возрастом человека.

        @return: self.name, self.age
        @rtype: str
        """
        return f'{self.name}, {self.age} {self.set_declension(self.age, "возраст")}.'

    def set_declension(self, number, letter):
        """
        Сеттер возвращающий корректное склонение

        @return: корректное склонение
        @rtype: str
        """
        if number % 10 == 1 and self.age != 11:
            declension = 'тугрик' if letter[0] == 'т' else 'год'
        elif number % 10 in range(2, 5) and self.age not in range(11, 15):
            declension = 'тугрика' if letter[0] == 'т' else 'года'
        else:
            declension = 'тугриков' if letter[0] == 'т' else 'лет'
        return declension

    def get_satiety(self):
        """
        Сеттер возвращающие уровень сытости

        @return: __satiety
        @rtype: int
        """
        return self.__satiety

    def eating(self, food):
        """Функция реализующая прием пищи."""
        self.house.refrigerator -= food
        self.__satiety += food

    def pet_a_cat(self):
        """Функция поглаживаний кота"""
        self.happiness += 5
        print(f'{self.name} погладил кота.')


class Husband(Human):
    """
    Класс Муж. Родитель Human

    Args:
        name (str): передается имя человека
        age (int): передается возраст человека
        house (class): передается объект, в котором живет человек

    Attributes:
        __satiety (int): степень сытости, по умолчанию 30
        happiness (int): уровень счастья, по умолчанию 100
        __money (float): Заработанные деньги
    """
    def __init__(self, name, age, house):
        super(Husband, self).__init__(name, age, house)
        self.__money = 0

    def to_work(self):
        """Функция похода на работу. Повышает значение money."""
        self.__money += randint(150, 160)
        self.__satiety -= 10
        self.happiness -= randint(5, 10)
        print(f'{self.name} пошел на работу.')

    def to_home(self):
        """Функция возвращения домой с работы. Большая часть заработка кладется в тумбочку."""
        money = 150
        self.__money -= money
        self.house.put_money(money)
        self.__satiety -= 10
        print(f'{self.name} пришел с работы и положил в тумбочку 150 тугриков.')

    def to_play(self):
        """Функция развлечений. Повышает уровень счастья."""
        self.__satiety -= 10
        self.happiness += 20


class Wife(Human):
    """
    Класс Жена. Родитель Human

    Args:
        name (str): передается имя человека
        age (int): передается возраст человека
        house (class): передается объект, в котором живет человек

    Attributes:
        __satiety (int): степень сытости, по умолчанию 30
        happiness (int): уровень счастья, по умолчанию 100
        __money (float): заработанные деньги
        __purchases (int): покупки в магазине
    """
    def __init__(self, name, age, house):
        super(Wife, self).__init__(name, age, house)
        self.__money = 0
        self.fur_coat = 0
        self.__purchases = {'Food': 0, 'Cat food': 0}

    def buy_food(self, money):
        """
        Функция описывающая покупку еды для семьи

        @param money: Кол-во денег
        @type: int
        """
        money_in_nightstand = self.house.get_money()
        if money_in_nightstand > money:
            self.__money = self.house.take_money(money)
            self.house.refrigerator += money
        self.__satiety -= 10
        print(f'{self.name} купила еды на {self.__money} {self.set_declension(self.__money, "тугрик")}')

    def buy_cat_food(self, money):
        """
        Функция описывающая покупку кошачьего корма

        @param money: Кол-во денег
        @type: int
        """
        self.__money = self.house.take_money(money)
        self.house.refrigerator += money
        self.__satiety -= 10
        print(f'{self.name} купила кошачьего корма на {self.__money} {self.set_declension(self.__money, "тугрик")}')

    def buy_fur_coat(self):
        """Функция описывающая покупку шубы"""
        self.__money = self.house.take_money(-350)
        self.fur_coat += 1
        self.__satiety -= 10
        self.happiness += 60
        print(f'{self.name} купила шубу.')

    def cleanup_house(self):
        """Функция описывающая уборку дома."""
        filth = self.house.house_filth
        self.house.house_filth -= filth
        print(f'{self.name} провела уборку дома и вынесла мусора: {filth}.')


class Child(Human):
    """
    Класс Ребенок. Родитель Human

    Args:
        name (str): передается имя человека
        age (int): передается возраст человека
        house (class): передается объект, в котором живет человек

    Attributes:
        max_fatigue (int): максимальный уровень усталости
        __satiety (int): степень сытости, по умолчанию 30
        happiness (int): уровень счастья, по умолчанию 100
        fatigue (int): уровень усталости, по умолчанию 0
    """
    max_fatigue = 30

    def __init__(self, name, age, house):
        super(Child, self).__init__(name, age, house)
        self.fatigue = 0

    def set_sleep(self):
        """Сеттер переводящий ребенка в сон"""
        self.__satiety -= 10
        self.happiness += 5
        print(f'{self.name} спит…')

    def set_play(self):
        """Сеттер описывающий игру ребенка"""
        self.__satiety -= 10
        self.fatigue += 5
        self.happiness += 5
        print(f'{self.name} спит…')

    def set_cry(self):
        """Сеттер описывающий плач ребенка и его причины"""
        if self.fatigue < 10:
            self.__satiety -= 10
            self.fatigue += 10
            self.happiness -= 10
            print(f'{self.name} плачет, он голоден…')
        else:
            if self.age < 2:
                self.__satiety -= 10
                self.fatigue += 10
                self.happiness -= 10
                print(f'{self.name} плачет, надо сменить подгузник…')
            else:
                self.__satiety -= 10
                self.fatigue += 10
                self.happiness -= 10
                print(f'{self.name} плачет, он ушибся…')


class Cat:
    """
    Класс описывающий кота

    Args:
        name (str): Передается имя кота
        house (class): Передается дом, в котором живет кот
    Attributes:
        satiety (int): Сытость кота. По умолчанию - 30
    """
    def __init__(self, name, house: "House"):
        self.name = name
        self.house = house
        self.satiety = 30

    def __str__(self):
        """
        Функция возвращает описание кота

        @return name: name, satiety
        @rtype: str
        """
        return f'Кот {self.name}. {"Сыт, готов играть." if self.satiety >= 20 else "Голоден."}'

    def eating(self, cat_food):
        """
        Функция описывающая прием пищи котом

        @param cat_food:
        """
        self.house.cat_feeder -= cat_food
        self.satiety += cat_food * 2
        print(f'Кот {self.name} съел {cat_food} корма.')

    def tear_wallpaper(self):
        """Функция реализующая как кот дерет обои."""
        self.satiety -= 10
        self.house.house_filth += 5
        print(f'Кот {self.name} дерет обои…')

    def set_sleep(self):
        """Сеттер переводящий объект в сон"""
        self.satiety -= 10
        print(f'Кот {self.name} спит…')
