using System;
using System.Collections;
using System.Collections.Generic;
using Agava.YandexGames;
using UnityEngine;

public class LeaderBoard : MonoBehaviour
{
    private const string WavesLeaderBoard = "WavesLeaderBoard";
    [SerializeField] private WaveStarter _waveCounter;
    [SerializeField] private LeaderBoardPlayerInfo _playerInfoPrefab;
    [SerializeField] private Transform _contend;
    [SerializeField] private CanvasGroup _leaderBoardButton;
    [SerializeField] private Transform _leaderBoard;
    [SerializeField] private GameObject _authorizationButton;

    private void OnEnable()
    {
        _waveCounter.WaveComplite += SetScore;
    }

    private void OnDisable()
    {
        _waveCounter.WaveComplite -= SetScore;
    }

    public void Show()
    {
        _leaderBoard.gameObject.SetActive(true);
        ClearContend();

        _leaderBoardButton.interactable = false;

#if !UNITY_EDITOR
        if (PlayerAccount.IsAuthorized)
        {
            if (PlayerAccount.HasPersonalProfileDataPermission)
            {
                Leaderboard.SetScore(WavesLeaderBoard, _waveCounter.CountCompleatedWase);
            }

            Leaderboard.GetEntries(WavesLeaderBoard, (result) =>
            {
                foreach (var entrie in result.entries)
                {
                    LeaderBoardPlayerInfo playerInfo = Instantiate(_playerInfoPrefab, _contend);
                    string name = entrie.player.publicName;
                    if (string.IsNullOrEmpty(name))
                        name = "Anonym";
                    playerInfo.SetInfo(name, entrie.score.ToString());
                }
            });
        }
        else
        {
            ClearContend();
            LeaderBoardPlayerInfo playerInfo = Instantiate(_playerInfoPrefab, _contend);
            _authorizationButton.SetActive(true);
        }
#endif

    }

    private void SetScore()
    {
#if !UNITY_EDITOR
        if (PlayerAccount.IsAuthorized)
        {
            if (PlayerAccount.HasPersonalProfileDataPermission)
            {
                Leaderboard.SetScore(WavesLeaderBoard, _waveCounter.CountCompleatedWase);
            }
        }
#endif
    }

    public void OnClosetButtonClick()
    {
        _leaderBoardButton.interactable = true;
        _leaderBoard.gameObject.SetActive(false);
    }

    private void ClearContend()
    {
        if (_contend.childCount > 0)
        {
            foreach (Transform child in _contend)
            {
                Destroy(child.gameObject);
            }
        }
    }
}