#pragma once

namespace Whois
{
	class EventListener;
	class LineEventListener;
	class Context;
}

enum
{
	RPL_WHOISCOUNTRY = 344,
	RPL_WHOISGATEWAY = 350,
	RPL_CHANNELSMSG = 651,

	RPL_WHOISACCOUNT = 330,

	RPL_WHOISCERTFP = 276,

	RPL_WHOISACTUALLY = 338,

	RPL_WHOISUSER = 311,
	RPL_WHOISSERVER = 312,
	RPL_WHOISOPERATOR = 313,
	RPL_WHOISIDLE = 317,
	RPL_ENDOFWHOIS = 318,
	RPL_WHOISCHANNELS = 319,

	RPL_WHOISREGNICK = 307,
	RPL_WHOISHELPOP = 310,
	RPL_WHOISSPECIAL = 320,
	RPL_WHOISBOT = 335,
	RPL_WHOISMODES = 379,
	RPL_WHOISSECURE = 671
};

class Whois::EventListener
	: public Events::ModuleEventListener
{
public:
	EventListener(Module* mod)
		: ModuleEventListener(mod, "event/whois")
	{
	}

	virtual void OnWhois(Context& whois) = 0;
};

class Whois::LineEventListener
	: public Events::ModuleEventListener
{
public:
	LineEventListener(Module* mod)
		: ModuleEventListener(mod, "event/whoisline")
	{
	}
	virtual ModResult OnWhoisLine(Context& whois, Numeric::Numeric& numeric) = 0;
};
class Whois::Context
{
protected:
	LocalUser* const source;
	User* const target;
public:
	Context(LocalUser* sourceuser, User* targetuser)
		: source(sourceuser)
		, target(targetuser)
	{
	}
	bool IsSelfWhois() const { return (source == target); }

	LocalUser* GetSource() const { return source; }

	User* GetTarget() const { return target; }

	template <typename... dan>
	void SendLine(unsigned int numeric, dan&&... p)
	{
		Numeric::Numeric n(numeric);
		n.push(target->nick); /** Whois normal */
    /** n.push(source->nick); - Indiferent de persoana pe care se da whois, se afiseaza whois-ul celui care da comanda /whois */
		n.push(std::forward<dan>(p)...);
		SendLine(n);
	}

	virtual void SendLine(Numeric::Numeric& numeric) = 0;
};