package search;

public class BinarySearchUni {
    /*
        Pred: 0 <= l < r <= arr.length && (exists x :
            (for all 'i' in (l, x) : arr[i - 1] < arr[i])
            && (for all 'i' in (x, r) : arr[i - 1] > arr[i])
        )
        Post: l <= R < r && (for all 'i' in (l, R] : arr[i - 1] < arr[i])
            && (for all 'i' in (R, r) : arr[i - 1] > arr[i])
        )
    */
    private static int recursiveBinSearch(int[] arr, int l, int r) {
        // l' = l, r' = r
        /*
            {Pred} --> l <= l' < r' <= r && (exists x :
                (for all 'i' in (l, x) : arr[i - 1] < arr[i])
                && (for all 'i' in (x, r) : arr[i - 1] > arr[i])
            )
        */
        if (l + 1 >= r) {
            /*
                l <= l' < l' + 1 == r' <= r && (exists x :
                    (for all 'i' in (l, x) : arr[i - 1] < arr[i])
                    && (for all 'i' in (x, r) : arr[i - 1] > arr[i])
                )
            */
            /*
                --> l <= l' < r &&
                && (for all 'i' in (l, l'] : arr[i - 1] < arr[i])
                && (for all 'i' in (l', r) : arr[i - 1] > arr[i])
            */
            // --> {Post}
            return l;
        }
        /*
            l <= l' < l' + 1 < r' <= r && (exists x :
                (for all 'i' in (l, x) : arr[i - 1] < arr[i])
                && (for all 'i' in (x, r) : arr[i - 1] > arr[i])
            )
        */
        int m = (l + r) / 2;
        /*
            l <= l' < l' + 1 <= m' < r' <= r && (exists x :
                (for all 'i' in (l, x) : arr[i - 1] < arr[i])
                && (for all 'i' in (x, r) : arr[i - 1] > arr[i])
            )
        */
        if (arr[m - 1] < arr[m] && (m == r - 1 || arr[m] < arr[m + 1])) {
            /*
                l <= l' < l' + 1 <= m' < r' <= r && (exists x :
                    (for all 'i' in (m', x) : arr[i - 1] < arr[i])
                    && (for all 'i' in (x, r) : arr[i - 1] > arr[i])
                ) && (for all 'i' in (l, m'] : arr[i - 1] < arr[i]) --> {Pred}
            */
            return recursiveBinSearch(arr, m, r); // {Post} --> {Post}
        } else if (arr[m - 1] > arr[m] && (m == r - 1 || arr[m] > arr[m + 1])) {
            /*
                l <= l' < l' + 1 <= m' < r' <= r && (exists x :
                    (for all 'i' in (l, x) : arr[i - 1] < arr[i])
                    && (for all 'i' in (x, m') : arr[i - 1] > arr[i])
                ) && (for all 'i' in [m', r) : arr[i - 1] > arr[i]) --> {Pred}
            */
            return recursiveBinSearch(arr, l, m); // {Post} --> {Post}
        } else {
            /*
                --> l <= m' < r && (for all 'i' in (l, m'] : arr[i - 1] < arr[i])
                && (for all 'i' in (m', r) : arr[i - 1] > arr[i]) --> {Post}
            */
            return m;
        }
    }

    /*
        Pred: 0 <= l < r <= arr.length && (exists x :
            (for all 'i' in (l, x) : arr[i - 1] < arr[i])
            && (for all 'i' in (x, r) : arr[i - 1] > arr[i])
        )
        Post: l <= R < r && (for all 'i' in (l, R] : arr[i - 1] < arr[i])
            && (for all 'i' in (R, r) : arr[i - 1] > arr[i])
        )
    */
    private static int iterativeBinSearch(int[] arr, int l, int r) {
        // l' = l, r' = r
        /*
            {Pred} --> l <= l' < r' <= r && (exists x :
                (for all 'i' in (l, x) : arr[i - 1] < arr[i])
                && (for all 'i' in (x, r) : arr[i - 1] > arr[i])
            )
        */
        while (l + 1 < r) {
            /*
                l <= l' < l' + 1 < r' <= r && (exists x :
                    (for all 'i' in (l, x) : arr[i - 1] < arr[i])
                    && (for all 'i' in (x, r) : arr[i - 1] > arr[i])
                )
            */
            int m = (l + r) / 2;
            /*
                l <= l' < l' + 1 <= m' < r' <= r && (exists x :
                    (for all 'i' in (l, x) : arr[i - 1] < arr[i])
                    && (for all 'i' in (x, r) : arr[i - 1] > arr[i])
                )
            */
            if (arr[m - 1] < arr[m] && (m == arr.length - 1 || arr[m] < arr[m + 1])) {
                /*
                    l <= l' < l' + 1 <= m' < r' <= r && (exists x :
                        (for all 'i' in (l, x) : arr[i - 1] < arr[i])
                        && (for all 'i' in (x, r) : arr[i - 1] > arr[i])
                    ) && (for all 'i' in (l, m'] : arr[i - 1] < arr[i])
                */
                l = m;
                /*
                    l <= l' < r' <= r && (exists x :
                        (for all 'i' in (l, x) : arr[i - 1] < arr[i])
                        && (for all 'i' in (x, r) : arr[i - 1] > arr[i])
                    ) && (for all 'i' in (l, l'] : arr[i - 1] < arr[i])
                */
            } else if (arr[m - 1] > arr[m] && (m == arr.length - 1 || arr[m] > arr[m + 1])) {
                /*
                    l <= l' < l' + 1 <= m' < r' <= r && (exists x :
                        (for all 'i' in (l, x) : arr[i - 1] < arr[i])
                        && (for all 'i' in (x, r) : arr[i - 1] > arr[i])
                    ) && (for all 'i' in [m', r) : arr[i - 1] > arr[i])
                */
                r = m;
                /*
                    l <= l' < r' <= r && (exists x :
                        (for all 'i' in (l, x) : arr[i - 1] < arr[i])
                        && (for all 'i' in (x, r) : arr[i - 1] > arr[i])
                    ) && (for all 'i' in [r', r) : arr[i - 1] > arr[i])
                */
            } else {
                /*
                    l <= m' < r && (for all 'i' in (l, m'] : arr[i - 1] < arr[i])
                    && (for all 'i' in (m', r) : arr[i - 1] > arr[i]) --> {Post}
                */
                return m;
            }
            /*
                l <= l' < r' <= r && (exists x :
                    (for all 'i' in (l, x) : arr[i - 1] < arr[i])
                    && (for all 'i' in (x, r) : arr[i - 1] > arr[i])
                ) && (for all 'i' in (l, l'] : arr[i - 1] < arr[i])
                && (for all 'i' in [r', r) : arr[i - 1] > arr[i])
            */
        }
        /*
            l <= l' < l' + 1 == r' <= r &&
            && (for all 'i' in (l, l'] : arr[i - 1] < arr[i])
            && (for all 'i' in [r', r) : arr[i - 1] > arr[i])
        */
        /*
            --> l <= l' < r &&
            && (for all 'i' in (l, l'] : arr[i - 1] < arr[i])
            && (for all 'i' in (l', r) : arr[i - 1] > arr[i])
        */
        // --> {Post}
        return l;
    }

    /*
        Pred: (for all 'i' in (0, args.length) : Integer.parseInt(args[i]) is executed without exceptions)
            && (exists x :
                (for all 'i' in (0, x) : Integer.parseInt(args[i - 1]) < Integer.parseInt(args[i]))
                && (for all 'i' in (x, args.length) : Integer.parseInt(args[i - 1]) > Integer.parseInt(args[i]))
            )
        Post (System.out): 0 <= R < args.length
            && (for all 'i' in (l, R] : Integer.parseInt(args[i - 1]) < Integer.parseInt(args[i]))
            && (for all 'i' in (R, r) : Integer.parseInt(args[i - 1]) > Integer.parseInt(args[i]))
    */
    public static void main(String[] args) {
        /*
            (for all 'i' in (0, args.length) : Integer.parseInt(args[i]) is executed without exceptions)
            && (exists x :
                (for all 'i' in (0, x) : Integer.parseInt(args[i - 1]) < Integer.parseInt(args[i]))
                && (for all 'i' in (x, args.length) : Integer.parseInt(args[i - 1]) > Integer.parseInt(args[i]))
            )
        */
        int[] arr = new int[args.length];
        /*
            (for all 'i' in (0, args.length) : Integer.parseInt(args[i]) is executed without exceptions)
            && (exists x :
                (for all 'i' in (0, x) : Integer.parseInt(args[i - 1]) < Integer.parseInt(args[i]))
                && (for all 'i' in (x, args.length) : Integer.parseInt(args[i - 1]) > Integer.parseInt(args[i]))
            ) && arr.length == args.length && (for all 'i' in [0, 0] : arr[i] = Integer.parseInt(args[i]))
        */
        boolean evenness = true;
        for (int idx = 0; idx < args.length; idx++) {
            /*
                (for all 'i' in (0, args.length) : Integer.parseInt(args[i]) is executed without exceptions)
                && (exists x :
                    (for all 'i' in (0, x) : Integer.parseInt(args[i - 1]) < Integer.parseInt(args[i]))
                    && (for all 'i' in (x, args.length) : Integer.parseInt(args[i - 1]) > Integer.parseInt(args[i]))
                ) && arr.length == args.length && (for all 'i' in [0, idx) : arr[i] = Integer.parseInt(args[i]))
                && idx < args.length
            */
            arr[idx] = Integer.parseInt(args[idx]);
            /*
                (exists x :
                    (for all 'i' in (0, x) : Integer.parseInt(args[i - 1]) < Integer.parseInt(args[i]))
                    && (for all 'i' in (x, args.length) : Integer.parseInt(args[i - 1]) > Integer.parseInt(args[i]))
                ) && arr.length == args.length && (for all 'i' in [0, idx] : arr[i] = Integer.parseInt(args[i]))
                && idx < args.length
            */
            if (arr[idx] % 2 == 1) {
                evenness = !evenness;
            }
            /*
                (exists x :
                    (for all 'i' in (0, x) : Integer.parseInt(args[i - 1]) < Integer.parseInt(args[i]))
                    && (for all 'i' in (x, args.length) : Integer.parseInt(args[i - 1]) > Integer.parseInt(args[i]))
                ) && arr.length == args.length && (for all 'i' in [0, idx] : arr[i] = Integer.parseInt(args[i]))
                && idx < args.length
            */
        }
        /*
            idx >= args.length && arr.length == args.length
            && (exists x :
                (for all 'i' in (0, x) : Integer.parseInt(args[i - 1]) < Integer.parseInt(args[i]))
                && (for all 'i' in (x, args.length) : Integer.parseInt(args[i - 1]) > Integer.parseInt(args[i]))
            ) && (for all 'i' in [0, arr.length) : arr[i] = Integer.parseInt(args[i]))
        */
        /*
            --> && (exists x :
                (for all 'i' in (l, x) : arr[i - 1] < arr[i])
                && (for all 'i' in (x, r) : arr[i - 1] > arr[i])
            ) && arr.length == args.length
        */
        int res;
        /*
            (exists x :
                (for all 'i' in (l, x) : arr[i - 1] < arr[i])
                && (for all 'i' in (x, r) : arr[i - 1] > arr[i])
            ) && arr.length == args.length && res' == 0
        */
        if (evenness) {
            /*
                (exists x :
                    (for all 'i' in (l, x) : arr[i - 1] < arr[i])
                    && (for all 'i' in (x, r) : arr[i - 1] > arr[i])
                ) && arr.length == args.length
            */
            res = recursiveBinSearch(arr, 0, arr.length);
            /*
                0 <= res' < arr.length && arr.length == args.length
                && (for all 'i' in (l, res'] : arr[i - 1]) < arr[i])
                && (for all 'i' in (res', r) : arr[i - 1] > arr[i])
            */
        } else {
            /*
                (exists x :
                    (for all 'i' in (l, x) : arr[i - 1] < arr[i])
                    && (for all 'i' in (x, r) : arr[i - 1] > arr[i])
                ) && arr.length == args.length
            */
            res = iterativeBinSearch(arr, 0, arr.length);
            /*
                0 <= res' < arr.length && arr.length == args.length
                && (for all 'i' in (l, res'] : arr[i - 1]) < arr[i])
                && (for all 'i' in (res', r) : arr[i - 1] > arr[i])
            */
        }
        /*
            0 <= res' < arr.length && arr.length == args.length
            && (for all 'i' in (l, res'] : arr[i - 1] < arr[i])
            && (for all 'i' in (res', r) : arr[i - 1] > arr[i])
        */
        // --> {Post}
        System.out.println(res);
    }
}
