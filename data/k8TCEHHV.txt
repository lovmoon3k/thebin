import java.io.FileDescriptor;
import java.io.FileOutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.Scanner;

public class Main {

    private static final int ROCK = 0;
    private static final int PAPER = 1;
    private static final int SCISSORS = 2;

    public static void main(String[] args) {
        try {
            System.setOut(new PrintStream(new FileOutputStream(FileDescriptor.out), true, "UTF-8"));
        } catch (UnsupportedEncodingException e) {
            throw new InternalError("VM does not support mandatory encoding UTF-8");
        }

        System.out.println("Kő papír olló!");

        Scanner sc = new Scanner( System.in);
        int getKor = 0;
        String getKorStr = "";
        do {
            System.out.print( "Add meg 1-10-ig, hogy hány kört szeretnél játszani: ");
            getKorStr = sc.nextLine();
            System.out.println( "körök száma : "+ getKorStr);
            if (getKorStr.length()>0){
                getKor = Integer.parseInt(getKorStr);
                if (getKor<1) System.out.println( getKorStr+ " kisebb mint 1");
                if (getKor>10) System.out.println( getKorStr+ " nagyobb mint 10");
            }
        } while (getKor<1 || getKor>10 || getKorStr.length()==0);

        int[] gep = new int[ 10];
        int[] user= new int[ 10];
        int[] eredmeny= new int[10];

        for (int i=0; i<10; i++) {
            double d = Math.random();
            if (d < 1/3) gep[ i] = ROCK;
            else if (d < 2/3) gep[ i] = PAPER;
            else gep[ i]= SCISSORS;
        }

        for (int kor = 0; kor< getKor; kor++){
            System.out.println( (kor+ 1) +". kör");
            System.out.print( "Üsd be hogy mit választasz és nyomj entert. (K-Kő, P-Papír, O-Olló) : ");
            String userStr = sc.nextLine();
            userStr = userStr.toUpperCase();
            if (userStr.length() == 1) {
                if (userStr.equals("K")) user[kor] = ROCK;
                else if (userStr.equals("P")) user[kor] = PAPER;
                else if (userStr.equals("O")) user[kor] = SCISSORS;
                else {
                    kor--;
                    System.out.println("Nem megfelelő billentyűt ütöttél. Próbáld újra. ("+ userStr+ ")");
                }

                eredmeny[kor] = rockPaperScissors( user[ kor], gep[ kor]);
                if (eredmeny[kor]== 2) System.out.println("Most te győztél");
                else if (eredmeny[kor]== 1) System.out.println("A gép győzött");
                else if (eredmeny[kor]== 3) System.out.println("Döntetlen");
                else {
                    System.out.println("Program hiba történt.");
                    kor--;
                }
            }else{
                kor--;
                System.out.println("Nem megfelelő billentyűt ütöttél. Próbáld újra. ("+ userStr+ ")");
            }
        }
        sc.close();

        HashMap osszesites = new HashMap();
        osszesites.put( 1, 0);
        osszesites.put( 2, 0);
        osszesites.put( 3, 0);
        for ( int i = 0; i< getKor; i++){
            System.out.println( "Az "+ (i+1)+ ". körben "+ ((eredmeny[i]==2)?"Te győztél.":(eredmeny[i]==1)?" a gép győzött.":"Döntetlen volt.") );
            osszesites.put( eredmeny[ i], (int) osszesites.get( eredmeny[ i])+ 1);
        }
        System.out.println( "A verseny összesítése: ");
        System.out.println( "Nyertél    "+ osszesites.get( 2)+ " alkalommal.");
        System.out.println( "Vesztettél "+ osszesites.get( 1)+ " alkalommal.");
        System.out.println( "Döntetlen  "+ osszesites.get( 3)+ " alkalommal.");
        if ((int) osszesites.get(2)> (int)osszesites.get(1)) System.out.println( "A játékban te nyertél!");
        else if ((int) osszesites.get(2)< (int)osszesites.get(1)) System.out.println( "A játékban te vesztettél!");
        else System.out.println( "A játék döntetlen!");

    }

    private static int rockPaperScissors(int user, int gep) {
        if (user == gep) return 3;
        if (user == PAPER && gep==ROCK) return 2;
        if (user == PAPER && gep==SCISSORS) return 1;
        if (user == ROCK && gep==PAPER) return 1;
        if (user == ROCK && gep==SCISSORS) return 2;
        if (user == SCISSORS && gep==ROCK) return 1;
        if (user == SCISSORS && gep==PAPER) return 2;
        return 3;
    }
