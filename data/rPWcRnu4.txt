#include <iostream>
#include <queue>
#include <vector>

using namespace std;

template <typename A, typename B>
ostream &operator<<(ostream &os, const pair<A, B> &p) {
  return os << '(' << p.first << ", " << p.second << ')';
}

template<typename A>
ostream &operator<<(ostream &os, priority_queue<A, vector<A>, greater<A>> q) {

    os << '{';
    string sep;
    while(!q.empty()) {
        const A& x = q.top();
        q.pop();
        os << sep << x , sep = ", ";
    }
    return os << '}';
}

template<typename A>
ostream &operator<<(ostream &os, priority_queue<A> q) {

    os << '{';
    string sep;
    while(!q.empty()) {
        const A& x = q.top();
        q.pop();
        os << sep << x , sep = ", ";
    }
    return os << '}';
}

template<typename A>
ostream &operator<<(ostream &os, queue<A> q) {

    os << '{';
    string sep;
    while(!q.empty()) {
        const A& x = q.front();
        q.pop();
        os << sep << x , sep = ", ";
    }
    return os << '}';
}

template <typename T_container, typename T = typename enable_if<
                                    !is_same<T_container, string>::value,
                                    typename T_container::value_type>::type>
ostream &operator<<(ostream &os, const T_container &v) {
  os << '{';
  string sep;
  for (const T &x : v)
    os << sep << x, sep = ", ";
  return os << '}';
}
void dbg_out() { 
    cerr << endl; 
}
template <typename Head, typename... Tail> void dbg_out(Head H, Tail... T) {
  cerr << ' ' << H;
  dbg_out(T...);
}

#define dbg(...) cerr << "(" << #__VA_ARGS__ << "):", dbg_out(__VA_ARGS__)