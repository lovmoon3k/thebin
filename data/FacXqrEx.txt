using System;
using System.CodeDom;
using System.Linq;

namespace MarinField
{
    internal class Program
    {
        public static int rows, columns;
        //вывод матрицы
        public static void showArr(int[,] arr)
        {
            for (int i = 0; i < rows; ++i)
            {
                for (int k = 0; k < columns; ++k)
                    Console.Write(arr[k, i] + " ");
                Console.WriteLine();
            }
        }

        private static int[] next_stroka(int[,] arr, int stroka)
        {
            //Создаем массив который будет хранить
            //определенную строку
            int[] S = new int[columns];
            //у нас N колон(столбца) это то сколько ему элементов в массиве надо
            for(int i = 0; i < columns; ++i)
            {
                //тут передвигаемся по столбцам arr[столбец,строка]
                S[i] = arr[i, stroka];
            }
            return S;
        } 
        private static int[] find_match(int[] stroka1, int[] stroka2, int[] results)
        {
            for(int i = 0; i < stroka1.Length; ++i)
                //если некст число в столбце совпадает с предыдущим числом
                //значит мы нашли дубликат,и прибавляем в results единичку
                //на индекс столбца в котором нашли дубликат.
                if (stroka1[i] == stroka2[i])
                    results[i] += 1;

            return results;
        }
        private static int find_matches(int[,] arr)
        {
            //для того чтобы хранить результаты каждой колоны(столбца)
            int[] results = new int[columns];
            int stroka = 0;
            //по всем строкам пробегаемся
            for (int i = 0; i < rows; i++)
            {
                //Если строка последняя мы возвращаем результат,иначе он бы
                //выдал ошибку то что индекс находился вне границ массива.
                if (i + 1 >= rows) {
                    int index_stolba = Array.IndexOf(results, results.Max());
                    if (results[index_stolba] == 0)
                        return 0;
                    //нумерация с 0 начинается в программировании,так что
                    //если 1 столбец будет ответ он выведет что в 0 столбце
                    //самое большое кол во повтор элементов поэтому прибавляем
                    //единицу
                    else return index_stolba + 1;
                } 

                //перезаписываем в results 
                results = find_match(next_stroka(arr,stroka), 
                          next_stroka(arr,++stroka),results);
            }
            //если код наебнулся(он должен зайти в иф хуйню сверху всегда)
            //так как последнюю строку не с чем сравнивать дальше строк нет
            //так что мы там оброботали его и сюда прога не должна дойти
            return 0;
        }
        //Старый алгоритм(не юзается тут)
        private static int find_result(int[,] arr)
        {
            int max = 0;
            int b = 0,c = 0;
            for(int k = 0; k < columns; ++k)
            {
                for (int i = 0; i < rows; ++i)
                    if (i + 1 < rows && arr[k, i] == arr[k, i + 1])
                        ++b;
                if (b > max)
                {
                    max = b;
                    b = 0; c = k + 1;
                }
            }
            return c;
        }

        static void Main(string[] args)
        {
            Random r = new Random();
            Console.Write("Введите размер матрицы(S x H): ");
            string[] s = Console.ReadLine().Split(' ');
            int[,] m = new int[int.Parse(s[0]), int.Parse(s[1])];

            columns = m.GetUpperBound(0) + 1;
            rows = m.Length / columns;

            for (int i = 0; i < columns; ++i)
                for (int k = 0; k < rows; ++k)
                    m[i, k] = r.Next(1, 9);

            showArr(m);

            int prek = find_matches(m);
            if (prek <= 0) Console.WriteLine("\nНи в одном из столбцов нету повторяющихся элементов.\n");
            else Console.WriteLine("В столбце №{0} самое большое количество повторяющихся элементов.\n",prek);
        }
    }
}