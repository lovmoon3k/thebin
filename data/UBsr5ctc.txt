海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥精排经.济.学.通.识.（第二版） 薛兆丰.epu...@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"gmtModified\":0,\"id\":0,\"last_chapter_rule\":\"\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"二级解析\",\"path\":\"p\",\"rule\":\"js:\\nvar d = [];\\nlet url = base64Decode(getParam(\\\"u\\\"));\\nd.push({\\n    title: \\\"\\\",\\n    url: url,\\n    col_type: \\\"x5_webview_single\\\",\\n    desc: \\\"float&&100%\\\",\\n    pic_url: \\\"\\\",\\n    extra: {\\n        canBack: true\\n    }\\n});\\nsetResult(d);\"},{\"col_type\":\"text_1\",\"name\":\"搜索测试\",\"path\":\"s\",\"rule\":\"js:\\nlet url = base64Decode(getParam(\\\"u\\\"));\\nlog(url);\\nlet key = getParam(\\\"key\\\");\\nlet sp = $.require(\\\"hiker://page/sp\\\");\\nsetResult(sp(url, key, \\\"搜索测试\\\"));\"},{\"col_type\":\"movie_3\",\"name\":\"聚合搜索\",\"path\":\"pro\",\"rule\":\"var d = [];\\nif (MY_PAGE == 1) {\\n    d.push({\\n        title: \\\"搜索\\\",\\n        url: $.toString(() => {\\n            refreshPage();\\n            return \\\"hiker://empty\\\";\\n        }),\\n        col_type: \\\"input\\\",\\n        desc: \\\"请输入关键词，尽量少字不要多字\\\",\\n        pic_url: \\\"\\\",\\n        extra: {\\n            defaultValue: getMyVar(\\\"sou\\\", \\\"\\\"),\\n            onChange: $.toString(() => {\\n                putMyVar(\\\"sou\\\", input);\\n            })\\n        }\\n    });\\n    addListener(\\\"onClose\\\", $.toString(() => {\\n        clearMyVar(\\\"sou\\\");\\n        clearMyVar(\\\"so\\\");\\n    }));\\n}\\n\\nlet s = getMyVar(\\\"sou\\\", \\\"\\\");\\nlet r = \\\"\\\";\\nif (s != \\\"\\\") {\\n    let p = MY_PAGE;\\n    let {\\n        load\\n    } = $.require(\\\"hiker://page/data\\\");\\n    let {\\n        wrap\\n    } = $.require(\\\"hiker://page/tool\\\");\\n    let data = load(p, r != \\\"\\\" ? r : null);\\n\\n    let pageid = MY_RULE.title + \\\"-page\\\" + p;\\n    if (data.length > 0) {\\n        d.push({\\n            title: \\\"加载第\\\" + p + \\\"页中，进度：1/\\\" + data.length,\\n            url: \\\"\\\",\\n            col_type: \\\"text_center_1\\\",\\n            desc: \\\"\\\",\\n            pic_url: \\\"\\\",\\n            extra: {\\n                id: pageid\\n            }\\n        });\\n    }\\n    setResult(d);\\n    log(data.length);\\n    if (data.length > 0) {\\n        //多线程加载        \\n        let realPage = \\\"\\\" == r ? 1 : p;\\n        let tasks = data.map(it => {\\n            return {\\n                func: function(rule) {\\n                    return rule.find(s, realPage);\\n                },\\n                param: it,\\n                id: \\\"rule@\\\" + it.name\\n            }\\n        });\\n\\n        batchExecute(tasks, {\\n            func: function(param, id, error, result) {\\n                //log(\\\"listener: \\\" + (result || []).length)\\n                param.i = param.i + 1;\\n                if (result) {\\n                    try {\\n                        for (let it of result) {\\n                            param.j = param.j + 1;\\n                            addItemBefore(pageid, {\\n                                title: wrap(it.title, s),\\n                                desc: it.desc,\\n                                url: it.url,\\n                                pic_url: it.pic_url,\\n                                col_type: it.pic_url ? 'movie_1_vertical_pic' : \\\"text_1\\\",\\n                                extra: it.extra\\n                            })\\n                        }\\n                    } catch (e) {}\\n\\n                }\\n                if (param.i >= param.all) {\\n                    deleteItem(pageid)\\n                } else {\\n                    updateItem({\\n                        title: \\\"加载第\\\" + MY_PAGE + \\\"页中，进度：\\\" + (param.i + 1) + \\\"/\\\" + param.all,\\n                        url: \\\"\\\",\\n                        col_type: \\\"text_center_1\\\",\\n                        desc: \\\"\\\",\\n                        pic_url: \\\"\\\",\\n                        extra: {\\n                            id: pageid\\n                        }\\n                    })\\n                }\\n            },\\n            param: {\\n                all: data.length,\\n                i: 0,\\n                j: -1\\n            }\\n        })\\n    }\\n} else {\\n    let {\\n        load\\n    } = $.require(\\\"hiker://page/data\\\");\\n    let data = load(-1, null);\\n    if (data.length > 0) {       \\n        $.require(\\\"hiker://page/manage\\\")(d, data.map(it => it.name));\\n        for (let it of data) {\\n            d.push({\\n                title: it.name,\\n                url: \\\"select://\\\" + JSON.stringify({\\n                    title: \\\"请选择操作\\\",\\n                    col: 1,\\n                    options: [\\\"访问首页\\\", \\\"搜索此站\\\"],\\n                    js: $.toString((url) => {\\n                        if (input == \\\"访问首页\\\") {\\n                            MY_URL = url;\\n                            return \\\"x5://\\\" + getHome(url)\\n                        } else {\\n                            return \\\"hiker://page/singles\\\"\\n                        }\\n                    }, it.url)\\n                }),\\n                col_type: \\\"flex_button\\\",\\n                desc: \\\"\\\",\\n                pic_url: \\\"\\\",\\n                extra: {\\n                    RULE: {\\n                        name: it.name,\\n                        url: it.url\\n                    },\\n                    longClick: [{\\n                        title: \\\"禁用\\\" + it.name,\\n                        js: $.toString((name) => {\\n                            confirm({\\n                                title: \\\"温馨提示\\\",\\n                                content: \\\"确认删除禁用\\\" + name + \\\"吗？\\\",\\n                                confirm: $.toString((name, rule) => {\\n                                    let {\\n                                        removeRule\\n                                    } = $.require(\\\"hiker://page/data?rule=\\\" + rule);\\n                                    removeRule(name);\\n                                    refreshPage();\\n                                    return \\\"toast://OK\\\";\\n                                }, name, MY_RULE.title)\\n                            })\\n                            return \\\"hiker://empty\\\";\\n                        }, it.name)\\n                    }, {\\n                        title: \\\"访问首页\\\",\\n                        js: \\\"'x5://\\\" + getHome(it.url) + \\\"'\\\"\\n                    }, {\\n                        title: \\\"搜索此源\\\",\\n                        js: \\\"'hiker://page/singles'\\\"\\n                    }]\\n                }\\n            });\\n        }       \\n    }\\n}\\n\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"数据\",\"path\":\"data\",\"rule\":\"//并发规则数\\nlet size0 = 10;\\nlet rulesText0 = `🔥知搜🔥@https://zhiso.top/search/?q=**&recommend=None&filetype=None&page=2\\n🔥YouGit🔥@https://yougit.net/search/?q=**&Time_Name=None&CloudDrive_Name=None&FileType_Name=None&page=2\\n🔥淘客链🔥@https://www.toplinks.cc/s/?keyword=**\\n🔥搜书网🔥@https://www.soushu.vip/?operate-search-_E8_A5_BF_E6_B8_B8_E8_AE_B0-1.html\\n🔥FreeMbook🔥@https://freembook.com/\\n🔥v4搜索🔥@https://node2.v4.zhelper.net/search/**/\\n🔥Library Genesis①🔥@https://libgen.gs/index.php?req=**&columns[]=t&columns[]=a&columns[]=s&columns[]=y&columns[]=p&columns[]=i&objects[]=f&objects[]=e&objects[]=s&objects[]=a&objects[]=p&objects[]=w&topics[]=l&topics[]=c&topics[]=f&topics[]=a&topics[]=m&topics[]=r&topics[]=s&res=25&filesuns=all\\n🔥Library Genesis②🔥@https://libgen.rocks/index.php?req=**&columns[]=t&columns[]=a&columns[]=s&columns[]=y&columns[]=p&columns[]=i&objects[]=f&objects[]=e&objects[]=s&objects[]=a&objects[]=p&objects[]=w&topics[]=l&topics[]=c&topics[]=f&topics[]=a&topics[]=m&topics[]=r&topics[]=s&res=25&filesuns=all\\n🔥去中心化🔥@https://ebook2.lorefree.com/site/index?s=**\\n🔥鸠摩搜书🔥@https://www.jiumodiary.com/\\n🔥TheFuture🔥@https://bks.thefuture.top/result.php?q=**&from=fromsearchbox\\n🔥每日书单🔥@https://www.shudan.vip/search.php?keyword=**\\n🔥阅读链🔥（好像无用了）@https://cloud.yuedu.pro/#/searchResult\\n🔥偶书🔥（需要注册登录）@https://obook.cc/index.php?app=search&ac=s&kw=**\\n🔥知识库🔥@https://www.zhishikoo.com/?s=**\\n🔥三秋书屋🔥@https://www.sanqiu.mobi/?s=**\\n🔥风陵渡书屋🔥（需关注公众号）@http://www.eybook.com/index.php?s=book&c=search&keyword=**\\n🔥书乐里🔥@https://www.sulery.com/?s=**&submit=**\\n🔥爱悦读🔥@https://www.iyd.wang/?s=**\\n🔥Epubooks🔥@https://www.epubooks.top/search?q=**&m=1\\n🔥书单🔥@https://ebooklist.mobi/?s=**\\n🔥多读🔥@http://www.duodu.cc/plus/search.php?pagesize=20&q=**\\n🔥rejoice🔥@http://www.rejoiceblog.com/article/search/page/1/?type=&keyword=**\\n🔥读书小站🔥@https://ibooks.org.cn/?s=**\\n🔥雅书🔥@https://yabook.blog/e/search/result/?searchid=63\\n🔥书行天下🔥@https://www.sxpdf.com/?s=**\\n🔥书行万里🔥@https://www.gpdf.net/?s=**\\n🔥书堆阅读🔥@https://www.werebook.com/?s=**&submit=**\\n🔥资源书吧🔥@http://www.nziyuan.com/e/search/result/?searchid=224\\n🔥全索引🔥@http://www.ctfile.cn/?s=**\\n🔥敏学网🔥@http://www.minxue.net/batch.search.php\\n🔥古丽电子书🔥@https://www.guligirl.com/?s=**\\n🔥书舟搜索🔥@https://www.shuzhou.cc/?s=**\\n🔥书星网🔥@http://search.shuxing.cc/search.php?word=**&Submit=**&searchby=book\\n🔥owook🔥@https://www.owlook.com.cn/search?wd=**\\n🔥拨云搜书🔥@https://www.boyunso.com/search/?kw=**\\n🔥查书网🔥@http://www.chashu.cc/XiaoShuo/search.aspx\\n🔥云搜小说🔥@http://www.woyaoso.cn/index/index/search.html?name=**\\n🔥精校全本🔥@https://noveless.com/?s=**\\n🔥黑图网🔥@https://www.hts886.com/e/search/result/?searchid=13\\n🔥搬书匠🔥@http://www.banshujiang.cn/e_books/search/page/1?searchWords=**\\n🔥苦瓜书盘🔥@https://kgbook.com/e/search/index.php\\n🔥SoBooks🔥@https://sobooks.net/search/**\\n🔥书荒网🔥@https://www.15huang.com/e/search/result/?searchid=199629\\n🔥西边云🔥@http://www.xibianyun.com/book/search?kw=**\\n🔥顶点小说🔥@https://m.230book.net/s.php\\n🔥八一中文🔥@http://m.zwduxs.com/s.php\\n🔥电子书搜索🔥（只能点击进去用）@https://www.giffox.com\\n🔥小鲸鱼搜书🔥（只能点击进去用）@http://www.9871.org/?ref=adzhp.vip\\n🔥资源帝🔥（只能点进去用）@http://shu.ziyuandi.cn/\\n🔥熊猫搜书🔥（只能点进去用）@https://xmsoushu.com/#`;\\nlet rulesText = getItem(\\\"rules\\\", rulesText0);\\nlet sp = $.require(\\\"hiker://page/sp\\\");\\nrules = rulesText.split(\\\"\\\\n\\\")\\n    .filter(it => it.includes(\\\"@\\\"))\\n    .map(rule => {\\n        let s = rule.split(\\\"@\\\");\\n        return {\\n            name: s[0],\\n            find: function(key, page) {\\n                return sp(s[1], key, s[0]);\\n            },\\n            url: s[1]\\n        };\\n    });\\n\\nfunction load(page, rule) {\\n    let size = page <= 0 ? rules.length : size0;\\n    page = page <= 0 ? 1 : page;\\n    if (!page && !rule) {\\n        return rules.map(it => it.name);\\n    }\\n    if (rule != null) {\\n        if (page != null && page > 1) {\\n            return rules.filter(i => i.name == rule && i.page);\\n        }\\n        return rules.filter(i => i.name == rule);\\n    }\\n    let start = (page - 1) * size;\\n    if (rules.length < start + 1) {\\n        return [];\\n    }\\n    let len = size;\\n    if (rules.length < page * size) {\\n        len = rules.length - start\\n    }\\n    return rules.slice(start, start + len);\\n}\\n\\nfunction addRule(name, surl) {\\n    setItem(\\\"rules\\\", rulesText + \\\"\\\\n\\\" + name + \\\"@\\\" + surl);\\n}\\n\\nfunction removeRule(name) {\\n    let newT = rulesText.split(\\\"\\\\n\\\")\\n        .filter(it => it.indexOf(name + \\\"@\\\") < 0)\\n        .join(\\\"\\\\n\\\");\\n    setItem(\\\"rules\\\", newT);\\n}\\n\\n$.exports = {\\n    load: load,\\n    addRule: addRule,\\n    removeRule: removeRule\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"搜索解析\",\"path\":\"sp\",\"rule\":\"function search(url, key, rule) {\\n    let d = [];\\n    let html = \\\"\\\";\\n    if (url.includes(\\\"**\\\")) {\\n        //get请求\\n        let old = url;\\n        url = url.replace(\\\"**\\\", key);\\n        html = request(url);\\n        //自动过验证码和频繁访问限制\\n        let {\\n            check, test\\n        } = $.require(\\\"hiker://page/yzm\\\");\\n        if (check(url, html, d)) {\\n            log(\\\"重试了\\\");\\n            html = request(url, {\\n                headers: {\\n                    \\\"Referer\\\": url\\n                }\\n            });           \\n        }         \\n        test(url, html, d, old, key, rule);\\n    } else {\\n        //自动识别post请求\\n        html = request(url);\\n        let form = pdfh(html, \\\"body&&form&&Html\\\");\\n        let action = pd(html, \\\"form&&action\\\", url);\\n        let inputs = pdfa(html, \\\"body&&form&&input\\\");\\n        let body = {};\\n        for (let it of inputs) {\\n            let name = pdfh(it, \\\"input&&name\\\");\\n            if (name && name != \\\"\\\") {\\n                let value = pdfh(it, \\\"input&&value\\\");\\n                body[name] = value || key;\\n            }\\n        }\\n        html = post(action, {\\n            body: body\\n        });\\n    }\\n\\n    let alist = pdfa(html, \\\"body&&a\\\");\\n    let arr = alist.map(it => {\\n        let t = pdfh(it, \\\"a&&Text\\\");\\n        let t2 = pdfh(it, \\\"a&&title\\\");\\n        return {\\n            //html: it,\\n            text: t2 && t2.includes(key) ? t2 : t,\\n            href: pd(it, \\\"a&&href\\\", url)\\n        }\\n    });\\n\\n    function isResult(it) {\\n        it = it.text || \\\"\\\";\\n        if (it == \\\"\\\" || it.match(/搜索|结果/)) {\\n            return false\\n        }\\n        return it.toLowerCase().includes(key);\\n    }\\n    key = key.toLowerCase();\\n    for (let i = 0; i < arr.length; i++) {\\n        let it = arr[i];\\n        let t = it.text;\\n        if (!it.href || it.href == \\\"\\\") {\\n            continue;\\n        }\\n        if (isResult(it)) {\\n            d.push({\\n                title: t,\\n                url: \\\"hiker://page/p?u=\\\" + base64Encode(it.href),\\n                col_type: \\\"text_1\\\",\\n                desc: \\\"““””<font color=#f13b66a>\\\" + rule + \\\"</font>\\\"\\n            });\\n        }\\n    }\\n    return d;\\n}\\n$.exports = search;\"},{\"col_type\":\"movie_3\",\"name\":\"增删\",\"path\":\"manage\",\"rule\":\"$.exports = function(d, names) {\\n    d.push({\\n        title: \\\"AI技术\\\",\\n        url: \\\"confirm://基于AI识片自动分析源码技术，代码完全开源，数据来源于原网站，软件和规则不提供任何内容.js:''\\\",\\n        col_type: \\\"flex_button\\\"\\n    });\\n    d.push({\\n        title: \\\" + \\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule((rr) => {\\n            deleteItemByCls(\\\"aiadd\\\");\\n            addItemAfter(rr + \\\"aisdel\\\", [{\\n                    title: \\\"\\\",\\n                    desc: \\\"请输入网站名称\\\",\\n                    col_type: \\\"input\\\",\\n                    extra: {\\n                        titleVisible: false,\\n                        onChange: \\\"putMyVar('name', input)\\\",\\n                        cls: \\\"aiadd\\\"\\n                    }\\n                },\\n                {\\n                    title: \\\"\\\",\\n                    desc: \\\"请输入网站搜索地址\\\",\\n                    col_type: \\\"input\\\",\\n                    extra: {\\n                        titleVisible: false,\\n                        onChange: \\\"putMyVar('surl', input)\\\",\\n                        cls: \\\"aiadd\\\"\\n                    }\\n                },\\n                {\\n                    title: \\\"提交保存\\\",\\n                    col_type: \\\"text_center_1\\\",\\n                    url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n                        let surl = getMyVar(\\\"surl\\\", \\\"\\\");\\n                        let name = getMyVar(\\\"name\\\", \\\"\\\");\\n                        if (surl == \\\"\\\" || name == \\\"\\\") {\\n                            return \\\"toast://请输入完整内容\\\"\\n                        }\\n                        let r = decodeURIComponent(surl);\\n                        r = r.replace(new RegExp(\\\"[\\\\u4e00-\\\\u9fa5]+\\\", \\\"g\\\"), \\\"**\\\");\\n                        let {\\n                            addRule\\n                        } = $.require(\\\"hiker://page/data\\\");\\n                        addRule(name, r);\\n                        refreshPage();\\n                        return \\\"toast://已保存\\\";\\n                    }),\\n                    extra: {\\n                        cls: \\\"aiadd\\\"\\n                    }\\n                }\\n            ]);\\n            return \\\"hiker://empty\\\"\\n        }, MY_RULE.title),\\n        col_type: \\\"flex_button\\\",\\n    });\\n    d.push({\\n        title: \\\" - \\\",\\n        url: \\\"select://\\\" + JSON.stringify({\\n            options: names,\\n            title: \\\"请选择要删除的站点\\\",\\n            js: $.toString(() => {\\n                let {\\n                    removeRule\\n                } = $.require(\\\"hiker://page/data\\\");\\n                removeRule(input);\\n                refreshPage();\\n                return \\\"toast://OK\\\";\\n            })\\n        }),\\n        col_type: \\\"flex_button\\\",\\n        extra: {\\n            id: MY_RULE.title + \\\"aisdel\\\"\\n        }\\n    });\\n    d.push({\\n        col_type: \\\"blank_block\\\"\\n    });\\n\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"验证码\",\"path\":\"yzm\",\"rule\":\"function check(url, html, d) {\\n    let reload = false;\\n    return reload;\\n}\\n\\nfunction test(url, html, d, old, key, rule) {\\n    if (/5秒|频繁/.test(html)) {\\n        d.push({\\n            title: '搜索需间隔5秒，点击重新加载',\\n            col_type: \\\"text_1\\\",\\n            desc: \\\"““””<font color=#f13b66a>\\\" + rule + \\\"</font>\\\",\\n            url: $().lazyRule((url, old, key, rule) => {\\n                let sp = $.require(\\\"hiker://page/sp\\\");\\n                let d = sp(old, key, rule);\\n                let {\\n                    wrap\\n                } = $.require(\\\"hiker://page/tool\\\");\\n                for (let it of d) {\\n                    it.title = wrap(it.title, key);\\n                }\\n                addItemAfter(url, d);\\n                deleteItem(url);\\n                return \\\"toast://OK\\\";\\n            }, url, old, key, rule),\\n            extra: {\\n                id: url\\n            }\\n        });\\n    }\\n}\\n\\n$.exports = {\\n    check: check,\\n    test: test\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"工具\",\"path\":\"tool\",\"rule\":\"function wrap(text, s) {\\n    return text.includes(\\\"““””\\\") ? text : \\\"““””\\\" + text.replace(new RegExp(\\\"<em>|</em>\\\", \\\"g\\\"), \\\"\\\").replace(new RegExp(s, \\\"g\\\"), \\\"<strong><span style=\\\\\\\"color: #1E90FF\\\\\\\">\\\" + s + \\\"</span></strong>\\\")\\n}\\n$.exports = {\\n    wrap: wrap\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"单搜\",\"path\":\"singles\",\"rule\":\"js:\\nvar d = [];\\nd.push({\\n    title: \\\"搜索\\\",\\n    url: $.toString(() => {\\n        putMyVar(\\\"so\\\", input);\\n        refreshPage();\\n    }),\\n    col_type: \\\"input\\\",\\n    desc: \\\"请输入关键词，尽量少字不要多字\\\",\\n    pic_url: \\\"\\\",\\n    extra: {\\n        defaultValue: getMyVar(\\\"so\\\", \\\"\\\")\\n    }\\n});\\nlet s = getMyVar(\\\"so\\\", \\\"\\\");\\nlet r = \\\"\\\";\\nif (s != \\\"\\\") {\\n    let p = MY_PAGE;\\n    let {\\n        load\\n    } = $.require(\\\"hiker://page/data\\\");\\n    let {\\n        wrap\\n    } = $.require(\\\"hiker://page/tool\\\");\\n    let data = load(p, MY_PARAMS.RULE.name);\\n    let arr = data[0].find(s, p);\\n    for (let it of arr) {\\n        it.title = wrap(it.title, s)\\n        d.push(it);\\n    }\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"搜索页面\",\"path\":\"soup\",\"rule\":\"js:\\nvar d = [];\\nif (MY_PARAMS.key && getMyVar(\\\"use\\\", \\\"\\\") == \\\"\\\") {\\n    putMyVar(\\\"sou\\\", MY_PARAMS.key);\\n    putMyVar(\\\"use\\\", \\\"1\\\");\\n    addListener(\\\"onClose\\\", $.toString(() => {\\n        clearMyVar(\\\"use\\\");\\n    }));\\n}\\n$.require('hiker://page/pro')\"}],\"saved\":false,\"title\":\"AI搜书\",\"version\":0,\"url\":\"hiker://page/p?u=aHR0cHM6Ly93d3cuc291c2h1LnZpcC8/cmVhZC01ODczNy5odG1s\",\"col_type\":\"movie_3\",\"find_rule\":\"js:\\nvar d = [];\\nlet url = base64Decode(getParam(\\\"u\\\"));\\nd.push({\\n    title: \\\"\\\",\\n    url: url,\\n    col_type: \\\"x5_webview_single\\\",\\n    desc: \\\"float&&100%\\\",\\n    pic_url: \\\"\\\",\\n    extra: {\\n        canBack: true\\n    }\\n});\\nsetResult(d);\",\"group\":\"①轻合集\",\"ua\":\"mobile\",\"preRule\":\"\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"二级解析\\\",\\\"path\\\":\\\"p\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nlet url = base64Decode(getParam(\\\\\\\"u\\\\\\\"));\\\\nd.push({\\\\n    title: \\\\\\\"\\\\\\\",\\\\n    url: url,\\\\n    col_type: \\\\\\\"x5_webview_single\\\\\\\",\\\\n    desc: \\\\\\\"float&&100%\\\\\\\",\\\\n    pic_url: \\\\\\\"\\\\\\\",\\\\n    extra: {\\\\n        canBack: true\\\\n    }\\\\n});\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"text_1\\\",\\\"name\\\":\\\"搜索测试\\\",\\\"path\\\":\\\"s\\\",\\\"rule\\\":\\\"js:\\\\nlet url = base64Decode(getParam(\\\\\\\"u\\\\\\\"));\\\\nlog(url);\\\\nlet key = getParam(\\\\\\\"key\\\\\\\");\\\\nlet sp = $.require(\\\\\\\"hiker://page/sp\\\\\\\");\\\\nsetResult(sp(url, key, \\\\\\\"搜索测试\\\\\\\"));\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"聚合搜索\\\",\\\"path\\\":\\\"pro\\\",\\\"rule\\\":\\\"var d = [];\\\\nif (MY_PAGE == 1) {\\\\n    d.push({\\\\n        title: \\\\\\\"搜索\\\\\\\",\\\\n        url: $.toString(() => {\\\\n            refreshPage();\\\\n            return \\\\\\\"hiker://empty\\\\\\\";\\\\n        }),\\\\n        col_type: \\\\\\\"input\\\\\\\",\\\\n        desc: \\\\\\\"请输入关键词，尽量少字不要多字\\\\\\\",\\\\n        pic_url: \\\\\\\"\\\\\\\",\\\\n        extra: {\\\\n            defaultValue: getMyVar(\\\\\\\"sou\\\\\\\", \\\\\\\"\\\\\\\"),\\\\n            onChange: $.toString(() => {\\\\n                putMyVar(\\\\\\\"sou\\\\\\\", input);\\\\n            })\\\\n        }\\\\n    });\\\\n    addListener(\\\\\\\"onClose\\\\\\\", $.toString(() => {\\\\n        clearMyVar(\\\\\\\"sou\\\\\\\");\\\\n        clearMyVar(\\\\\\\"so\\\\\\\");\\\\n    }));\\\\n}\\\\n\\\\nlet s = getMyVar(\\\\\\\"sou\\\\\\\", \\\\\\\"\\\\\\\");\\\\nlet r = \\\\\\\"\\\\\\\";\\\\nif (s != \\\\\\\"\\\\\\\") {\\\\n    let p = MY_PAGE;\\\\n    let {\\\\n        load\\\\n    } = $.require(\\\\\\\"hiker://page/data\\\\\\\");\\\\n    let {\\\\n        wrap\\\\n    } = $.require(\\\\\\\"hiker://page/tool\\\\\\\");\\\\n    let data = load(p, r != \\\\\\\"\\\\\\\" ? r : null);\\\\n\\\\n    let pageid = MY_RULE.title + \\\\\\\"-page\\\\\\\" + p;\\\\n    if (data.length > 0) {\\\\n        d.push({\\\\n            title: \\\\\\\"加载第\\\\\\\" + p + \\\\\\\"页中，进度：1/\\\\\\\" + data.length,\\\\n            url: \\\\\\\"\\\\\\\",\\\\n            col_type: \\\\\\\"text_center_1\\\\\\\",\\\\n            desc: \\\\\\\"\\\\\\\",\\\\n            pic_url: \\\\\\\"\\\\\\\",\\\\n            extra: {\\\\n                id: pageid\\\\n            }\\\\n        });\\\\n    }\\\\n    setResult(d);\\\\n    log(data.length);\\\\n    if (data.length > 0) {\\\\n        //多线程加载        \\\\n        let realPage = \\\\\\\"\\\\\\\" == r ? 1 : p;\\\\n        let tasks = data.map(it => {\\\\n            return {\\\\n                func: function(rule) {\\\\n                    return rule.find(s, realPage);\\\\n                },\\\\n                param: it,\\\\n                id: \\\\\\\"rule@\\\\\\\" + it.name\\\\n            }\\\\n        });\\\\n\\\\n        batchExecute(tasks, {\\\\n            func: function(param, id, error, result) {\\\\n                //log(\\\\\\\"listener: \\\\\\\" + (result || []).length)\\\\n                param.i = param.i + 1;\\\\n                if (result) {\\\\n                    try {\\\\n                        for (let it of result) {\\\\n                            param.j = param.j + 1;\\\\n                            addItemBefore(pageid, {\\\\n                                title: wrap(it.title, s),\\\\n                                desc: it.desc,\\\\n                                url: it.url,\\\\n                                pic_url: it.pic_url,\\\\n                                col_type: it.pic_url ? 'movie_1_vertical_pic' : \\\\\\\"text_1\\\\\\\",\\\\n                                extra: it.extra\\\\n                            })\\\\n                        }\\\\n                    } catch (e) {}\\\\n\\\\n                }\\\\n                if (param.i >= param.all) {\\\\n                    deleteItem(pageid)\\\\n                } else {\\\\n                    updateItem({\\\\n                        title: \\\\\\\"加载第\\\\\\\" + MY_PAGE + \\\\\\\"页中，进度：\\\\\\\" + (param.i + 1) + \\\\\\\"/\\\\\\\" + param.all,\\\\n                        url: \\\\\\\"\\\\\\\",\\\\n                        col_type: \\\\\\\"text_center_1\\\\\\\",\\\\n                        desc: \\\\\\\"\\\\\\\",\\\\n                        pic_url: \\\\\\\"\\\\\\\",\\\\n                        extra: {\\\\n                            id: pageid\\\\n                        }\\\\n                    })\\\\n                }\\\\n            },\\\\n            param: {\\\\n                all: data.length,\\\\n                i: 0,\\\\n                j: -1\\\\n            }\\\\n        })\\\\n    }\\\\n} else {\\\\n    let {\\\\n        load\\\\n    } = $.require(\\\\\\\"hiker://page/data\\\\\\\");\\\\n    let data = load(-1, null);\\\\n    if (data.length > 0) {       \\\\n        $.require(\\\\\\\"hiker://page/manage\\\\\\\")(d, data.map(it => it.name));\\\\n        for (let it of data) {\\\\n            d.push({\\\\n                title: it.name,\\\\n                url: \\\\\\\"select://\\\\\\\" + JSON.stringify({\\\\n                    title: \\\\\\\"请选择操作\\\\\\\",\\\\n                    col: 1,\\\\n                    options: [\\\\\\\"访问首页\\\\\\\", \\\\\\\"搜索此站\\\\\\\"],\\\\n                    js: $.toString((url) => {\\\\n                        if (input == \\\\\\\"访问首页\\\\\\\") {\\\\n                            MY_URL = url;\\\\n                            return \\\\\\\"x5://\\\\\\\" + getHome(url)\\\\n                        } else {\\\\n                            return \\\\\\\"hiker://page/singles\\\\\\\"\\\\n                        }\\\\n                    }, it.url)\\\\n                }),\\\\n                col_type: \\\\\\\"flex_button\\\\\\\",\\\\n                desc: \\\\\\\"\\\\\\\",\\\\n                pic_url: \\\\\\\"\\\\\\\",\\\\n                extra: {\\\\n                    RULE: {\\\\n                        name: it.name,\\\\n                        url: it.url\\\\n                    },\\\\n                    longClick: [{\\\\n                        title: \\\\\\\"禁用\\\\\\\" + it.name,\\\\n                        js: $.toString((name) => {\\\\n                            confirm({\\\\n                                title: \\\\\\\"温馨提示\\\\\\\",\\\\n                                content: \\\\\\\"确认删除禁用\\\\\\\" + name + \\\\\\\"吗？\\\\\\\",\\\\n                                confirm: $.toString((name, rule) => {\\\\n                                    let {\\\\n                                        removeRule\\\\n                                    } = $.require(\\\\\\\"hiker://page/data?rule=\\\\\\\" + rule);\\\\n                                    removeRule(name);\\\\n                                    refreshPage();\\\\n                                    return \\\\\\\"toast://OK\\\\\\\";\\\\n                                }, name, MY_RULE.title)\\\\n                            })\\\\n                            return \\\\\\\"hiker://empty\\\\\\\";\\\\n                        }, it.name)\\\\n                    }, {\\\\n                        title: \\\\\\\"访问首页\\\\\\\",\\\\n                        js: \\\\\\\"'x5://\\\\\\\" + getHome(it.url) + \\\\\\\"'\\\\\\\"\\\\n                    }, {\\\\n                        title: \\\\\\\"搜索此源\\\\\\\",\\\\n                        js: \\\\\\\"'hiker://page/singles'\\\\\\\"\\\\n                    }]\\\\n                }\\\\n            });\\\\n        }       \\\\n    }\\\\n}\\\\n\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"数据\\\",\\\"path\\\":\\\"data\\\",\\\"rule\\\":\\\"//并发规则数\\\\nlet size0 = 10;\\\\nlet rulesText0 = `🔥知搜🔥@https://zhiso.top/search/?q=**&recommend=None&filetype=None&page=2\\\\n🔥YouGit🔥@https://yougit.net/search/?q=**&Time_Name=None&CloudDrive_Name=None&FileType_Name=None&page=2\\\\n🔥淘客链🔥@https://www.toplinks.cc/s/?keyword=**\\\\n🔥搜书网🔥@https://www.soushu.vip/?operate-search-_E8_A5_BF_E6_B8_B8_E8_AE_B0-1.html\\\\n🔥FreeMbook🔥@https://freembook.com/\\\\n🔥v4搜索🔥@https://node2.v4.zhelper.net/search/**/\\\\n🔥Library Genesis①🔥@https://libgen.gs/index.php?req=**&columns[]=t&columns[]=a&columns[]=s&columns[]=y&columns[]=p&columns[]=i&objects[]=f&objects[]=e&objects[]=s&objects[]=a&objects[]=p&objects[]=w&topics[]=l&topics[]=c&topics[]=f&topics[]=a&topics[]=m&topics[]=r&topics[]=s&res=25&filesuns=all\\\\n🔥Library Genesis②🔥@https://libgen.rocks/index.php?req=**&columns[]=t&columns[]=a&columns[]=s&columns[]=y&columns[]=p&columns[]=i&objects[]=f&objects[]=e&objects[]=s&objects[]=a&objects[]=p&objects[]=w&topics[]=l&topics[]=c&topics[]=f&topics[]=a&topics[]=m&topics[]=r&topics[]=s&res=25&filesuns=all\\\\n🔥去中心化🔥@https://ebook2.lorefree.com/site/index?s=**\\\\n🔥鸠摩搜书🔥@https://www.jiumodiary.com/\\\\n🔥TheFuture🔥@https://bks.thefuture.top/result.php?q=**&from=fromsearchbox\\\\n🔥每日书单🔥@https://www.shudan.vip/search.php?keyword=**\\\\n🔥阅读链🔥（好像无用了）@https://cloud.yuedu.pro/#/searchResult\\\\n🔥偶书🔥（需要注册登录）@https://obook.cc/index.php?app=search&ac=s&kw=**\\\\n🔥知识库🔥@https://www.zhishikoo.com/?s=**\\\\n🔥三秋书屋🔥@https://www.sanqiu.mobi/?s=**\\\\n🔥风陵渡书屋🔥（需关注公众号）@http://www.eybook.com/index.php?s=book&c=search&keyword=**\\\\n🔥书乐里🔥@https://www.sulery.com/?s=**&submit=**\\\\n🔥爱悦读🔥@https://www.iyd.wang/?s=**\\\\n🔥Epubooks🔥@https://www.epubooks.top/search?q=**&m=1\\\\n🔥书单🔥@https://ebooklist.mobi/?s=**\\\\n🔥多读🔥@http://www.duodu.cc/plus/search.php?pagesize=20&q=**\\\\n🔥rejoice🔥@http://www.rejoiceblog.com/article/search/page/1/?type=&keyword=**\\\\n🔥读书小站🔥@https://ibooks.org.cn/?s=**\\\\n🔥雅书🔥@https://yabook.blog/e/search/result/?searchid=63\\\\n🔥书行天下🔥@https://www.sxpdf.com/?s=**\\\\n🔥书行万里🔥@https://www.gpdf.net/?s=**\\\\n🔥书堆阅读🔥@https://www.werebook.com/?s=**&submit=**\\\\n🔥资源书吧🔥@http://www.nziyuan.com/e/search/result/?searchid=224\\\\n🔥全索引🔥@http://www.ctfile.cn/?s=**\\\\n🔥敏学网🔥@http://www.minxue.net/batch.search.php\\\\n🔥古丽电子书🔥@https://www.guligirl.com/?s=**\\\\n🔥书舟搜索🔥@https://www.shuzhou.cc/?s=**\\\\n🔥书星网🔥@http://search.shuxing.cc/search.php?word=**&Submit=**&searchby=book\\\\n🔥owook🔥@https://www.owlook.com.cn/search?wd=**\\\\n🔥拨云搜书🔥@https://www.boyunso.com/search/?kw=**\\\\n🔥查书网🔥@http://www.chashu.cc/XiaoShuo/search.aspx\\\\n🔥云搜小说🔥@http://www.woyaoso.cn/index/index/search.html?name=**\\\\n🔥精校全本🔥@https://noveless.com/?s=**\\\\n🔥黑图网🔥@https://www.hts886.com/e/search/result/?searchid=13\\\\n🔥搬书匠🔥@http://www.banshujiang.cn/e_books/search/page/1?searchWords=**\\\\n🔥苦瓜书盘🔥@https://kgbook.com/e/search/index.php\\\\n🔥SoBooks🔥@https://sobooks.net/search/**\\\\n🔥书荒网🔥@https://www.15huang.com/e/search/result/?searchid=199629\\\\n🔥西边云🔥@http://www.xibianyun.com/book/search?kw=**\\\\n🔥顶点小说🔥@https://m.230book.net/s.php\\\\n🔥八一中文🔥@http://m.zwduxs.com/s.php\\\\n🔥电子书搜索🔥（只能点击进去用）@https://www.giffox.com\\\\n🔥小鲸鱼搜书🔥（只能点击进去用）@http://www.9871.org/?ref=adzhp.vip\\\\n🔥资源帝🔥（只能点进去用）@http://shu.ziyuandi.cn/\\\\n🔥熊猫搜书🔥（只能点进去用）@https://xmsoushu.com/#`;\\\\nlet rulesText = getItem(\\\\\\\"rules\\\\\\\", rulesText0);\\\\nlet sp = $.require(\\\\\\\"hiker://page/sp\\\\\\\");\\\\nrules = rulesText.split(\\\\\\\"\\\\\\\\n\\\\\\\")\\\\n    .filter(it => it.includes(\\\\\\\"@\\\\\\\"))\\\\n    .map(rule => {\\\\n        let s = rule.split(\\\\\\\"@\\\\\\\");\\\\n        return {\\\\n            name: s[0],\\\\n            find: function(key, page) {\\\\n                return sp(s[1], key, s[0]);\\\\n            },\\\\n            url: s[1]\\\\n        };\\\\n    });\\\\n\\\\nfunction load(page, rule) {\\\\n    let size = page <= 0 ? rules.length : size0;\\\\n    page = page <= 0 ? 1 : page;\\\\n    if (!page && !rule) {\\\\n        return rules.map(it => it.name);\\\\n    }\\\\n    if (rule != null) {\\\\n        if (page != null && page > 1) {\\\\n            return rules.filter(i => i.name == rule && i.page);\\\\n        }\\\\n        return rules.filter(i => i.name == rule);\\\\n    }\\\\n    let start = (page - 1) * size;\\\\n    if (rules.length < start + 1) {\\\\n        return [];\\\\n    }\\\\n    let len = size;\\\\n    if (rules.length < page * size) {\\\\n        len = rules.length - start\\\\n    }\\\\n    return rules.slice(start, start + len);\\\\n}\\\\n\\\\nfunction addRule(name, surl) {\\\\n    setItem(\\\\\\\"rules\\\\\\\", rulesText + \\\\\\\"\\\\\\\\n\\\\\\\" + name + \\\\\\\"@\\\\\\\" + surl);\\\\n}\\\\n\\\\nfunction removeRule(name) {\\\\n    let newT = rulesText.split(\\\\\\\"\\\\\\\\n\\\\\\\")\\\\n        .filter(it => it.indexOf(name + \\\\\\\"@\\\\\\\") < 0)\\\\n        .join(\\\\\\\"\\\\\\\\n\\\\\\\");\\\\n    setItem(\\\\\\\"rules\\\\\\\", newT);\\\\n}\\\\n\\\\n$.exports = {\\\\n    load: load,\\\\n    addRule: addRule,\\\\n    removeRule: removeRule\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"搜索解析\\\",\\\"path\\\":\\\"sp\\\",\\\"rule\\\":\\\"function search(url, key, rule) {\\\\n    let d = [];\\\\n    let html = \\\\\\\"\\\\\\\";\\\\n    if (url.includes(\\\\\\\"**\\\\\\\")) {\\\\n        //get请求\\\\n        let old = url;\\\\n        url = url.replace(\\\\\\\"**\\\\\\\", key);\\\\n        html = request(url);\\\\n        //自动过验证码和频繁访问限制\\\\n        let {\\\\n            check, test\\\\n        } = $.require(\\\\\\\"hiker://page/yzm\\\\\\\");\\\\n        if (check(url, html, d)) {\\\\n            log(\\\\\\\"重试了\\\\\\\");\\\\n            html = request(url, {\\\\n                headers: {\\\\n                    \\\\\\\"Referer\\\\\\\": url\\\\n                }\\\\n            });           \\\\n        }         \\\\n        test(url, html, d, old, key, rule);\\\\n    } else {\\\\n        //自动识别post请求\\\\n        html = request(url);\\\\n        let form = pdfh(html, \\\\\\\"body&&form&&Html\\\\\\\");\\\\n        let action = pd(html, \\\\\\\"form&&action\\\\\\\", url);\\\\n        let inputs = pdfa(html, \\\\\\\"body&&form&&input\\\\\\\");\\\\n        let body = {};\\\\n        for (let it of inputs) {\\\\n            let name = pdfh(it, \\\\\\\"input&&name\\\\\\\");\\\\n            if (name && name != \\\\\\\"\\\\\\\") {\\\\n                let value = pdfh(it, \\\\\\\"input&&value\\\\\\\");\\\\n                body[name] = value || key;\\\\n            }\\\\n        }\\\\n        html = post(action, {\\\\n            body: body\\\\n        });\\\\n    }\\\\n\\\\n    let alist = pdfa(html, \\\\\\\"body&&a\\\\\\\");\\\\n    let arr = alist.map(it => {\\\\n        let t = pdfh(it, \\\\\\\"a&&Text\\\\\\\");\\\\n        let t2 = pdfh(it, \\\\\\\"a&&title\\\\\\\");\\\\n        return {\\\\n            //html: it,\\\\n            text: t2 && t2.includes(key) ? t2 : t,\\\\n            href: pd(it, \\\\\\\"a&&href\\\\\\\", url)\\\\n        }\\\\n    });\\\\n\\\\n    function isResult(it) {\\\\n        it = it.text || \\\\\\\"\\\\\\\";\\\\n        if (it == \\\\\\\"\\\\\\\" || it.match(/搜索|结果/)) {\\\\n            return false\\\\n        }\\\\n        return it.toLowerCase().includes(key);\\\\n    }\\\\n    key = key.toLowerCase();\\\\n    for (let i = 0; i < arr.length; i++) {\\\\n        let it = arr[i];\\\\n        let t = it.text;\\\\n        if (!it.href || it.href == \\\\\\\"\\\\\\\") {\\\\n            continue;\\\\n        }\\\\n        if (isResult(it)) {\\\\n            d.push({\\\\n                title: t,\\\\n                url: \\\\\\\"hiker://page/p?u=\\\\\\\" + base64Encode(it.href),\\\\n                col_type: \\\\\\\"text_1\\\\\\\",\\\\n                desc: \\\\\\\"““””<font color=#f13b66a>\\\\\\\" + rule + \\\\\\\"</font>\\\\\\\"\\\\n            });\\\\n        }\\\\n    }\\\\n    return d;\\\\n}\\\\n$.exports = search;\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"增删\\\",\\\"path\\\":\\\"manage\\\",\\\"rule\\\":\\\"$.exports = function(d, names) {\\\\n    d.push({\\\\n        title: \\\\\\\"AI技术\\\\\\\",\\\\n        url: \\\\\\\"confirm://基于AI识片自动分析源码技术，代码完全开源，数据来源于原网站，软件和规则不提供任何内容.js:''\\\\\\\",\\\\n        col_type: \\\\\\\"flex_button\\\\\\\"\\\\n    });\\\\n    d.push({\\\\n        title: \\\\\\\" + \\\\\\\",\\\\n        url: $(\\\\\\\"#noLoading#\\\\\\\").lazyRule((rr) => {\\\\n            deleteItemByCls(\\\\\\\"aiadd\\\\\\\");\\\\n            addItemAfter(rr + \\\\\\\"aisdel\\\\\\\", [{\\\\n                    title: \\\\\\\"\\\\\\\",\\\\n                    desc: \\\\\\\"请输入网站名称\\\\\\\",\\\\n                    col_type: \\\\\\\"input\\\\\\\",\\\\n                    extra: {\\\\n                        titleVisible: false,\\\\n                        onChange: \\\\\\\"putMyVar('name', input)\\\\\\\",\\\\n                        cls: \\\\\\\"aiadd\\\\\\\"\\\\n                    }\\\\n                },\\\\n                {\\\\n                    title: \\\\\\\"\\\\\\\",\\\\n                    desc: \\\\\\\"请输入网站搜索地址\\\\\\\",\\\\n                    col_type: \\\\\\\"input\\\\\\\",\\\\n                    extra: {\\\\n                        titleVisible: false,\\\\n                        onChange: \\\\\\\"putMyVar('surl', input)\\\\\\\",\\\\n                        cls: \\\\\\\"aiadd\\\\\\\"\\\\n                    }\\\\n                },\\\\n                {\\\\n                    title: \\\\\\\"提交保存\\\\\\\",\\\\n                    col_type: \\\\\\\"text_center_1\\\\\\\",\\\\n                    url: $(\\\\\\\"#noLoading#\\\\\\\").lazyRule(() => {\\\\n                        let surl = getMyVar(\\\\\\\"surl\\\\\\\", \\\\\\\"\\\\\\\");\\\\n                        let name = getMyVar(\\\\\\\"name\\\\\\\", \\\\\\\"\\\\\\\");\\\\n                        if (surl == \\\\\\\"\\\\\\\" || name == \\\\\\\"\\\\\\\") {\\\\n                            return \\\\\\\"toast://请输入完整内容\\\\\\\"\\\\n                        }\\\\n                        let r = decodeURIComponent(surl);\\\\n                        r = r.replace(new RegExp(\\\\\\\"[\\\\\\\\u4e00-\\\\\\\\u9fa5]+\\\\\\\", \\\\\\\"g\\\\\\\"), \\\\\\\"**\\\\\\\");\\\\n                        let {\\\\n                            addRule\\\\n                        } = $.require(\\\\\\\"hiker://page/data\\\\\\\");\\\\n                        addRule(name, r);\\\\n                        refreshPage();\\\\n                        return \\\\\\\"toast://已保存\\\\\\\";\\\\n                    }),\\\\n                    extra: {\\\\n                        cls: \\\\\\\"aiadd\\\\\\\"\\\\n                    }\\\\n                }\\\\n            ]);\\\\n            return \\\\\\\"hiker://empty\\\\\\\"\\\\n        }, MY_RULE.title),\\\\n        col_type: \\\\\\\"flex_button\\\\\\\",\\\\n    });\\\\n    d.push({\\\\n        title: \\\\\\\" - \\\\\\\",\\\\n        url: \\\\\\\"select://\\\\\\\" + JSON.stringify({\\\\n            options: names,\\\\n            title: \\\\\\\"请选择要删除的站点\\\\\\\",\\\\n            js: $.toString(() => {\\\\n                let {\\\\n                    removeRule\\\\n                } = $.require(\\\\\\\"hiker://page/data\\\\\\\");\\\\n                removeRule(input);\\\\n                refreshPage();\\\\n                return \\\\\\\"toast://OK\\\\\\\";\\\\n            })\\\\n        }),\\\\n        col_type: \\\\\\\"flex_button\\\\\\\",\\\\n        extra: {\\\\n            id: MY_RULE.title + \\\\\\\"aisdel\\\\\\\"\\\\n        }\\\\n    });\\\\n    d.push({\\\\n        col_type: \\\\\\\"blank_block\\\\\\\"\\\\n    });\\\\n\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"验证码\\\",\\\"path\\\":\\\"yzm\\\",\\\"rule\\\":\\\"function check(url, html, d) {\\\\n    let reload = false;\\\\n    return reload;\\\\n}\\\\n\\\\nfunction test(url, html, d, old, key, rule) {\\\\n    if (/5秒|频繁/.test(html)) {\\\\n        d.push({\\\\n            title: '搜索需间隔5秒，点击重新加载',\\\\n            col_type: \\\\\\\"text_1\\\\\\\",\\\\n            desc: \\\\\\\"““””<font color=#f13b66a>\\\\\\\" + rule + \\\\\\\"</font>\\\\\\\",\\\\n            url: $().lazyRule((url, old, key, rule) => {\\\\n                let sp = $.require(\\\\\\\"hiker://page/sp\\\\\\\");\\\\n                let d = sp(old, key, rule);\\\\n                let {\\\\n                    wrap\\\\n                } = $.require(\\\\\\\"hiker://page/tool\\\\\\\");\\\\n                for (let it of d) {\\\\n                    it.title = wrap(it.title, key);\\\\n                }\\\\n                addItemAfter(url, d);\\\\n                deleteItem(url);\\\\n                return \\\\\\\"toast://OK\\\\\\\";\\\\n            }, url, old, key, rule),\\\\n            extra: {\\\\n                id: url\\\\n            }\\\\n        });\\\\n    }\\\\n}\\\\n\\\\n$.exports = {\\\\n    check: check,\\\\n    test: test\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"工具\\\",\\\"path\\\":\\\"tool\\\",\\\"rule\\\":\\\"function wrap(text, s) {\\\\n    return text.includes(\\\\\\\"““””\\\\\\\") ? text : \\\\\\\"““””\\\\\\\" + text.replace(new RegExp(\\\\\\\"<em>|</em>\\\\\\\", \\\\\\\"g\\\\\\\"), \\\\\\\"\\\\\\\").replace(new RegExp(s, \\\\\\\"g\\\\\\\"), \\\\\\\"<strong><span style=\\\\\\\\\\\\\\\"color: #1E90FF\\\\\\\\\\\\\\\">\\\\\\\" + s + \\\\\\\"</span></strong>\\\\\\\")\\\\n}\\\\n$.exports = {\\\\n    wrap: wrap\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"单搜\\\",\\\"path\\\":\\\"singles\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nd.push({\\\\n    title: \\\\\\\"搜索\\\\\\\",\\\\n    url: $.toString(() => {\\\\n        putMyVar(\\\\\\\"so\\\\\\\", input);\\\\n        refreshPage();\\\\n    }),\\\\n    col_type: \\\\\\\"input\\\\\\\",\\\\n    desc: \\\\\\\"请输入关键词，尽量少字不要多字\\\\\\\",\\\\n    pic_url: \\\\\\\"\\\\\\\",\\\\n    extra: {\\\\n        defaultValue: getMyVar(\\\\\\\"so\\\\\\\", \\\\\\\"\\\\\\\")\\\\n    }\\\\n});\\\\nlet s = getMyVar(\\\\\\\"so\\\\\\\", \\\\\\\"\\\\\\\");\\\\nlet r = \\\\\\\"\\\\\\\";\\\\nif (s != \\\\\\\"\\\\\\\") {\\\\n    let p = MY_PAGE;\\\\n    let {\\\\n        load\\\\n    } = $.require(\\\\\\\"hiker://page/data\\\\\\\");\\\\n    let {\\\\n        wrap\\\\n    } = $.require(\\\\\\\"hiker://page/tool\\\\\\\");\\\\n    let data = load(p, MY_PARAMS.RULE.name);\\\\n    let arr = data[0].find(s, p);\\\\n    for (let it of arr) {\\\\n        it.title = wrap(it.title, s)\\\\n        d.push(it);\\\\n    }\\\\n}\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"搜索页面\\\",\\\"path\\\":\\\"soup\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nif (MY_PARAMS.key && getMyVar(\\\\\\\"use\\\\\\\", \\\\\\\"\\\\\\\") == \\\\\\\"\\\\\\\") {\\\\n    putMyVar(\\\\\\\"sou\\\\\\\", MY_PARAMS.key);\\\\n    putMyVar(\\\\\\\"use\\\\\\\", \\\\\\\"1\\\\\\\");\\\\n    addListener(\\\\\\\"onClose\\\\\\\", $.toString(() => {\\\\n        clearMyVar(\\\\\\\"use\\\\\\\");\\\\n    }));\\\\n}\\\\n$.require('hiker://page/pro')\\\"}]\",\"proxy\":\"\"}","title":"精排经.济.学.通.识.（第二版） 薛兆丰.epu..."}