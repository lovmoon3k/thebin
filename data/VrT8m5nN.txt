#include <iostream>
#include <cassert>
#include <algorithm>

using namespace std;

struct point {
	int x, y;
};

int X(point a, point b, point c) {
	if (a.x <= 0 && b.x <= 0 && c.x <= 0)
		return 100;
	return 0;
}
int Y(point a, point b, point c) {
	if (a.y >= 0 && b.y >= 0 && c.y >= 0)
		return 50;
	return 0;
}

int dist(point a, point b) {
	return (a.x - b.x) * (a.x - b.x) + (a.y - b.y) * (a.y - b.y);
}

int R(point a, point b, point c) {
	if (dist(a, b) + dist(a, c) == dist(b, c)) return 20;
	if (dist(a, b) + dist(b, c) == dist(a, c)) return 20;
	if (dist(a, c) + dist(b, c) == dist(a, b)) return 20;
	return 1;
}

int main() {
	point a, b, c;
	cin >> a.x >> a.y;
	cin >> b.x >> b.y;
	cin >> c.x >> c.y;
	
	long long ans = 0;
	ans += X(a, b, c);
	ans += Y(a, b, c);
	
	int p[] = {0, 1, 2};
	point pt[] = {a, b, c};
	
	int mx = 0;
	
	do{
		point a = pt[p[0]];
		point b = pt[p[1]];
		point c = pt[p[2]];
		int res = 0;
		if (a.x == 0 && a.y == 0) {
			if (b.x > 0 && b.y > 0 && c.x > 0 && c.y > 0)
				return cout << ans + 1, 0;
			if (b.x > 0 && b.y < 0 && c.x > 0 && c.y < 0)
				return cout << ans + 1, 0;
			if (b.x < 0 && b.y > 0 && c.x < 0 && c.y > 0)
				return cout << ans + 1, 0;
			if (b.x < 0 && b.y < 0 && c.x < 0 && c.y < 0)
				return cout << ans + 1, 0;
		}
		if (a.y == 0 && a.x > 0) {
			if (b.y > 0 && c.y > 0 && b.x > 0 && c.x > 0)
				return cout << ans + 1, 0;
			if (b.y < 0 && c.y < 0 && b.x > 0 && c.x > 0)
				return cout << ans + 1, 0;
		}
		if (a.y == 0 && a.x < 0) {
			if (b.y > 0 && c.y > 0 && b.x < 0 && c.x < 0)
				return cout << ans + 1, 0;
			if (b.y < 0 && c.y < 0 && b.x < 0 && c.x < 0)
				return cout << ans + 1, 0;
		}
		if (a.x == 0 && a.y > 0) {
			if (b.y > 0 && c.y > 0 && b.x < 0 && c.x < 0)
				return cout << ans + 1, 0;
			if (b.y > 0 && c.y > 0 && b.x > 0 && c.x > 0)
				return cout << ans + 1, 0;
		}
		if (a.x == 0 && a.y < 0) {
			if (b.y < 0 && c.y < 0 && b.x < 0 && c.x < 0)
				return cout << ans + 1, 0;
			if (b.y < 0 && c.y < 0 && b.x > 0 && c.x > 0)
				return cout << ans + 1, 0;
		}
		//if (a.y * b.y < 0 && a.y * c.y < 0 && b.y * c.y > 0 && a.x * b.x > 0 && a.x * c.x > 0 && b.x * c.x > 0)
		//  assert(false);
		//if (a.x * b.x < 0 && a.x * c.x < 0 && b.x * c.x > 0 && a.y * b.y > 0 && a.y * c.y > 0 && b.y * c.y > 0)
		//  assert(false);
		if (a.x == 0 && a.y != 0 && b.y == 0 && b.x != 0 && b.x * c.x > 0 && a.y * c.y > 0)
		  return cout << ans + 2, 0;
		if ((a.x == 0 && a.y == 0 && b.x == 0 && c.y == 0)) {
			mx = max(mx, 20);
		} else if (a.y == 0 && b.y == 0) {
			res = 10;
			if (c.x == 0)
				res++;
			else if (c.x * a.x < 0 && c.x * b.x < 0)
				res += 2;
			else if (c.x * a.x < 0 || c.x * b.x < 0)
				res ++;
			mx = max(mx, res);
		} else if (a.x == 0 && b.x == 0) {
			res = 10;
			if (c.y == 0)
				res++;
			else if (c.y * a.y < 0 && c.y * b.y < 0)
				res += 2;
			else if (c.y * a.y < 0 || c.y * b.y < 0)
				res ++;
			mx = max(mx, res);
		} else if (c.x * a.x < 0 && c.x * b.x < 0) {
			res = 2;
			if (c.y * a.y < 0 && c.y * b.y < 0)
				res += 2;
			else if (c.y == 0)
				res++;
			mx = max(mx, res);
		} else if (c.y * a.y < 0 && c.y * b.y < 0) {
			res = 2;
			if (c.x * a.x < 0 && c.x * b.x < 0)
				res += 2;
			else if (c.x == 0)
				res++;
			mx = max(mx, res);
		} else if (a.x == 0) {
			res = 1;
			if (c.x * b.x < 0)
				res ++;
			if (c.y * b.y < 0)
				res ++;
			mx = max(res, mx);
		}
		
	} while (next_permutation(p, p+3));
	
	cout << ans + mx << '\n';
	
	return 0;
}