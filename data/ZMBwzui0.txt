#include<iostream>
#include<vector>
#include<algorithm>
#include<set>
using namespace std;
struct element{
    int v, i;
    bool operator < (const element &b) const {return v==b.v? i>b.i: v<b.v;} 
};
 
int main(){
    int t; cin >> t;
    while (t--){
        bool posible = true;
        int n; cin >> n;
        set<int> as,bs;
        vector<element>arr(n);
        for(int i=0; i<n; i++){
            int x; cin >> x;
            arr[i] = {x, i};
        }
        for(int i=1; i<=n; i++){as.insert(i); bs.insert(i);}
        sort(arr.rbegin(), arr.rend());
        vector<int>a(n), b(n);
        for(int i=0; i<n; i++){
            element c = arr[i];
            if(as.find(c.v) != as.end()){
                a[c.i] = c.v; as.erase(c.v);
            }else if(bs.find(c.v) != bs.end()){
                b[c.i] = c.v; bs.erase(c.v);
            }
        }
 
        for(int i=0; i<n; i++){
            if(a[i] == 0 && as.size()){
                int x = b[i];
                if(as.size() == 1){
                    if(*as.begin() <= x){a[i] = *as.begin(); as.erase(*as.begin()); continue;}
                    else continue;
                }
                auto newV = as.upper_bound(x);
                if(newV != as.end()){newV--; a[i] = *newV; as.erase(*newV);}
                else if(*as.rbegin() <= x){a[i] = *as.rbegin(); as.erase(*as.rbegin());}
            }
        }
 
        for(int i=0; i<n; i++){
            if(b[i] == 0 && bs.size()){
                int x = a[i];
                if(bs.size() == 1){
                    if(*bs.begin() <= x){b[i] = *bs.begin(); bs.erase(*bs.begin()); continue;}
                    else continue;
                }
                auto newV = bs.upper_bound(x);
                if(newV != bs.end()){newV--; b[i] = *newV; bs.erase(*newV);}
                else if(*bs.rbegin() <= x){b[i] = *bs.rbegin(); bs.erase(*bs.rbegin());}
            }
        }
 
        for(int i=0; i<n; i++){if(a[i]<=0 || b[i] <= 0){posible=false; break;}}
        cerr<<"------------------\n";
        if(!posible)cout << "NO\n";
        else{
            cout << "YES\n";
            for(auto &e:a)cout << e << " "; cout << endl;
            for(auto &e:b)cout << e << " "; cout << endl;          
        }
 
        cerr<<"------------------\n";
    }
    return 0;
}