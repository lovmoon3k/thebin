if fs.exists("wanteditems.lua") then
  wantedItems = dofile("wanteditems.lua")
else
  wantedItems = {}
  local file = fs.open("wanteditems.lua", "w")
  file.write("return {}")
  file.close()
end

local function saveWantedItems()
local file = fs.open("wanteditems.lua", "w")
file.write("return {\n")
for name, count in pairs(wantedItems) do
file.write((" [%q] = %d,\n"):format(name, count))
end
file.write("}\n")
file.close()
end

local function addWantedItem()
term.clear()
term.setCursorPos(1,1)
print("Enter the name of the desired item:")
local name = read()
print("Enter the desired maximum count for this item:")
local count = tonumber(read())
wantedItems[name] = count
saveWantedItems()
print(("%d x %s added to wanted items"):format(count, name))
local event, key, isHeld = os.pullEvent("key")
end

local function removeWantedItem()
term.clear()
term.setCursorPos(1,1)
print("Enter the name of the item to remove:")
local name = read()
if wantedItems[name] then
wantedItems[name] = nil
saveWantedItems()
print(("%s removed from wanted items"):format(name))
else
print("Item not found in wanted items")
end
local event, key, isHeld = os.pullEvent("key")
end


local function viewWantedItems()
term.clear()
term.setCursorPos(1,1)
print("Wanted items:")

local items = {}
for name, count in pairs(wantedItems) do
table.insert(items, {name = name, count = count})
end

local selected = 1
while true do
term.clear()
term.setCursorPos(1,1)
for i, item in ipairs(items) do
local prefix = i == selected and "> " or " "
print(prefix .. item.count .. " x " .. item.name)
end
local event, key = os.pullEvent("key")
if key == keys.up and selected > 1 then
  selected = selected - 1
elseif key == keys.down and selected < #items then
  selected = selected + 1
elseif key == keys.enter then
  term.clear()
  term.setCursorPos(1,1)
  print("1. Delete entry")
  print("2. Change entry")
  print("3. Back")
  print("Enter your choice:")
  local subchoice = tonumber(read())
  if subchoice == 1 then
    wantedItems[items[selected].name] = nil
    saveWantedItems()
    print(("%s removed from wanted items"):format(items[selected].name))
	sleep(1)
    table.remove(items, selected)
    if selected > #items then
      selected = #items
    end
  elseif subchoice == 2 then
    print("Enter the new desired maximum count for this item:")
    local newCount = tonumber(read())
    wantedItems[items[selected].name] = newCount
    saveWantedItems()
    items[selected].count = newCount
    print(("%d x %s changed in wanted items"):format(newCount, items[selected].name))
	sleep(1)
  elseif subchoice == 3 then
    break
  else
    print("Invalid choice")
	sleep(1)
  end
elseif key == keys.backspace or key == keys.escape then
  break
end
end
end


while true do
term.clear()
term.setCursorPos(1,1)
print("1. Add desired item")
print("2. View and remove wanted items")
print("3. Quit")
print("Enter your choice:")
local choice = tonumber(read())
if choice == 1 then
addWantedItem()
elseif choice == 2 then
viewWantedItems()
elseif choice == 3 then
break
else
print("Invalid choice")
end
end