#include <bits/stdc++.h>
#include <random>

#pragma GCC optimize("Ofast,unroll-loops,fast-math,inline,no-stack-protector")
#pragma GCC target("sse,sse2,sse3,ssse3,sse4,sse4.1,sse4.2,avx,avx2,abm,mmx,popcnt")

using namespace std;
using ll = long long;
#define pb push_back
#define pp pop_back
#define ld long double
#define RandGen mt19937 rng(chrono::steady_clock::now().time_since_epoch().count())

#ifdef FAST_ALLOCATOR_MEMORY
int allocator_pos = 0;
    char allocator_memory[(int)FAST_ALLOCATOR_MEMORY];
    inline void * operator new ( size_t n ) {
        char res = allocator_memory + allocator_pos;
        allocator_pos += n;
        assert(allocator_pos <= (int)FAST_ALLOCATOR_MEMORY);
        return (void)res;
    }
    inline void operator delete ( void * ) noexcept { }
    //inline void * operator new [] ( size_t ) { assert(0); }
    //inline void operator delete [] ( void * ) { assert(0); }
#endif

const int INF = INT_MAX;
int CON = 1000;
int n, m;
vector<vector<int>> ans;
vector<vector<int>> dp;
vector<vector<int>> cnt;


void simulate(int a) {
  int jump = 1;
  while (true) {
    int block = (a - 1) / CON;
    int elem = ((a - 1) % CON);
    if (dp[block][elem] == 0) {
      if (a + ans[block][elem] <= n) {
        a += ans[block][elem];
      } else {
        break;
      }
    }
    a += dp[block][elem];
    jump += cnt[block][elem];
  }
  cout << a << ' ' << jump << '\n';
}

void update(int block) {
  for (int i = ans[block].size() - 1; i >= 0; --i) {
    if (dp[block][i] + i >= ans[block].size()) {
      if (block * CON + i + 1 + ans[block][i] > n) {
        dp[block][i] = 0;
        cnt[block][i] = 0;
      } else {
        dp[block][i] = ans[block][i];
        cnt[block][i] = 1;
      }
    } else {
      if (dp[block][i] + dp[block][dp[block ][i] + i] < CON) {
        cnt[block][i] = cnt[block][dp[block][i] + i] + 1;
        dp[block][i] += dp[block][dp[block][i] + i];
      }
    }
  }
}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  cin >> n >> m;
  for (int i = 0; i < n;) {
    int val = i;
    vector<int> vec;
    vector<int> cnt1;
    for (; i < min(n, val + CON); ++i) {
      int a;
      cin >> a;
      vec.push_back(a);
      cnt1.push_back(1);
    }
    cnt.push_back(cnt1);
    dp.push_back(vec);
    ans.push_back(vec);
  }
  for (int i = 0; i < ans.size(); ++i) {
    update(i);
  }
  for (int i = 0; i < m; ++i) {
    int c;
    cin >> c;
    if (c == 0) {
      int a, b;
      cin >> a >> b;
      int block = (a - 1) / CON;
      int elem = ((a - 1) % CON);
      ans[block][elem] = b;
      for (int j = 0; j < cnt[block].size(); ++j) {
        cnt[block][j] = 1;
      }
      dp[block] = ans[block];
      update(block);
    } else {
      int a;
      cin >> a;
      simulate(a);
    }
  }
  return 0;
}