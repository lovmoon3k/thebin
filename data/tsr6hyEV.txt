std::error_code OA8000Mapper::processingNnData(const std::vector<DataPtr>& inData, std::vector<DataPtr>& outData)
    {
        // clean input / output structs
        memset(&odInput, 0, sizeof(t_algo_od_input));
        memset(&odOutput, 0, sizeof(t_algo_od_result));

        // TODO: need frame addr from inData
        // odInput.frm.addr = (u8*)frame->addr;

        // int ret = algo_od_process(&odInput, &odOutput);
        
        // if (ret) {
        //     LOG4CPLUS_ERROR(logger(), "algo_od_process failed");
        //     // return ret;
        // }

        auto img = std::dynamic_pointer_cast<ImageData>(inData[0]);
        LOG4CPLUS_DEBUG(Vms::NN::logger(), "[OA8000Mapper->" << std::string(__func__) << "] img width  = " << img->width());
        LOG4CPLUS_DEBUG(Vms::NN::logger(), "[OA8000Mapper->" << std::string(__func__) << "] img height = " << img->height());
        LOG4CPLUS_DEBUG(Vms::NN::logger(), "[OA8000Mapper->" << std::string(__func__) << "] img size   = " << img->width() * img->height() << " bytes");

        auto locked = img->lock();

        Core::Byte* src = locked.plane[0].ptr;


        odInput.frm.addr = (u8*)src;
		// int ret = algo_od_process(&odInput, &odOutput);
        
        // if (ret) {
        //     LOG4CPLUS_ERROR(Vms::NN::logger(), "algo_od_process failed");
        //     return {};
        // }
	}
