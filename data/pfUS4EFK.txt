#define OFFSET_PLAYER_INFO_WANTED				0x8E8 //0x888
	red_zenith(Signature("? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 27 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 26 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 44 ? ? 80 42 ? ? ? 43 ? ? ? ? 25").Scan().As<float*>()),//GTA5.exe+26BB960
	green_zenith(Signature("? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 27 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 26 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 44 ? ? 80 42 ? ? ? 43 ? ? ? ? 25").Scan().As<float*>()),//GTA5.exe+26BB964
	blue_zenith(Signature("? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 27 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 26 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 44 ? ? 80 42 ? ? ? 43 ? ? ? ? 25").Scan().As<float*>()),//GTA5.exe+26BB968
	red_transition(Signature("? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 27 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 26 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 44 ? ? 80 42 ? ? ? 43 ? ? ? ? 25").Scan().As<float*>()),//GTA5.exe+26BB990 //GTA5.exe+26CEB80 - 00 60 60              - add [rax+60],ah
	green_transition(Signature("? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 27 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 26 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 44 ? ? 80 42 ? ? ? 43 ? ? ? ? 25").Scan().As<float*>()),//GTA5.exe+26BB994
	blue_transition(Signature("? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 27 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 26 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 44 ? ? 80 42 ? ? ? 43 ? ? ? ? 25").Scan().As<float*>()),//GTA5.exe+26BB998
	











#pragma region sunintensity
		case sunintensity:
		{
			Menu::Title("Sun Change Color");
			headers::thunderheaders();
			if (Menu::Option((char*)langage::h16.c_str())) { TIME::SET_CLOCK_TIME(16, 0, 0); }
			Menu::Float("redsun value", g_Settings.sunred, 0.f, 255.0f, 1.f);
			Menu::Float("greensun value", g_Settings.sungreen, 0.f, 255.0f, 1.f);
			Menu::Float("bluesun value", g_Settings.sunblue, 0.f, 255.0f, 1.f);
			Menu::Float("sunalpha value", g_Settings.sunalpha, 0.f, 255.0f, 1.f);
			if (Menu::Option("sun"))
			{
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				memset(reinterpret_cast<void*>(g_base_address + 0xE437F2), 0x90, 4); //E4369E
				uintptr_t redsun = engine::scan_address(g_base_address + 0x2835800, {});//0x2822600
				uintptr_t greensun = engine::scan_address(g_base_address + 0x2835804, {});//0x2822604
				uintptr_t bluesun = engine::scan_address(g_base_address + 0x2835808, {});//0x2822608
				*(float*)redsun = (g_Settings.sunred / 255.f) * g_Settings.sunalpha;
				*(float*)greensun = (g_Settings.sungreen / 255.f) * g_Settings.sunalpha;
				*(float*)bluesun = (g_Settings.sunblue / 255.f) * g_Settings.sunalpha;
			}
			if (Menu::Option("Reset Sun"))
			{
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				std::copy_n("\x0F\x29\x41\x40", 4, reinterpret_cast<char*>(g_base_address + 0xE437F2));//moon
			}

			Menu::Float("redsun2 value", g_Settings.sunred2, 0.f, 255.0f, 1.f);
			Menu::Float("greensun2 value", g_Settings.sungreen2, 0.f, 255.0f, 1.f);
			Menu::Float("bluesun2 value", g_Settings.sunblue2, 0.f, 255.0f, 1.f);
			Menu::Float("sunalpha2 value", g_Settings.sunalpha2, 0.f, 255.0f, 1.f);
			if (Menu::Option("sun Atmosphère"))
			{
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				memset(reinterpret_cast<void*>(g_base_address + 0xE437EA), 0x90, 4);//0xE43696
				uintptr_t redsun2 = engine::scan_address(g_base_address + 0x28357F4, {});//0x28225F4
				uintptr_t greensun2 = engine::scan_address(g_base_address + 0x28357F8, {});//0x28225F8
				uintptr_t bluesun2 = engine::scan_address(g_base_address + 0x28357FC, {});//0x28225FC
				*(float*)redsun2 = (g_Settings.sunred2 / 255.f) * g_Settings.sunalpha2;
				*(float*)greensun2 = (g_Settings.sungreen2 / 255.f) * g_Settings.sunalpha2;
				*(float*)bluesun2 = (g_Settings.sunblue2 / 255.f) * g_Settings.sunalpha2;
			}
			if (Menu::Option("Reset Sun Atmosph"))
			{
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				std::copy_n("\x0F\x29\x49\x30", 4, reinterpret_cast<char*>(g_base_address + 0xE437EA));//moon
			}

			Menu::Float("redsun3 value", g_Settings.sun_red, 0.f, 255.0f, 1.f);
			Menu::Float("greensun3 value", g_Settings.sun_green, 0.f, 255.0f, 1.f);
			Menu::Float("bluesun3 value", g_Settings.sun_blue, 0.f, 255.0f, 1.f);
			Menu::Float("sunalpha3 value", g_Settings.sun_alpha, 0.f, 255.0f, 1.f);



			if (Menu::Option("Sun Pattern"))
			{
				auto SunPTR = Memory::pattern("80 3F 00 00 80 3F CD CC 4C 3E 9A 99 99 3E 00 00 80 3F 00 00 80 3F 00");
				DWORD64* d_location = nullptr;
				d_location = (DWORD64*)SunPTR.count(1).get(0).get<DWORD64*>(0);
				std::string datar = std::string(std::to_string(reinterpret_cast<DWORD64>(d_location)));
				DWORD64 base_address = DWORD64(GetModuleHandleA(nullptr));
				Log::Msg((char*)datar.c_str());
				Log::Msg((char*)std::string(std::to_string(base_address)).c_str());
				std::stringstream myStrm(datar);
				DWORD64 x;
				myStrm >> x;
				std::string address2;
				stringstream addrs2;
				addrs2 << hex << "0x" << x;
				address2 = addrs2.str();
				Log::Msg((char*)address2.c_str());

				std::string address;
				stringstream addrs;
				addrs << hex << "0x" << base_address;
				address = addrs.str();
				Log::Msg((char*)address.c_str());
				std::stringstream myStrm1;
				myStrm1 << base_address;
				DWORD64 x1;
				myStrm1 >> x1;
				std::stringstream myStrm2(datar);
				DWORD64 x2;
				myStrm2 >> x2;
				DWORD64 in2 = ((DWORD64)x2 - (DWORD64)x1);
				Log::Msg((char*)std::string(std::to_string(in2)).c_str());
				std::string address3;
				stringstream addrs3;
				addrs3 << hex << "0x" << in2;
				address3 = addrs3.str();
				Log::Msg((char*)address3.c_str());

				Addresss::SunPointer = in2;
				//0x2822d6e
				Addresss::SunPointerred = (DWORD64)Addresss::SunPointer - (DWORD64)0x76E;
				Addresss::SunPointergreen = (DWORD64)Addresss::SunPointer - (DWORD64)0x76A;
				Addresss::SunPointerblue = (DWORD64)Addresss::SunPointer - (DWORD64)0x766;
				Addresss::SunPointerpatch = (DWORD64)Addresss::SunPointer - (DWORD64)0x19F277C;
				/*
				0x2822d6e - 0xE4369E = 0x19DF6D0
				0x2822d6e - 0x2822600 = 0x76E
				0x2822d6e - 0x2822604 = 0x76A
				0x2822d6e - 0x2822608 = 0x766
				*/
				memset(reinterpret_cast<void*>(base_address + Addresss::SunPointerpatch), 0x90, 4);
				uintptr_t redsun2 = engine::scan_address(base_address + Addresss::SunPointerred, {});
				uintptr_t greensun2 = engine::scan_address(base_address + Addresss::SunPointergreen, {});
				uintptr_t bluesun2 = engine::scan_address(base_address + Addresss::SunPointerblue, {});
				*(float*)redsun2 = (g_Settings.sun_red / 255.f) * g_Settings.sun_alpha;
				*(float*)greensun2 = (g_Settings.sun_green / 255.f) * g_Settings.sun_alpha;
				*(float*)bluesun2 = (g_Settings.sun_blue / 255.f) * g_Settings.sun_alpha;
			}
			if (Menu::Option("Reset Sun"))
			{
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				std::copy_n("\x0F\x29\x41\x40", 4, reinterpret_cast<char*>(g_base_address + Addresss::SunPointerpatch));//0xE4369E
			}
			Menu::Float("redsun A value", g_Settings.sun_red_a, 0.f, 255.0f, 1.f);
			Menu::Float("greensun A value", g_Settings.sun_green_a, 0.f, 255.0f, 1.f);
			Menu::Float("bluesun A value", g_Settings.sun_blue_a, 0.f, 255.0f, 1.f);
			Menu::Float("sun A alpha4 value", g_Settings.sun_alpha, 0.f, 255.0f, 1.f);
			if (Menu::Option("sun Atmosphère Pattern"))
			{
				auto SunPTR = Memory::pattern("80 3F 00 00 80 3F CD CC 4C 3E 9A 99 99 3E 00 00 80 3F 00 00 80 3F 00");
				DWORD64* d_location = nullptr;
				d_location = (DWORD64*)SunPTR.count(1).get(0).get<DWORD64*>(0);
				std::string datar = std::string(std::to_string(reinterpret_cast<DWORD64>(d_location)));
				DWORD64 base_address = DWORD64(GetModuleHandleA(nullptr));
				Log::Msg((char*)datar.c_str());
				Log::Msg((char*)std::string(std::to_string(base_address)).c_str());
				std::stringstream myStrm(datar);
				DWORD64 x;
				myStrm >> x;
				std::string address2;
				stringstream addrs2;
				addrs2 << hex << "0x" << x;
				address2 = addrs2.str();
				Log::Msg((char*)address2.c_str());

				std::string address;
				stringstream addrs;
				addrs << hex << "0x" << base_address;
				address = addrs.str();
				Log::Msg((char*)address.c_str());
				std::stringstream myStrm1;
				myStrm1 << base_address;
				DWORD64 x1;
				myStrm1 >> x1;
				std::stringstream myStrm2(datar);
				DWORD64 x2;
				myStrm2 >> x2;
				DWORD64 in2 = ((DWORD64)x2 - (DWORD64)x1);
				Log::Msg((char*)std::string(std::to_string(in2)).c_str());
				std::string address3;
				stringstream addrs3;
				addrs3 << hex << "0x" << in2;
				address3 = addrs3.str();
				Log::Msg((char*)address3.c_str());

				Addresss::SunPointerat = in2;
				//0x2822d6e
				Addresss::SunPointerredat = (DWORD64)Addresss::SunPointerat - (DWORD64)0x77A;
				Addresss::SunPointergreenat = (DWORD64)Addresss::SunPointerat - (DWORD64)0x776;
				Addresss::SunPointerblueat = (DWORD64)Addresss::SunPointerat - (DWORD64)0x772;
				Addresss::SunPointerpatchat = (DWORD64)Addresss::SunPointerat - (DWORD64)0x19F2784;//0x19DF6D8
				/*
				0x2822d6e - 0xE43696 = 0x19DF6D8
				0x2822d6e - 0x28225F4 = 0x77A
				0x2822d6e - 0x28225F8 = 0x776
				0x2822d6e - 0x28225FC = 0x772
				*/
				memset(reinterpret_cast<void*>(base_address + Addresss::SunPointerpatchat), 0x90, 4);
				uintptr_t redsun2 = engine::scan_address(base_address + Addresss::SunPointerredat, {});
				uintptr_t greensun2 = engine::scan_address(base_address + Addresss::SunPointergreenat, {});
				uintptr_t bluesun2 = engine::scan_address(base_address + Addresss::SunPointerblueat, {});
				*(float*)redsun2 = (g_Settings.sun_red_a / 255.f) * g_Settings.sun_alpha_a;
				*(float*)greensun2 = (g_Settings.sun_green_a / 255.f) * g_Settings.sun_alpha_a;
				*(float*)bluesun2 = (g_Settings.sun_blue_a / 255.f) * g_Settings.sun_alpha_a;
			}

			if (Menu::Option("Reset Sun Atmosph"))
			{
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				std::copy_n("\x0F\x29\x49\x30", 4, reinterpret_cast<char*>(g_base_address + Addresss::SunPointerpatchat));
			}



			headers::thunderbackgrounds();
			backgrounds::casesixteen();
		}
		break;
#pragma endregion
#pragma region moonintensity
		case moonintensity:
		{
			Menu::Title("Moon Change Color");
			headers::thunderheaders();
			if (Menu::Option((char*)langage::h3.c_str())) { TIME::SET_CLOCK_TIME(3, 0, 0); }

			Menu::Float("redmoon value", g_Settings.moonred, 0.f, 255.0f, 1.f);
			Menu::Float("greenmoon value", g_Settings.moongreen, 0.f, 255.0f, 1.f);
			Menu::Float("bluemoon value", g_Settings.moonblue, 0.f, 255.0f, 1.f);
			Menu::Float("moonalpha value", g_Settings.moonalpha, 0.f, 255.0f, 1.f);
			if (Menu::Option("Moon"))
			{
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				memset(reinterpret_cast<void*>(g_base_address + 0xE43805), 0x90, 4);//0xE436B1
				uintptr_t redmoon = engine::scan_address(g_base_address + 0x2822628, {});
				uintptr_t greenmoon = engine::scan_address(g_base_address + 0x282262C, {});
				uintptr_t bluemoon = engine::scan_address(g_base_address + 0x2822630, {});
				*(float*)redmoon = (g_Settings.moonred / 255.f) * g_Settings.moonalpha;
				*(float*)greenmoon = (g_Settings.moongreen / 255.f) * g_Settings.moonalpha;
				*(float*)bluemoon = (g_Settings.moonblue / 255.f) * g_Settings.moonalpha;
			}
			if (Menu::Option("Reset Moon"))
			{
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				std::copy_n("\x0F\x29\x41\x60", 4, reinterpret_cast<char*>(g_base_address + 0xE436B1));//moon
			}

			Menu::Float("redmoon2 value", g_Settings.moon_red, 0.f, 255.0f, 1.f);
			Menu::Float("greenmoon2 value", g_Settings.moon_green, 0.f, 255.0f, 1.f);
			Menu::Float("bluemoon2 value", g_Settings.moon_blue, 0.f, 255.0f, 1.f);
			Menu::Float("moonalpha2 value", g_Settings.moon_alpha, 0.f, 255.0f, 1.f);

			if (Menu::Option("moon2 Pattern"))
			{
				auto moonPTR = Memory::pattern("00 62 6F 61 74 73 65 61 72 63 68 6C 69 67 68 74 2E 6D 61 69 6E 4C 69 67 68 74 49 6E 66 6F 2E 6C 69 67 68 74 46 61 64 65 44 69 73 74 00 79 46 61 72 00 78 70 6F 6E 65 6E 74 00 6E 74 00");
				DWORD64* d_location = nullptr;
				d_location = (DWORD64*)moonPTR.count(1).get(0).get<DWORD64*>(0);
				std::string datar = std::string(std::to_string(reinterpret_cast<DWORD64>(d_location)));
				DWORD64 base_address = DWORD64(GetModuleHandleA(nullptr));
				Log::Msg((char*)datar.c_str());
				Log::Msg((char*)std::string(std::to_string(base_address)).c_str());
				std::stringstream myStrm(datar);
				DWORD64 x;
				myStrm >> x;
				std::string address2;
				stringstream addrs2;
				addrs2 << hex << "0x" << x;
				address2 = addrs2.str();
				Log::Msg((char*)address2.c_str());

				std::string address;
				stringstream addrs;
				addrs << hex << "0x" << base_address;
				address = addrs.str();
				Log::Msg((char*)address.c_str());
				std::stringstream myStrm1;
				myStrm1 << base_address;
				DWORD64 x1;
				myStrm1 >> x1;
				std::stringstream myStrm2(datar);
				DWORD64 x2;
				myStrm2 >> x2;
				DWORD64 in2 = ((DWORD64)x2 - (DWORD64)x1);
				Log::Msg((char*)std::string(std::to_string(in2)).c_str());
				std::string address3;
				stringstream addrs3;
				addrs3 << hex << "0x" << in2;
				address3 = addrs3.str();
				Log::Msg((char*)address3.c_str());

				Addresss::MoonPointer = in2;

				Addresss::MoonPointerred = (DWORD64)Addresss::MoonPointer - (DWORD64)0x777;//0x2822D9F - 0x2822628 = 0x777
				Addresss::MoonPointergreen = (DWORD64)Addresss::MoonPointer - (DWORD64)0x773;//0x2822D9F - 0x282262C = 0x773
				Addresss::MoonPointerblue = (DWORD64)Addresss::MoonPointer - (DWORD64)0x76F;//0x2822D9F - 0x2822630 = 0x76F
				Addresss::MoonPointerpatch = (DWORD64)Addresss::MoonPointer - (DWORD64)0x19F279A;//0x2822D9F - 0xE436B1 = 0x19DF6EE

				memset(reinterpret_cast<void*>(base_address + Addresss::MoonPointerpatch), 0x90, 4);
				uintptr_t redmoon = engine::scan_address(base_address + Addresss::MoonPointerred, {});
				uintptr_t greenmoon = engine::scan_address(base_address + Addresss::MoonPointergreen, {});
				uintptr_t bluemoon = engine::scan_address(base_address + Addresss::MoonPointerblue, {});
				*(float*)redmoon = (g_Settings.moon_red / 255.f) * g_Settings.moon_alpha;
				*(float*)greenmoon = (g_Settings.moon_green / 255.f) * g_Settings.moon_alpha;
				*(float*)bluemoon = (g_Settings.moon_blue / 255.f) * g_Settings.moon_alpha;

			}
			if (Menu::Option("Reset Moon Pattern"))
			{
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				std::copy_n("\x0F\x29\x41\x60", 4, reinterpret_cast<char*>(g_base_address + Addresss::MoonPointerred));//moon
			}


			headers::thunderbackgrounds();
			/*backgrounds::caseseven();*/
			/*backgrounds::casesixteen();*/
			backgrounds::casethirteen();
		}
		break;
#pragma endregion

#pragma region skycolor
		case skycolor:
		{
			Menu::Title("Sky Change Color");
			headers::thunderheaders();

			Menu::Float("redsky value", g_Settings.sky_red_p, 0.f, 255.0f, 1.f);
			Menu::Float("greensky value", g_Settings.sky_green_p, 0.f, 255.0f, 1.f);
			Menu::Float("bluesky value", g_Settings.sky_blue_p, 0.f, 255.0f, 1.f);
			Menu::Float("skyalpha value", g_Settings.sky_alpha_p, 0.f, 255.0f, 1.f);
			if (Menu::Option("Sky Pattern"))
			{
				auto SkyPTR = Memory::pattern("00 62 6F 61 74 73 65 61 72 63 68 6C 69 67 68 74 2E 6D 61 69 6E 4C 69 67 68 74 49 6E 66 6F 2E 6C 69 67 68 74 46 61 64 65 44 69 73 74 00 79 46 61 72 00 78 70 6F 6E 65 6E 74 00 6E 74 00");
				DWORD64* d_location = nullptr;
				d_location = (DWORD64*)SkyPTR.count(1).get(0).get<DWORD64*>(0);
				std::string datar = std::string(std::to_string(reinterpret_cast<DWORD64>(d_location)));
				DWORD64 base_address = DWORD64(GetModuleHandleA(nullptr));
				Log::Msg((char*)datar.c_str());
				Log::Msg((char*)std::string(std::to_string(base_address)).c_str());
				std::stringstream myStrm(datar);
				DWORD64 x;
				myStrm >> x;
				std::string address2;
				stringstream addrs2;
				addrs2 << hex << "0x" << x;
				address2 = addrs2.str();
				Log::Msg((char*)address2.c_str());

				std::string address;
				stringstream addrs;
				addrs << hex << "0x" << base_address;
				address = addrs.str();
				Log::Msg((char*)address.c_str());
				std::stringstream myStrm1;
				myStrm1 << base_address;
				DWORD64 x1;
				myStrm1 >> x1;
				std::stringstream myStrm2(datar);
				DWORD64 x2;
				myStrm2 >> x2;
				DWORD64 in2 = ((DWORD64)x2 - (DWORD64)x1);
				Log::Msg((char*)std::string(std::to_string(in2)).c_str());
				std::string address3;
				stringstream addrs3;
				addrs3 << hex << "0x" << in2;
				address3 = addrs3.str();
				Log::Msg((char*)address3.c_str());

				Addresss::SkyPointer = in2;
				Addresss::SkyPointerred = (DWORD64)Addresss::SkyPointer - (DWORD64)0x5C7;//0x2822D9F - 0x28227D8 = 0x5C7
				Addresss::SkyPointergreen = (DWORD64)Addresss::SkyPointer - (DWORD64)0x5C3;//0x2822D9F - 0x28227DC = 0x5C3
				Addresss::SkyPointerblue = (DWORD64)Addresss::SkyPointer - (DWORD64)0x5BF;//0x2822D9F - 0x28227E0 = 0x5BF
				Addresss::SkyPointerpatch = (DWORD64)Addresss::SkyPointer - (DWORD64)0x19F27BD;//0x2822D9F - 0xE43686 = 0x19DF719
				//GTA5.exe+E43686 - 0F29 49 10

				memset(reinterpret_cast<void*>(base_address + Addresss::SkyPointerpatch), 0x90, 4);
				uintptr_t redsky2 = engine::scan_address(base_address + Addresss::SkyPointerred, {});
				uintptr_t greensky2 = engine::scan_address(base_address + Addresss::SkyPointergreen, {});
				uintptr_t bluesky2 = engine::scan_address(base_address + Addresss::SkyPointerblue, {});
				*(float*)redsky2 = (g_Settings.sky_red_p / 255.f) * g_Settings.sky_alpha_p;
				*(float*)greensky2 = (g_Settings.sky_green_p / 255.f) * g_Settings.sky_alpha_p;
				*(float*)bluesky2 = (g_Settings.sky_blue_p / 255.f) * g_Settings.sky_alpha_p;

				/*
				 GTA5.exe+E43686 - 0F29 49 10
				//	7FF60BF327D8
				//	GTA5.exe + 28227D8//red
				//	7FF60BF327DC
				//	GTA5.exe + 28227DC//green
				//	7FF60BF327E0
				//	GTA5.exe + 28227E0//blue
				*/
			}
			if (Menu::Option("Reset Sky"))
			{
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				std::copy_n("\x0F\x29\x49\x10", 4, reinterpret_cast<char*>(g_base_address + Addresss::SkyPointerpatch));//0xE43686
			}


			Menu::Float("redsky1 value", g_Settings.sky_red_p1, 0.f, 255.0f, 1.f);
			Menu::Float("greensky1 value", g_Settings.sky_green_p1, 0.f, 255.0f, 1.f);
			Menu::Float("bluesky1 value", g_Settings.sky_blue_p1, 0.f, 255.0f, 1.f);
			Menu::Float("skyalpha1 value", g_Settings.sky_alpha_p1, 0.f, 255.0f, 1.f);

			if (Menu::Option("Sky1 Pattern"))
			{
				auto SkyPTR = Memory::pattern("00 62 6F 61 74 73 65 61 72 63 68 6C 69 67 68 74 2E 6D 61 69 6E 4C 69 67 68 74 49 6E 66 6F 2E 6C 69 67 68 74 46 61 64 65 44 69 73 74 00 79 46 61 72 00 78 70 6F 6E 65 6E 74 00 6E 74 00");
				DWORD64* d_location = nullptr;
				d_location = (DWORD64*)SkyPTR.count(1).get(0).get<DWORD64*>(0);
				std::string datar = std::string(std::to_string(reinterpret_cast<DWORD64>(d_location)));
				DWORD64 base_address = DWORD64(GetModuleHandleA(nullptr));
				Log::Msg((char*)datar.c_str());
				Log::Msg((char*)std::string(std::to_string(base_address)).c_str());
				std::stringstream myStrm(datar);
				DWORD64 x;
				myStrm >> x;
				std::string address2;
				stringstream addrs2;
				addrs2 << hex << "0x" << x;
				address2 = addrs2.str();
				Log::Msg((char*)address2.c_str());

				std::string address;
				stringstream addrs;
				addrs << hex << "0x" << base_address;
				address = addrs.str();
				Log::Msg((char*)address.c_str());
				std::stringstream myStrm1;
				myStrm1 << base_address;
				DWORD64 x1;
				myStrm1 >> x1;
				std::stringstream myStrm2(datar);
				DWORD64 x2;
				myStrm2 >> x2;
				DWORD64 in2 = ((DWORD64)x2 - (DWORD64)x1);
				Log::Msg((char*)std::string(std::to_string(in2)).c_str());
				std::string address3;
				stringstream addrs3;
				addrs3 << hex << "0x" << in2;
				address3 = addrs3.str();
				Log::Msg((char*)address3.c_str());

				Addresss::SkyPointer1 = in2;

				Addresss::SkyPointerred1 = (DWORD64)Addresss::SkyPointer1 - (DWORD64)0x73F;//0x2822D9F - 0x2822660 = 0x73F
				Addresss::SkyPointergreen1 = (DWORD64)Addresss::SkyPointer1 - (DWORD64)0x73B;//0x2822D9F - 0x2822664 = 0x73B
				Addresss::SkyPointerblue1 = (DWORD64)Addresss::SkyPointer1 - (DWORD64)0x737;//0x2822D9F - 0x2822668 = 0x737
				Addresss::SkyPointerpatch1 = (DWORD64)Addresss::SkyPointer1 - (DWORD64)0x19F27BD;//0x2822D9F - 0xE4368E = 0x19DF711
				//GTA5.exe+E4368E - 0F29 41 20

				memset(reinterpret_cast<void*>(base_address + Addresss::SkyPointerpatch1), 0x90, 4);
				uintptr_t redsky2 = engine::scan_address(base_address + Addresss::SkyPointerred1, {});
				uintptr_t greensky2 = engine::scan_address(base_address + Addresss::SkyPointergreen1, {});
				uintptr_t bluesky2 = engine::scan_address(base_address + Addresss::SkyPointerblue1, {});
				*(float*)redsky2 = (g_Settings.sky_red_p1 / 255.f) * g_Settings.sky_alpha_p1;
				*(float*)greensky2 = (g_Settings.sky_green_p1 / 255.f) * g_Settings.sky_alpha_p1;
				*(float*)bluesky2 = (g_Settings.sky_blue_p1 / 255.f) * g_Settings.sky_alpha_p1;

			}
			if (Menu::Option("Reset Sky1"))
			{
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				std::copy_n("\x0F\x29\x41\x20", 4, reinterpret_cast<char*>(g_base_address + Addresss::SkyPointerpatch1));
			}

			Menu::Float("redsky2 value", g_Settings.sky_red_p2, 0.f, 255.0f, 1.f);
			Menu::Float("greensky2 value", g_Settings.sky_green_p2, 0.f, 255.0f, 1.f);
			Menu::Float("bluesky2 value", g_Settings.sky_blue_p2, 0.f, 255.0f, 1.f);
			Menu::Float("skyalpha2 value", g_Settings.sky_alpha_p2, 0.f, 255.0f, 1.f);

			if (Menu::Option("Sky2 Pattern"))
			{
				auto SkyPTR = Memory::pattern("00 62 6F 61 74 73 65 61 72 63 68 6C 69 67 68 74 2E 6D 61 69 6E 4C 69 67 68 74 49 6E 66 6F 2E 6C 69 67 68 74 46 61 64 65 44 69 73 74 00 79 46 61 72 00 78 70 6F 6E 65 6E 74 00 6E 74 00");
				DWORD64* d_location = nullptr;
				d_location = (DWORD64*)SkyPTR.count(1).get(0).get<DWORD64*>(0);
				std::string datar = std::string(std::to_string(reinterpret_cast<DWORD64>(d_location)));
				DWORD64 base_address = DWORD64(GetModuleHandleA(nullptr));
				Log::Msg((char*)datar.c_str());
				Log::Msg((char*)std::string(std::to_string(base_address)).c_str());
				std::stringstream myStrm(datar);
				DWORD64 x;
				myStrm >> x;
				std::string address2;
				stringstream addrs2;
				addrs2 << hex << "0x" << x;
				address2 = addrs2.str();
				Log::Msg((char*)address2.c_str());

				std::string address;
				stringstream addrs;
				addrs << hex << "0x" << base_address;
				address = addrs.str();
				Log::Msg((char*)address.c_str());
				std::stringstream myStrm1;
				myStrm1 << base_address;
				DWORD64 x1;
				myStrm1 >> x1;
				std::stringstream myStrm2(datar);
				DWORD64 x2;
				myStrm2 >> x2;
				DWORD64 in2 = ((DWORD64)x2 - (DWORD64)x1);
				Log::Msg((char*)std::string(std::to_string(in2)).c_str());
				std::string address3;
				stringstream addrs3;
				addrs3 << hex << "0x" << in2;
				address3 = addrs3.str();
				Log::Msg((char*)address3.c_str());

				Addresss::SkyPointer2 = in2;

				Addresss::SkyPointerred2 = (DWORD64)Addresss::SkyPointer2 - (DWORD64)0x733;//0x2822D9F - 0x282266C = 0x733
				Addresss::SkyPointergreen2 = (DWORD64)Addresss::SkyPointer2 - (DWORD64)0x72F;//0x2822D9F - 0x2822670 = 0x72F
				Addresss::SkyPointerblue2 = (DWORD64)Addresss::SkyPointer2 - (DWORD64)0x72B;//0x2822D9F - 0x2822674 = 0x72B
				Addresss::SkyPointerpatch2_ = (DWORD64)Addresss::SkyPointer2 - (DWORD64)0x19F27BD;//0x2822D9F - 0xE4368E = 0x19DF711
				Addresss::SkyPointerpatch2 = (DWORD64)Addresss::SkyPointer2 - (DWORD64)0x19F27B5;//0x2822D9F - 0xE4368E = 0x19DF711
				//GTA5.exe + E4368E - 0F29 41 20 - movaps[rcx + 20], xmm0
				/*GTA5.exe + E437E2 - 0F29 41 20 - movaps[rcx + 20], xmm0
					GTA5.exe + E437EA - 0F29 49 30 - movaps[rcx + 30], xmm1*/
				/*2835F9F - E437E2 = 19F 27BD
					2835F9F - E437EA = 19F 27B5*/
				memset(reinterpret_cast<void*>(base_address + Addresss::SkyPointerpatch2_), 0x90, 4);
				memset(reinterpret_cast<void*>(base_address + Addresss::SkyPointerpatch2), 0x90, 4);
				uintptr_t redsky2 = engine::scan_address(base_address + Addresss::SkyPointerred2, {});
				uintptr_t greensky2 = engine::scan_address(base_address + Addresss::SkyPointergreen2, {});
				uintptr_t bluesky2 = engine::scan_address(base_address + Addresss::SkyPointerblue2, {});
				*(float*)redsky2 = (g_Settings.sky_red_p2 / 255.f) * g_Settings.sky_alpha_p2;
				*(float*)greensky2 = (g_Settings.sky_green_p2 / 255.f) * g_Settings.sky_alpha_p2;
				*(float*)bluesky2 = (g_Settings.sky_blue_p2 / 255.f) * g_Settings.sky_alpha_p2;

			}
			if (Menu::Option("Reset Sky2"))
			{
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				std::copy_n("\x0F\x29\x41\x20", 4, reinterpret_cast<char*>(g_base_address + Addresss::SkyPointerpatch2_));
				std::copy_n("\x0F\x29\x49\x30", 4, reinterpret_cast<char*>(g_base_address + Addresss::SkyPointerpatch2));
			}

			Menu::Float("redsky3 value", g_Settings.sky_red_p3, 0.f, 255.0f, 1.f);
			Menu::Float("greensky3 value", g_Settings.sky_green_p3, 0.f, 255.0f, 1.f);
			Menu::Float("bluesky3 value", g_Settings.sky_blue_p3, 0.f, 255.0f, 1.f);
			Menu::Float("skyalpha3 value", g_Settings.sky_alpha_p3, 0.f, 255.0f, 1.f);

			if (Menu::Option("Sky3 Pattern"))
			{
				auto SkyPTR = Memory::pattern("00 62 6F 61 74 73 65 61 72 63 68 6C 69 67 68 74 2E 6D 61 69 6E 4C 69 67 68 74 49 6E 66 6F 2E 6C 69 67 68 74 46 61 64 65 44 69 73 74 00 79 46 61 72 00 78 70 6F 6E 65 6E 74 00 6E 74 00");
				DWORD64* d_location = nullptr;
				d_location = (DWORD64*)SkyPTR.count(1).get(0).get<DWORD64*>(0);
				std::string datar = std::string(std::to_string(reinterpret_cast<DWORD64>(d_location)));
				DWORD64 base_address = DWORD64(GetModuleHandleA(nullptr));
				Log::Msg((char*)datar.c_str());
				Log::Msg((char*)std::string(std::to_string(base_address)).c_str());
				std::stringstream myStrm(datar);
				DWORD64 x;
				myStrm >> x;
				std::string address2;
				stringstream addrs2;
				addrs2 << hex << "0x" << x;
				address2 = addrs2.str();
				Log::Msg((char*)address2.c_str());

				std::string address;
				stringstream addrs;
				addrs << hex << "0x" << base_address;
				address = addrs.str();
				Log::Msg((char*)address.c_str());
				std::stringstream myStrm1;
				myStrm1 << base_address;
				DWORD64 x1;
				myStrm1 >> x1;
				std::stringstream myStrm2(datar);
				DWORD64 x2;
				myStrm2 >> x2;
				DWORD64 in2 = ((DWORD64)x2 - (DWORD64)x1);
				Log::Msg((char*)std::string(std::to_string(in2)).c_str());
				std::string address3;
				stringstream addrs3;
				addrs3 << hex << "0x" << in2;
				address3 = addrs3.str();
				Log::Msg((char*)address3.c_str());

				Addresss::SkyPointer3 = in2;
				Addresss::SkyPointerred3 = (DWORD64)Addresss::SkyPointer3 - (DWORD64)0x723;//0x2822D9F - 0x282267C = 0x723
				Addresss::SkyPointergreen3 = (DWORD64)Addresss::SkyPointer3 - (DWORD64)0x71F;//0x2822D9F - 0x2822680 = 0x71F
				Addresss::SkyPointerblue3 = (DWORD64)Addresss::SkyPointer3 - (DWORD64)0x71B;//0x2822D9F - 0x2822684 = 0x71B
				Addresss::SkyPointerpatch3 = (DWORD64)Addresss::SkyPointer3 - (DWORD64)0x19F27B5;//0x2822D9F - 0xE43696 = 0x19DF709
				Addresss::SkyPointerpatch3_ = (DWORD64)Addresss::SkyPointer3 - (DWORD64)0x19F27AD;//0x2822D9F - 0xE4369E = 0x19DF701
				memset(reinterpret_cast<void*>(base_address + Addresss::SkyPointerpatch3), 0x90, 4);
				memset(reinterpret_cast<void*>(base_address + Addresss::SkyPointerpatch3_), 0x90, 4);
				uintptr_t redsky2 = engine::scan_address(base_address + Addresss::SkyPointerred3, {});
				uintptr_t greensky2 = engine::scan_address(base_address + Addresss::SkyPointergreen3, {});
				uintptr_t bluesky2 = engine::scan_address(base_address + Addresss::SkyPointerblue3, {});
				*(float*)redsky2 = (g_Settings.sky_red_p3 / 255.f) * g_Settings.sky_alpha_p3;
				*(float*)greensky2 = (g_Settings.sky_green_p3 / 255.f) * g_Settings.sky_alpha_p3;
				*(float*)bluesky2 = (g_Settings.sky_blue_p3 / 255.f) * g_Settings.sky_alpha_p3;
			}

			if (Menu::Option("Reset Sky3"))
			{
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				std::copy_n("\x0F\x29\x49\x30", 4, reinterpret_cast<char*>(g_base_address + Addresss::SkyPointerpatch3));
				std::copy_n("\x0F\x29\x41\x40", 4, reinterpret_cast<char*>(g_base_address + Addresss::SkyPointerpatch3_));
			}

			Menu::Float("Clouds value", g_Settings.sky_intensity_p4, 0.f, 5555.0f, 1.f);
			if (Menu::Option("Clouds1 Pattern"))
			{
				auto SkyPTR = Memory::pattern("00 62 6F 61 74 73 65 61 72 63 68 6C 69 67 68 74 2E 6D 61 69 6E 4C 69 67 68 74 49 6E 66 6F 2E 6C 69 67 68 74 46 61 64 65 44 69 73 74 00 79 46 61 72 00 78 70 6F 6E 65 6E 74 00 6E 74 00");
				DWORD64* d_location = nullptr;
				d_location = (DWORD64*)SkyPTR.count(1).get(0).get<DWORD64*>(0);
				std::string datar = std::string(std::to_string(reinterpret_cast<DWORD64>(d_location)));
				DWORD64 base_address = DWORD64(GetModuleHandleA(nullptr));
				Log::Msg((char*)datar.c_str());
				Log::Msg((char*)std::string(std::to_string(base_address)).c_str());
				std::stringstream myStrm(datar);
				DWORD64 x;
				myStrm >> x;
				std::string address2;
				stringstream addrs2;
				addrs2 << hex << "0x" << x;
				address2 = addrs2.str();
				Log::Msg((char*)address2.c_str());

				std::string address;
				stringstream addrs;
				addrs << hex << "0x" << base_address;
				address = addrs.str();
				Log::Msg((char*)address.c_str());
				std::stringstream myStrm1;
				myStrm1 << base_address;
				DWORD64 x1;
				myStrm1 >> x1;
				std::stringstream myStrm2(datar);
				DWORD64 x2;
				myStrm2 >> x2;
				DWORD64 in2 = ((DWORD64)x2 - (DWORD64)x1);
				Log::Msg((char*)std::string(std::to_string(in2)).c_str());
				std::string address3;
				stringstream addrs3;
				addrs3 << hex << "0x" << in2;
				address3 = addrs3.str();
				Log::Msg((char*)address3.c_str());
				Addresss::SkyPointer4 = in2;
				Addresss::getSkyPointer4 = (DWORD64)Addresss::SkyPointer4 - (DWORD64)0x707;//0x2822D9F - 0x2822698 = 0x707		
				Addresss::SkyPointerpatch4 = (DWORD64)Addresss::SkyPointer4 - (DWORD64)0x19F27A5;//0x2822D9F - 0xE436A6 = 0x19DF6F9
				memset(reinterpret_cast<void*>(base_address + Addresss::SkyPointerpatch4), 0x90, 4);
				uintptr_t redsky2 = engine::scan_address(base_address + Addresss::getSkyPointer4, {});			
				*(float*)redsky2 = g_Settings.sky_intensity_p4;
			}
			if (Menu::Option("Reset Clouds1"))
			{
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				std::copy_n("\x0F\x29\x49\x50", 4, reinterpret_cast<char*>(g_base_address + Addresss::SkyPointerpatch4));
			}
			Menu::Float("Clouds2 value", g_Settings.sky_intensity_p5, 0.f, 5555.0f, 1.f);
			if (Menu::Option("Clouds2 Pattern"))
			{
				auto SkyPTR = Memory::pattern("00 62 6F 61 74 73 65 61 72 63 68 6C 69 67 68 74 2E 6D 61 69 6E 4C 69 67 68 74 49 6E 66 6F 2E 6C 69 67 68 74 46 61 64 65 44 69 73 74 00 79 46 61 72 00 78 70 6F 6E 65 6E 74 00 6E 74 00");
				DWORD64* d_location = nullptr;
				d_location = (DWORD64*)SkyPTR.count(1).get(0).get<DWORD64*>(0);
				std::string datar = std::string(std::to_string(reinterpret_cast<DWORD64>(d_location)));
				DWORD64 base_address = DWORD64(GetModuleHandleA(nullptr));
				Log::Msg((char*)datar.c_str());
				Log::Msg((char*)std::string(std::to_string(base_address)).c_str());
				std::stringstream myStrm(datar);
				DWORD64 x;
				myStrm >> x;
				std::string address2;
				stringstream addrs2;
				addrs2 << hex << "0x" << x;
				address2 = addrs2.str();
				Log::Msg((char*)address2.c_str());

				std::string address;
				stringstream addrs;
				addrs << hex << "0x" << base_address;
				address = addrs.str();
				Log::Msg((char*)address.c_str());
				std::stringstream myStrm1;
				myStrm1 << base_address;
				DWORD64 x1;
				myStrm1 >> x1;
				std::stringstream myStrm2(datar);
				DWORD64 x2;
				myStrm2 >> x2;
				DWORD64 in2 = ((DWORD64)x2 - (DWORD64)x1);
				Log::Msg((char*)std::string(std::to_string(in2)).c_str());
				std::string address3;
				stringstream addrs3;
				addrs3 << hex << "0x" << in2;
				address3 = addrs3.str();
				Log::Msg((char*)address3.c_str());
				Addresss::SkyPointer5 = in2;
				Addresss::getSkyPointer5 = (DWORD64)Addresss::SkyPointer5 - (DWORD64)0x6FB;//0x2822D9F - 0x28226A4 = 0x6FB
				Addresss::SkyPointerpatch5 = (DWORD64)Addresss::SkyPointer5 - (DWORD64)0x19F279A;//0x2822D9F - 0xE436B1 = 0x19DF6EE
				memset(reinterpret_cast<void*>(base_address + Addresss::SkyPointerpatch5), 0x90, 4);
				uintptr_t redsky2 = engine::scan_address(base_address + Addresss::getSkyPointer5, {});
				*(float*)redsky2 = g_Settings.sky_intensity_p5;
			}
			if (Menu::Option("Reset Clouds2"))
			{
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				std::copy_n("\x0F\x29\x41\x60", 4, reinterpret_cast<char*>(g_base_address + Addresss::SkyPointerpatch5));
			}



			/*blackandwhiteflashGTA5.exe + 28227D1 GTA5.exe + 15F9B3C - F3 41 0F11 09  GTA5.exe + 15F9B57 - F3 41 0F11 01
				cloudsflash2GTA5.exe + E436A6 - 0F29 49 50 - movaps[rcx + 50], xmm1
				GTA5.exe + 2822698 - 7E 5E - jle GTA5.exe + 28226F8
				cloudsflashGTA5.exe + E436B1 - 0F29 41 60 - movaps[rcx + 60], xmm0
				GTA5.exe + 28226A4 - 9E - sahf*/


			headers::thunderbackgrounds();
			backgrounds::casesixteen();
		}
		break;
#pragma endregion

#pragma region starintensity
		case starintensity:
		{
			Menu::Title("Star Change Color");
			headers::thunderheaders();
			/*Menu::Float("m_azimuth_transition_red value", m_vars.m_azimuth_transition_red, 0.f, 255.0f, 1.f);
			Menu::Float("m_azimuth_transition_green value", m_vars.m_azimuth_transition_green, 0.f, 255.0f, 1.f);
			Menu::Float("m_azimuth_transition_blue value", m_vars.m_azimuth_transition_blue, 0.f, 255.0f, 1.f);
			Menu::Float("m_azimuth_transition_intensity value", m_vars.m_azimuth_transition_intensity, 0.f, 255.0f, 1.f);*/
			//GTA5.exe + 2822628//MOON RED

			//GTA5.exe + 2822628//MOON RED
			//	GTA5.exe + 282262C//MOON GREEN
			//	GTA5.exe + 2822630//MOON BLUE
			//	memset(reinterpret_cast<void*>(g_Settings.m_ModuleBaseAddress + 0xE436B1), 0x90, 4);
			Menu::MenuOption((char*)langage::Times.c_str(), LobbyTimes);

			Menu::Float("starintensity value", g_Settings.starintensity, 0.f, 5000.0f, 100.f);
			if (Menu::Option("Star"))
			{
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				memset(reinterpret_cast<void*>(g_base_address + 0xE4380C), 0x90, 4);
				*(float*)engine::scan_address(g_base_address + 0x282263C, {}) = g_Settings.starintensity;
			}
			if (Menu::Option("Reset Star"))
			{
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				std::copy_n("\x0F\x29\x49\xF0", 4, reinterpret_cast<char*>(g_base_address + 0xE4380C));//stars
				//std::copy_n("\x0F\x29\xA2\xE0", 4, reinterpret_cast<char*>(g_base_address + 0xE3FFB1));//sky
			}
			Menu::Float("starintensity Pattern value", g_Settings.star_intensity_p, 0.f, 5000.0f, 100.f);
			if (Menu::Option("Star Pattern"))
			{
				auto StarPTR = Memory::pattern("00 62 6F 61 74 73 65 61 72 63 68 6C 69 67 68 74 2E 6D 61 69 6E 4C 69 67 68 74 49 6E 66 6F 2E 6C 69 67 68 74 46 61 64 65 44 69 73 74 00 79 46 61 72 00 78 70 6F 6E 65 6E 74 00 6E 74 00");
				DWORD64* d_location = nullptr;
				d_location = (DWORD64*)StarPTR.count(1).get(0).get<DWORD64*>(0);
				std::string datar = std::string(std::to_string(reinterpret_cast<DWORD64>(d_location)));
				DWORD64 base_address = DWORD64(GetModuleHandleA(nullptr));
				Log::Msg((char*)datar.c_str());
				Log::Msg((char*)std::string(std::to_string(base_address)).c_str());
				std::stringstream myStrm(datar);
				DWORD64 x;
				myStrm >> x;
				std::string address2;
				stringstream addrs2;
				addrs2 << hex << "0x" << x;
				address2 = addrs2.str();
				Log::Msg((char*)address2.c_str());

				std::string address;
				stringstream addrs;
				addrs << hex << "0x" << base_address;
				address = addrs.str();
				Log::Msg((char*)address.c_str());
				std::stringstream myStrm1;
				myStrm1 << base_address;
				DWORD64 x1;
				myStrm1 >> x1;
				std::stringstream myStrm2(datar);
				DWORD64 x2;
				myStrm2 >> x2;
				DWORD64 in2 = ((DWORD64)x2 - (DWORD64)x1);
				Log::Msg((char*)std::string(std::to_string(in2)).c_str());
				std::string address3;
				stringstream addrs3;
				addrs3 << hex << "0x" << in2;
				address3 = addrs3.str();
				Log::Msg((char*)address3.c_str());

				Addresss::StarPointer = in2;				
				Addresss::StarIntensity = (DWORD64)Addresss::StarPointer - (DWORD64)0x763;//0x2822D9F - 0x763 = 0x282263C
				Addresss::StarPointerpatch = (DWORD64)Addresss::StarPointer - (DWORD64)0x19F2793;//0x2822D9F - 0xE436B8 = 0x19DF6E7
				memset(reinterpret_cast<void*>(base_address + Addresss::StarPointerpatch), 0x90, 4);

				uintptr_t intensity_Star = engine::scan_address(base_address + Addresss::StarIntensity, {});
				*(float*)intensity_Star = g_Settings.star_intensity_p;

			}
			if (Menu::Option("Reset Star"))
			{
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				std::copy_n("\x0F\x29\x49\xF0", 4, reinterpret_cast<char*>(g_base_address + Addresss::StarPointerpatch));//0xE436B8 //star
				//std::copy_n("\x0F\x29\xA2\xE0", 4, reinterpret_cast<char*>(g_base_address + 0xE3FFB1));//0xE3FFB1 //sky
			}

			headers::thunderbackgrounds();
			backgrounds::caseseven();
		}
		break;
#pragma endregion
