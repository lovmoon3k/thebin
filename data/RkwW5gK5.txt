In C#, working with files involves using the System.IO namespace, which provides various classes for reading and writing to files. Some of the most commonly used classes include:

File: Provides static methods for creating, moving, and deleting files.
FileInfo: Represents a file and provides methods for working with the file.
Directory: Provides static methods for creating, moving, and deleting directories.
DirectoryInfo: Represents a directory and provides methods for working with the directory.
FileStream: Provides a stream for reading and writing to a file.
Here are a few examples of how you can use these classes to work with files in C#:

Reading a file:
Copy code
string filePath = @"C:\example.txt";
string text = File.ReadAllText(filePath);
Console.WriteLine(text);
Writing to a file:
Copy code
string filePath = @"C:\example.txt";
string text = "Hello, World!";
File.WriteAllText(filePath, text);
Appending to a file:
Copy code
string filePath = @"C:\example.txt";
string text = "Appending this text to the file";
File.AppendAllText(filePath, text);
Creating a directory:
Copy code
string directoryPath = @"C:\example_folder";
Directory.CreateDirectory(directoryPath);
Deleting a file:
Copy code
string filePath = @"C:\example.txt";
File.Delete(filePath);
Deleting a directory:
Copy code
string directoryPath = @"C:\example_folder";
Directory.Delete(directoryPath);
It's also worth noting that when working with files, you must handle exceptions that may occur due to issues such as file not found, file locked, permission denied, etc. It's good practice to use a try-catch block while working with files to handle such exceptions.

In C#, you can use the File class and the File.ReadLines() method to read a line from a text file and print it in the console. Here's an example:

Copy code
string filePath = @"C:\example.txt";

foreach (string line in File.ReadLines(filePath))
{
    Console.WriteLine(line);
}
The File.ReadLines() method returns an IEnumerable<string> that can be used in a foreach loop to iterate through each line of the file. The Console.WriteLine() method is then used to print each line to the console.

Alternatively, you can use the File.ReadAllLines() method, which returns an array of strings, where each element represents a line of the file. Here's an example:

Copy code
string[] lines = File.ReadAllLines(filePath);
foreach (string line in lines)
{
    Console.WriteLine(line);
}
Both ways will read the file line by line, and print each line in the console.

It's important to note that both methods will throw an exception if the file does not exist, the file path is invalid or the application does not have permission to access the file. It's a good practice to use a try-catch block to handle such exceptions.
In C#, there are several ways to delete text from a text file:

Using the File class and the File.WriteAllText() method. This method overwrites the contents of the file with the new string. To delete text from a file, you can simply open the file, read its contents, delete the desired text, and then write the modified content back to the file:
Copy code
string filePath = @"C:\example.txt";
string text = File.ReadAllText(filePath);
text = text.Replace("text to delete", "");
File.WriteAllText(filePath, text);
Using the File class and the File.AppendAllText() method. This method will append text to the end of the file, to delete text you can open the file, read its contents, delete the desired text and then append the modified content back to the file:
Copy code
string filePath = @"C:\example.txt";
string text = File.ReadAllText(filePath);
text = text.Replace("text to delete", "");
File.AppendAllText(filePath, text);
Using the File class and the File.Delete() method. This method will delete the entire file, so it's not a good option when you only want to delete specific text from the file.

string filePath = @"C:\example.txt";
File.Delete(filePath);
This code will delete the file located at the specified file path.
It's important to note that this method will delete the entire file, so it's not a good option when you only want to delete specific text from the file.

Also, this method will throw an exception if the file does not exist, the file path is invalid or the application does not have permission to access the file. It's a good practice to use a try-catch block to handle such exceptions:

Copy code
try{
    File.Delete(filePath);
}catch(IOException e){
    Console.WriteLine("Error: {0}", e.Message);
}
It's also worth noting that, if you want to delete a file that is currently open, you need to close it or release any resources that have a handle to it before calling the File.Delete() method.

Using a StreamWriter object to write to a file, you can open the file, read its contents, delete the desired text, and then write the modified content back to the file using the StreamWriter object:

Copy code
string filePath = @"C:\example.txt";
string text = File.ReadAllText(filePath);
text = text.Replace("text to delete", "");
using (StreamWriter sw = new StreamWriter(filePath))
{
    sw.WriteLine(text);
}
It's important to note that all of the above methods will throw an exception if the file does not exist, the file path is invalid or the application does not have permission to access the file. It's a good practice to use a try-catch block to handle such exceptions.

It's also worth noting that these methods will overwrite the entire file, if you want to keep the rest of the data in the file, and only delete specific text, you need to use a method that allows you to write to specific parts of the file, such as FileStream or StreamWriter with Seek() method.