#include <iostream>
#include <cmath>

class Vector2D {
public:
    // Constructors
    Vector2D() : x(0), y(0) {}
    Vector2D(double x, double y) : x(x), y(y) {}
    Vector2D(const Vector2D& other) : x(other.x), y(other.y) {}

    // Destructor
    ~Vector2D() {}

    // Method to calculate the Euclidean norm (magnitude) of the vector
    double enorm() const {
        return std::sqrt(x*x + y*y);
    }

    // Methods to return the x and y coordinates of the vector
    double getX() const {
        return x;
    }

    double getY() const {
        return y;
    }

    // Overloaded operator *= to multiply the vector by a scalar
    Vector2D& operator*=(double scalar) {
        x *= scalar;
        y *= scalar;
        return *this;
    }

    // Overloaded operator * to multiply a vector by a scalar
    friend Vector2D operator*(const Vector2D& vector, double scalar) {
        Vector2D result(vector);
        result *= scalar;
        return result;
    }

    // Overloaded operator * to calculate the dot product of two vectors
    friend double operator*(const Vector2D& vector1, const Vector2D& vector2) {
        return vector1.x * vector2.x + vector1.y * vector2.y;
    }

private:
    double x, y;
};

// Test program
int main() {
    // Create some vectors
    Vector2D v1(3, 4);
    Vector2D v2 = v1;
    Vector2D v3;

    // Test copy constructor
    std::cout << "v1: (" << v1.getX() << ", " << v1.getY() << ")" << std::endl;
    std::cout << "v2: (" << v2.getX() << ", " << v2.getY() << ")" << std::endl;
    std::cout << "v3: (" << v3.getX() << ", " << v3.getY() << ")" << std::endl;

    // Test norm method
    std::cout << "Norm of v1: " << v1.enorm() << std::endl;

    // Test *= operator with scalar
    v1 *= 2;
    std::cout << "v1 after *= 2: (" << v1.getX() << ", " << v1.getY() << ")" << std::endl;

    // Test * operator with scalar
    Vector2D v4 = v2 * 3;
    std::cout << "v4 = v2 * 3: (" << v4.getX() << ", " << v4.getY() << ")" << std::endl;

    // Test * operator with vectors
    double dotProduct = v1 * v2;
    std::cout << "Dot product of v1 and v2: " << dotProduct << std::endl;

    return 0;
}

/*The Vector2D class has three constructors: a default constructor, a constructor that takes two parameters for the x and y coordinates, and a copy constructor. The class also has a destructor, but since there is no dynamically allocated memory in the class, the default destructor is sufficient.

The enorm method calculates the Euclidean norm (magnitude) of the vector, and the getX and getY methods return the x and y coordinates of the vector, respectively.

The *= operator multiplies the vector by a scalar, modifying the vector in place, and returns a reference to the modified vector. The * operator is overloaded to allow multiplying a vector by a scalar and calculating the dot product of two vectors. The multiplication by scalar is implemented as a friend function that creates a new vector object, multiplies its components by the scalar and returns the result. The dot product operator is also implemented as a friend function that takes two vector objects as arguments and returns a scalar.

In the test program, several instances of the Vector2D class are created using the different constructors, and various methods and operators are tested to ensure they work correctly. */
