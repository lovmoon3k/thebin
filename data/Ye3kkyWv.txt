// clang-format off
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <stack>
#include <iomanip>
#include <fstream>
#include <string>
#include <set>
#include <deque>
#include <queue>
#include <map>
#include <bitset>
#include <random>
#include <list>
#include <unordered_map>
#include <unordered_set>
#include <cassert>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef string str;
//typedef __int128 ultraint;
#define sqrt sqrtl
#define F first
#define S second
#define endl '\n'
#define all(vc666) vc666.begin(), vc666.end()
#define allr(vc666) vc666.rbegin(), vc666.rend()
#define int long long
#define degug(x) cerr (#x) << " " << (x) << endl;

const ll INF = (ll)1e18 + 7;
const ll inf = 1e10 + 7;
const ll ONE = 1;
const ll MOD = 16714589;
const ll max_sz = 1e5 + 1;
ld EPS = 1e-6;
ld PI = 3.1415926535897932384;
mt19937_64 gen(3);

vector <int> color;
vector <int> cnt;
vector <vector <int> > g;
vector <vector <int> > g2;
vector <vector <int> > rzl;
vector <bool> used;
int ans = 0, N = 700;

void dfs(int v) {
    used[v] = true;
    if (cnt[v] > N) {
        rzl[v].resize(max_sz);
    }
    for (auto u : g[v]) {
        if (color[u] != color[v]) {
            ans++;
        }
        if (cnt[u] > N) {
            g2[v].push_back(u);
        }
        if (cnt[v] > N) {
            rzl[v][color[u]]++;
        }
    }
    for (auto u : g[v]) {
        if (!used[u]) dfs(u);
    }
}

signed main() {
#ifdef _DEBUG 
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL); 
    int t = 1;
    //cin >> t;
    while (t--) {
        int n, m, i, a, b;
        cin >> n >> m;
        color.resize(n);
        cnt.resize(n);
        g.resize(n);
        rzl.resize(n);
        g2.resize(n);
        used.resize(n);
        for (i = 0; i < n; i++) {
            cin >> color[i];
        }
        for (i = 0; i < m; i++) {
            cin >> a >> b;
            a--, b--;
            g[a].push_back(b);
            g[b].push_back(a);
            cnt[a]++;
            cnt[b]++;
        }
        for (i = 0; i < n; i++) {
            if (!used[i]) {
                dfs(i);
            }
        }
        ans /= 2;
        cin >> m;
        while (m--) {
            cin >> a >> b;
            a--;
            if (cnt[a] > N) {
                ans -= ((int)g[a].size() - rzl[a][color[a]]);
                ans += ((int)g[a].size() - rzl[a][b]);
                for (auto u : g2[a]) {
                    rzl[u][color[a]]--;
                    rzl[u][b]++;
                }
            }
            else {
                for (auto u : g[a]) {
                    if (color[u] != color[a]) {
                        ans--;
                    }
                    if (color[u] != b) {
                        ans++;
                    }
                    if (cnt[u] > N) {
                        rzl[u][color[a]]--;
                        rzl[u][b]++;
                    }
                }
            }
            color[a] = b;
            cout << ans << endl;
        }
    }
}
//Deisgned by skimono