/**
 * uint8_t* valueToAscii(uint16_t value);
 * 
 * @param value
 * @return &ascii[0]
 * 
 * This function converts the numeric value of the value parameter into an ASCII string written to a local array. The address
 * of the local array is returned. By initializing a pointer with this function, the pointer will contain the address of the first
 * index of the string array.
 * 
 * The first string array index contains the string length value. This can be used to set up a for loop that writes the string out
 * to a serial port.
 * 
 * Usage:
 *	uint8_t* pascii = valueToAscii(12345);
 * 
 *	for(uint8_t i = *pascii++; i != 0; --i) {
 *		sendSerial(UART_1, *pascii++);
 *	}
 * 
 * In this example, ASCII characters 12345 will be transmitted by the serial port.
 */
uint8_t* valueToAscii(uint16_t value) {
	static uint8_t ascii[6];
	uint8_t* pascii = & ascii[0];
	*pascii++ = 0;
	if(value >= 10000) {
		ascii[0]++;
		*pascii++ = (uint8_t) (value / 10000) + 0x30;
	}
	if(value >= 1000) {
		ascii[0]++;
		*pascii++ = (uint8_t) ((value % 10000) / 1000) + 0x30;
	}
	if(value >= 100) {
		ascii[0]++;
		*pascii++ = (uint8_t) ((value % 1000) / 100) + 0x30;
	}
	if(value >= 10) {
		ascii[0]++;
		*pascii++ = (uint8_t) ((value % 100) / 10) + 0x30;
	}
	ascii[0]++;
	*pascii++ = (uint8_t) (value % 10) + 0x30;
	return & ascii[0];
}