#include <iostream>
#include <vector>
#include <algorithm>
#include <set>
#include <cmath>
#include <map>
#include <cstring>
using namespace std;
const int maxn = 2e5 + 10;
typedef long long ll;
int arr[maxn];
ll segment_tree[3 * maxn];

void build_tree(int L, int R, int position) {
    if(L == R) {
        segment_tree[position] = arr[L];
    }
    else {
        int middle = (L + R) / 2;
        build_tree(L, middle, 2 * position);
        build_tree(middle + 1, R, 2 * position + 1);
        segment_tree[position] = segment_tree[2 * position] + segment_tree[2 * position + 1];
    }
}
//  L R i L R j L R
ll query(int L, int R, int position, int i, int j) {
    if(i <= L and R <= j) {
        return segment_tree[position];
    }
    if(R < i or j < L) {
        return 0;
    }
    int middle = (L + R) / 2;
    return query(L, middle, 2 * position, i, j) + query(middle + 1, R, 2 * position + 1, i, j);
}
void update(int L, int R, int position, int idx, int new_value) {
    if(L == R) {
        segment_tree[position] = new_value;
        return;
    }
    int middle = (L + R) / 2;
    if(idx <= middle) {
        update(L, middle, 2 * position, idx, new_value);
    }
    else {
        update(middle + 1, R, 2 * position + 1, idx, new_value);
    }
    segment_tree[position] = segment_tree[2 * position] + segment_tree[2 * position + 1];
}

int main() {
    ios_base::sync_with_stdio(false);
    int n, q;
    cin >> n >> q;
    
    for(int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    build_tree(0, n - 1, 1);
    
    for(int i = 0; i < q; i++) {
        int type_query;
        cin >> type_query;
        
        if(type_query == 1) {
            int k, u;
            cin >> k >> u;
            update(0, n - 1, 1, k - 1, u);
        }
        else {
            int a, b;
            cin >> a >> b;
            a--; b--;
            
            cout << query(0, n - 1, 1, a, b) << endl;
        }
    }
    return 0;
}
