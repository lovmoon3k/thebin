function translate(self, x, y)
  sleep(self.translate(x, y))
  self.stop()
end

function rotate(self, x, y)
  sleep(self.rotate(x, y))
  self.stop()
end

function signal(color)
  local signal = rs.getBundledOutput("bottom")
  if colors.test(signal, color) then signal = colors.subtract(signal, color)
  else signal = colors.combine(signal, color)
  end
  rs.setBundledOutput("bottom", signal)
end

local door = {
  isOpen = false,
  isRunning = false,
  pins = peripheral.wrap("electric_motor_0"),
  arm = peripheral.wrap("electric_motor_1"),
  piston = peripheral.wrap("electric_motor_2"),
  gantry = peripheral.wrap("electric_motor_3")
}

function door:__call()
  if self.isOpen then self:close()
  else self:open()
  end
end

function door:open()
  if self.isRunning or self.isOpen then return end
  self.isRunning = true
  signal(colors.brown)
  translate(self.pins, 1, 16)
  rotate(self.arm, 75, 6)
  translate(self.piston, -3, 24)
  signal(colors.white)
  sleep(0.15)
  signal(colors.white)
  translate(self.piston, 3, 20)
  rotate(self.arm, -75, 6)
  signal(colors.orange)
  sleep(0.1)
  signal(colors.orange)
  translate(self.gantry, 5, 18)
  signal(colors.brown)
  self.isOpen = true
  self.isRunning = false
end

function door:close()
  if self.isRunning or not self.isOpen then return end
  self.isRunning = true
  signal(colors.brown)
  signal(colors.orange)
  sleep(0.1)
  signal(colors.orange)
  translate(self.gantry, -5, 18)
  rotate(self.arm, 75, 6)
  translate(self.piston, -3, 20)
  translate(self.piston, 3, 24)
  rotate(self.arm, -75, 6)
  translate(self.pins, -1, 16)
  signal(colors.brown)
  self.isOpen = false
  self.isRunning = false
end

return setmetatable(door, door)