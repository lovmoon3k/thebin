class userCastem(AbstractUser):
     
      telephon = models.CharField('Телефон',max_length=25, unique=True,blank=True,null =True)
      tokenAndroid = models.CharField('Токен',max_length=255, unique=True,null=True,blank=True,)
      tokenIOS = models.CharField('Токен',max_length=255, unique=True,null=True,blank=True,)
      status = models.BooleanField('подтвержден',default=False)    
      blacklist = models.BooleanField('Черный список',default=False) 
      passwordСhange = models.BooleanField('Смена пароля',default=True)
      USERNAME_FIELD = 'telephon'
      username=None
      first_name =None
      last_name=None
      email=None
      REQUIRED_FIELDS = []
      objects = CustomUserManager()
      
      class Meta: 
                verbose_name = 'Пользователь'       
                verbose_name_plural = 'Пользователи'
                permissions = [('director', 'director'),
                               ('adminsalon', 'adminsalon'),
                               ('master', 'master'),
                               ('onprav', 'onprav'),
                               ('client', 'client')
                ]
      def __str__(self):
           return self.telephon     
            
class UserMasterProfil(models.Model): 
     user = models.OneToOneField(userCastem, on_delete = models.CASCADE, primary_key = True,related_name='users') 
     username =  models.CharField('Имя',blank=True, max_length=30)
     email = models.EmailField('email', max_length=254,blank=True,null=True)
     masterStatus = models.ForeignKey(MasterStatus,related_name='masterstatus',on_delete=models.CASCADE,blank = True,null = True,verbose_name='Статус мастера')
     reiting = models.DecimalField("Рейтинг",blank=True,null=True,decimal_places=1,max_digits = 3) 
     allReview = models.IntegerField("Количество отзывов",blank=True,null=True,) 
     timeCompletionMinut = models.IntegerField("Скорость исполнения в мин",blank=True,null=True)    
     photoUserMaster =  fields.ImageField("Фото", upload_to= "employee/",blank=True, null=True)
     scoreUserCastem = models.IntegerField("Счет",blank=True,null=True)
     yearUserCastem = models.DateField("год рождения",blank=True,null=True)
     workingProcent = models.IntegerField("Рабочий процент",blank=True,null=True,) 
     branch = models.ForeignKey(Branch,related_name='branchMaster',on_delete=models.SET_NULL,blank = True,null = True,verbose_name='Студия')
     
     def __str__(self):
          return self.user.telephon
     class Meta:
      verbose_name = 'Мастер'
      verbose_name_plural = 'Мастер' 
      
      
class UserProfil(models.Model): 
     user = models.OneToOneField(userCastem, on_delete = models.CASCADE, primary_key = True,) 
     username =  models.CharField('Имя',blank=True, max_length=30)   
     email = models.EmailField('email', max_length=254)            
     photoUserCastem =  fields.ImageField("Фото", upload_to= "employee/",blank=True, null=True)             
     scoreUserCastem = models.IntegerField("Счет",blank=True,null=True)
     city  = models.ForeignKey(City,related_name='city',on_delete=models.CASCADE,blank = True,null = True,verbose_name='Город')
     ProcentSkidka = models.ForeignKey(StatusKlient,related_name='kartDiskont',on_delete=models.CASCADE,blank = True,null = True,verbose_name='Клубная карта')
     yearUserCastem = models.DateField("год рождения",blank=True,null=True)
     numberVisits = models.IntegerField("Количество посещений",blank=True,null=True,)
     cashback = models.ForeignKey(CashBack,related_name='cashback',on_delete=models.CASCADE,blank = True,null = True,verbose_name='Cashback карта')
     branch = models.ForeignKey(Branch,related_name='branchUser',on_delete=models.SET_NULL,blank = True,null = True,verbose_name='Студия')
     
     def __str__(self):
          return self.user
     class Meta:
      verbose_name = 'Клиент'
      verbose_name_plural = 'Клиент' 



хочу получить User c профилем ..


class UserProf(APIView):
    permission_classes = [IsAuthenticated]
    def post(self, request):
        data = request.data
        id = data.get('idUser')
        user = userCastem.objects.get(id=id)
        serializer= UserCastemSerializer(user,many=True)
        return Response(serializer.data) 


стелелизатор

class UserCastemSerializer(serializers.ModelSerializer):

    class Meta:
     model = userCastem
     fields = ['id','telephon',]
