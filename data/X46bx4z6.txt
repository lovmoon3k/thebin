// clang-format off
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <stack>
#include <iomanip>
#include <fstream>
#include <string>
#include <set>
#include <deque>
#include <queue>
#include <map>
#include <bitset>
#include <random>
#include <list>
#include <unordered_map>
#include <unordered_set>
#include <cassert>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef string str;
//typedef __int128 ultraint;
#define sqrt sqrtl
#define F first
#define S second
#define endl '\n'
#define all(vc666) vc666.begin(), vc666.end()
#define allr(vc666) vc666.rbegin(), vc666.rend()
#define int long long
#define degug(x) cerr (#x) << " " << (x) << endl;

const ll INF = (ll)1e18 + 7;
const ll inf = 1e10 + 7;
const ll ONE = 1;
const ll MOD = (ONE << 32) - 1;
const ll max_sz = 1e5 + 1;
ld EPS = 1e-6;
ld PI = 3.1415926535897932384;
mt19937_64 gen(time(nullptr));

struct Node {
    int maxPREF = 0;
    int maxSUF = 0;
    int best = 0;
    int l = inf, r = -inf;
};

struct SegTree {
    vector <Node> t;
    int n;
    SegTree(int _n) {
        n = 4 * _n;
        t.resize(n);
    }
    void unite(const Node& l, const Node& r, Node& m) {
        m.best = max(l.best, max(r.best, l.maxSUF + r.maxPREF));
        m.maxPREF = l.maxPREF;
        if (l.maxPREF == l.r - l.l + 1) {
            m.maxPREF += r.maxPREF;
        }
        m.maxSUF = r.maxSUF;
        if (r.maxSUF == r.r - r.l + 1) {
            m.maxSUF += l.maxSUF;
        }
        m.l = min(l.l, r.l);
        m.r = max(l.r, r.r);
    }
    void push(int v) {
        /*if (t[v].push != -1) {
            t[v].mn = max(t[v].mn, t[v].push);
            t[v].mx = max(t[v].mx, t[v].push);
            if (2 * v + 1 < n) {
                t[v * 2].push = max(t[v].push, t[v * 2].push);
                t[v * 2 + 1].push = max(t[v].push, t[v * 2 + 1].push);
            }
            t[v].push = -1;
        }*/
    }
    void build(vector <int>& a, int v, int L, int R) {
        if (L == R) {
            t[v].maxPREF = (a[L] == 0);
            t[v].maxSUF = (a[L] == 0);
            t[v].best = (a[L] == 0);
            t[v].l = L;
            t[v].r = R;
        }
        else {
            int M = (L + R) / 2;
            build(a, 2 * v, L, M);
            build(a, 2 * v + 1, M + 1, R);
            unite(t[2 * v], t[2 * v + 1], t[v]);
        }
    }
    void update(int v, int L, int R, int l, int r, int boost) {
        if (l > R || r < L) {
            return;
        }
        else if (l <= L && r >= R) {
            t[v].maxPREF = (boost == 0);
            t[v].maxSUF = (boost == 0);
            t[v].best = (boost == 0);
            return;
        }
        else {
            int M = (L + R) / 2;
            update(2 * v, L, M, l, r, boost);
            update(2 * v + 1, M + 1, R, l, r, boost);
            unite(t[v * 2], t[v * 2 + 1], t[v]);
            return;
        }
    }
    //Complete???????
    //How many zeros we deletes
    Node query(int v, int L, int R, int l, int r) {
        if (l > R || r < L) {
            return { 0,0,0,inf,-inf };
        }
        else if (l <= L && r >= R) {
            return t[v];
        }
        else {
            int M = (L + R) / 2;
            Node LL = query(2 * v, L, M, l, r);
            Node RR = query(2 * v + 1, M + 1, R, l, r);
            Node MM;
            unite(LL, RR, MM);
            return MM;
        }
    }
};

signed main() {
#ifdef _DEBUG 
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    //cin >> t;
    while (t--) {
        int n, i, j, q, l, r, x, ans;
        cin >> n;
        vector <int> a(n);
        for (i = 0; i < n; i++) {
            cin >> a[i];
        }
        cin >> q;
        SegTree tree(n);
        tree.build(a, 1, 0, n - 1);
        string act;
        Node res;
        while (q--) {
            cin >> act;
            if (act == "UPDATE") {
                cin >> l >> x;
                tree.update(1, 0, n - 1, l - 1, l - 1, x);
            }
            else {
                cin >> l >> r;
                cout << tree.query(1, 0, n - 1, l - 1, r - 1).best << endl;
            }
        }
    }
}
//Deisgned by skimonoint fst = 0;