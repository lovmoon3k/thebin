#include <algorithm>
#include <iostream>
#include <string>
#include <vector>

std::string GetPath(const std::vector<int>& dp, std::size_t n, std::size_t m) {
  std::string path;
  int i = n - 1;
  int j = m - 1;
  while (i || j) {
    int value_in_upper_cell = INT_MIN;
    int value_in_left_cell = INT_MIN;
    if (i) {
      value_in_upper_cell = dp[i * m + j - n];
    }
    if (j) {
      value_in_left_cell = dp[i * m + j - 1];
    }
    if (value_in_upper_cell >= value_in_left_cell) {
      path += "D";
      i--;
    } else {
      path += "R";
      j--;
    }
  }
  std::reverse(path.begin(), path.end());
  return path;
}

void start(const std::vector<int>& field, std::size_t n, std::size_t m) {
  if (field.empty()) {
    return;
  }
  
  std::vector<int> dp(field.size());
  dp[0] = field[0];
  
  for (std::size_t i = 0; i < n; i++) {
    for (std::size_t j = 0; j < m; j++) {
      if (i || j) {
        int value_in_upper_cell = INT_MIN;
        int value_in_left_cell = INT_MIN;
        if (i) {
          value_in_upper_cell = dp[i * m + j - n];
        }
        if (j) {
          value_in_left_cell = dp[i * m + j - 1];
        }
        dp[i * m + j] = std::max(value_in_upper_cell, value_in_left_cell) + field[i * m + j];
      }
    }
  }
  
  std::cout << dp.back() << '\n' << GetPath(dp, n, m);
}

int main() {
  std::ios_base::sync_with_stdio(false);
  std::cin.tie(nullptr);

  std::size_t n, m;
  std::cin >> n >> m;

  std::vector<int> field(n * m);
  for (std::size_t i = 0; i < n; i++) {
    for (std::size_t j = 0; j < m; j++) {
      std::cin >> field.at(i * m + j);
    }
  }

  start(field, n, m);

  return 0;
}