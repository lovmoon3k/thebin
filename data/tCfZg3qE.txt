export class ListBox extends Panel
{
    _currentScrollPos : number;
    _stepSize : number;
    _itemDisplayH : number;
    public get ItemHeight() : number
    {
        return this._itemDisplayH;
    }

    _viewport : PIXI.Rectangle;
    _itemUpdateTimer : NodeJS.Timer;

    constructor( r : PIXI.Renderer, listboxopts : ListBoxOptions )
    {
        super( r, listboxopts );
     
        this._itemDisplayH = this.LabelbarHeight + 6;

        this._viewport = new PIXI.Rectangle( 0, this.LabelbarHeight, this.W, this.H - this.LabelbarHeight );
        let view = new PIXI.Graphics();
        view.beginFill( 0xFF00FF );
        view.drawRect( this._viewport.x, this._viewport.y, this._viewport.width, this._viewport.height );
        view.endFill();
        this.addChild( view );

        let numItems = listboxopts.buttonNames.length;

        var tmpOpts : ButtonOptions;
        var tmpBtn : Button;

        for( var i = 0; i < numItems; i++ )
        {
            tmpOpts =
            {
                id : i + 1,
                y : ( this._itemDisplayH - 6 ) + i * this._itemDisplayH,
                w : listboxopts.w - ( this._itemDisplayH * 1 ),
                h : this._itemDisplayH,
                color : listboxopts.color,
                label : listboxopts.buttonNames[ i ],
                canDisplayLabel : true,
                textStyleOverride : listboxopts.textStyleOverride
            };

            tmpBtn = this.addButton( this._renderer, tmpOpts );
            tmpBtn.Selectable = true;
        }

        this.addAllChildren();

        let scrollopts = 
        { 
            id : 0,
            x : this.W - this._itemDisplayH, 
            y : this.LabelbarHeight, 
            w : this._itemDisplayH,
            h : this.H - this.LabelbarHeight,  
            label : "scrollbar",
            canDisplayLabel : false,
            color : 0xFF5C33, 
            backgroundVisible : true, 
            orientation : "v",
            textStyleOverride : { fill : 0xFEFE7A }
        };

        this._currentScrollPos = 1;

        let tempsb = new ScrollBar( this._renderer, scrollopts, undefined, ( position : number ) => { this._currentScrollPos = position } ); 
        tempsb.Open();  // never forget a panel is closed to start with, so if you want it for status, must open it first.
        tempsb.ThumbSize = ( scrollopts.h - ( this._itemDisplayH * 2 ) ) / 1.5;
        this.addChild( tempsb );

        let scrollDistance = numItems * this._itemDisplayH; 
        this._stepSize = 100 / scrollDistance;
        //this.mask = undefined;

        // this.BtnCallback = this.BtnCallback.bind( this );
        this.UpdateItemPosition.bind( this );
        this._itemUpdateTimer = setInterval( this.UpdateItemPosition, 10 );
    }

    public UpdateItemPosition()
    {
        //console.log( "updating" );
        console.log( this.Buttons.length );
    }

    public onPointerTap() : void
    {
        //console.log( "listbox pointer event" );

        let sID = this.GetJustSelected();
        if( sID > - 1 )
        {
            let tmpBtn = this.GetButton( sID );
            this.DeSelectAllButtons();
            tmpBtn.Select();
        }

        let id = this.GetClicked();
        let btn = this.GetButton( id );

        if( this._clickCallback )
        {
            setImmediate( this._clickCallback( id, sID, btn ) );
        }

    }

}