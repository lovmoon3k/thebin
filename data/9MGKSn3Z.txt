#define BOOST_TEST_MODULE My Test
#include <boost/test/included/unit_test.hpp>
#include <iostream>
#include <string>
#include <vector>
#include <vector>
#include <algorithm>
using namespace std;

// int main()
// {
//     int N, K, r, s;
//     cin >> N >> K >> r >> s;
//     int place = 2 * (r - 1) + s;

//     if ((N - place) > K)
//     {
//         int place_v = place + K;
//         int r_v = place_v / 2 + (place_v % 2 == 0 ? 0 : 1);
//         cout << r_v << ' ' << (place_v % 2 == 0 ? 2 : 1);
//         return 0;
//     }
//     if (place > K)
//     {
//         int place_v = place - K;
//         int r_v = place_v / 2 + (place_v % 2 == 0 ? 0 : 1);
//         cout << r_v << ' ' << (place_v % 2 == 0 ? 2 : 1);
//         return 0;
//     }
//     cout << -1;
//     return 0;
// }

pair<int, int> find_cheat(int N, int K, int r, int s)
{
    int place = 2 * (r - 1) + s;
    if ((N - place) >= K)
    {
        int place_v = place + K;
        int r_v = place_v / 2 + (place_v % 2 == 0 ? 0 : 1);
        return make_pair(r_v, place_v % 2 == 0 ? 2 : 1);
    }
    if (place > K)
    {
        int place_v = place - K;
        int r_v = place_v / 2 + (place_v % 2 == 0 ? 0 : 1);
        return make_pair(r_v, place_v % 2 == 0 ? 2 : 1);
    }
    return make_pair(-1, -1);
}

namespace Tests
{

    BOOST_AUTO_TEST_CASE(Test_1)
    {
        pair<int, int> ok = make_pair(2, 2);
        pair<int, int> result = find_cheat(25, 2, 1, 2);
        BOOST_TEST(result.first == ok.first);
        BOOST_TEST(result.second == ok.second);
    }
    BOOST_AUTO_TEST_CASE(Test_2)
    {
        pair<int, int> ok = make_pair(-1, -1);
        pair<int, int> result = find_cheat(25, 13, 7, 1);
        BOOST_TEST(result.first == ok.first);
        BOOST_TEST(result.second == ok.second);
    }
    BOOST_AUTO_TEST_CASE(Test_3)
    {
        pair<int, int> ok = make_pair(-1, -1);
        pair<int, int> result = find_cheat(2, 2, 1, 1);
        BOOST_TEST(result.first == ok.first);
        BOOST_TEST(result.second == ok.second);
    }
    BOOST_AUTO_TEST_CASE(Test_4)
    {
        pair<int, int> ok = make_pair(2, 1);
        pair<int, int> result = find_cheat(4, 2, 1, 1);
        BOOST_TEST(result.first == ok.first);
        BOOST_TEST(result.second == ok.second);
    }
    BOOST_AUTO_TEST_CASE(Test_5)
    {
        pair<int, int> ok = make_pair(1, 1);
        pair<int, int> result = find_cheat(4, 2, 2, 1);
        BOOST_TEST(result.first == ok.first);
        BOOST_TEST(result.second == ok.second);
    }
    BOOST_AUTO_TEST_CASE(Test_6)
    {
        pair<int, int> ok = make_pair(1, 2);
        pair<int, int> result = find_cheat(4, 2, 2, 2);
        BOOST_TEST(result.first == ok.first);
        BOOST_TEST(result.second == ok.second);
    }
    BOOST_AUTO_TEST_CASE(Test_7)
    {
        pair<int, int> ok = make_pair(1, 1);
        pair<int, int> result = find_cheat(4, 3, 2, 2);
        BOOST_TEST(result.first == ok.first);
        BOOST_TEST(result.second == ok.second);
    }
    BOOST_AUTO_TEST_CASE(Test_8)
    {
        pair<int, int> ok = make_pair(-1, -1);
        pair<int, int> result = find_cheat(4, 4, 2, 2);
        BOOST_TEST(result.first == ok.first);
        BOOST_TEST(result.second == ok.second);
    }
    BOOST_AUTO_TEST_CASE(Test_9)
    {
        pair<int, int> ok = make_pair(-1, -1);
        pair<int, int> result = find_cheat(4, 4, 1, 1);
        BOOST_TEST(result.first == ok.first);
        BOOST_TEST(result.second == ok.second);
    }
    BOOST_AUTO_TEST_CASE(Test_10)
    {
        pair<int, int> ok = make_pair(2, 2);
        pair<int, int> result = find_cheat(4, 3, 1, 1);
        BOOST_TEST(result.first == ok.first);
        BOOST_TEST(result.second == ok.second);
    }
    BOOST_AUTO_TEST_CASE(Test_11)
    {
        pair<int, int> ok = make_pair(-1, -1);
        pair<int, int> result = find_cheat(4, 3, 1, 2);
        BOOST_TEST(result.first == ok.first);
        BOOST_TEST(result.second == ok.second);
    }
    BOOST_AUTO_TEST_CASE(Test_12)
    {
        pair<int, int> ok = make_pair(-1, -1);
        pair<int, int> result = find_cheat(4, 3, 2, 1);
        BOOST_TEST(result.first == ok.first);
        BOOST_TEST(result.second == ok.second);
    }
    BOOST_AUTO_TEST_CASE(Test_13)
    {
        pair<int, int> ok = make_pair(1, 1);
        pair<int, int> result = find_cheat(4, 3, 2, 2);
        BOOST_TEST(result.first == ok.first);
        BOOST_TEST(result.second == ok.second);
    }
    BOOST_AUTO_TEST_CASE(Test_14)
    {
        pair<int, int> ok = make_pair(1, 1);
        pair<int, int> result = find_cheat(4, 3, 2, 2);
        BOOST_TEST(result.first == ok.first);
        BOOST_TEST(result.second == ok.second);
    }
    BOOST_AUTO_TEST_CASE(Test_15)
    {
        pair<int, int> ok = make_pair(2, 1);
        pair<int, int> result = find_cheat(6, 3, 3, 2);
        BOOST_TEST(result.first == ok.first);
        BOOST_TEST(result.second == ok.second);
    }

    BOOST_AUTO_TEST_CASE(Test_16)
    {
        pair<int, int> ok = make_pair(-1, -1);
        pair<int, int> result = find_cheat(6, 6, 3, 2);
        BOOST_TEST(result.first == ok.first);
        BOOST_TEST(result.second == ok.second);
    }
    BOOST_AUTO_TEST_CASE(Test_17)
    {
        pair<int, int> ok = make_pair(-1, -1);
        pair<int, int> result = find_cheat(6, 6, 1, 1);
        BOOST_TEST(result.first == ok.first);
        BOOST_TEST(result.second == ok.second);
    }
    BOOST_AUTO_TEST_CASE(Test_18)
    {
        pair<int, int> ok = make_pair(-1, -1);
        pair<int, int> result = find_cheat(6, 6, 3, 2);
        BOOST_TEST(result.first == ok.first);
        BOOST_TEST(result.second == ok.second);
    }
}
