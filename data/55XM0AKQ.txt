#pragma GCC optimize("O3,unroll-loops")
#pragma GCC target("avx2")

#include <bits/stdc++.h>

#define int long long

using namespace std;

const int N = 2e5;

struct SegmentTreeMax {
private:
    struct node {
        int mx;
        int lazy;

        node() {
            mx = 0;
            lazy = 0;
        }

        node(int x) : node() {
            mx = x;
        }

        node operator|(const node &other) const {
            node res;
            res.mx = max(mx, other.mx);

            return res;
        }
    };

    node t[4 * N];
    int n{};

    void push(int v) {
        t[v].mx += t[v].lazy;
        if (v * 2 + 2 < 4 * N) {
            t[v * 2 + 1].lazy += t[v].lazy;
            t[v * 2 + 2].lazy += t[v].lazy;
        }

        t[v].lazy = 0;
    }

    void build(int v, int l, int r, const vector<int> &a) {
        if (l == r) {
            t[v] = node(a[l]);
            return;
        }

        int m = (l + r) / 2;

        build(v * 2 + 1, l, m, a);
        build(v * 2 + 2, m + 1, r, a);

        t[v] = t[v * 2 + 1] | t[v * 2 + 2];
    }

    void update(int v, int tl, int tr, int l, int r, int x) {
        if (tl == l && tr == r) {
            t[v].lazy += x;
            return;
        }

        int m = (tl + tr) / 2;

        push(v);
        if (r <= m) {
            update(v * 2 + 1, tl, m, l, r, x);
        } else if (l > m) {
            update(v * 2 + 2, m + 1, tr, l, r, x);
        } else {
            update(v * 2 + 1, tl, m, l, m, x);
            update(v * 2 + 2, m + 1, tr, m + 1, r, x);
        }


        push(v * 2 + 1);
        push(v * 2 + 2);
        t[v] = t[v * 2 + 1] | t[v * 2 + 2];
    }

    int get(int v, int tl, int tr, int l, int r) {
        push(v);

        if(t[v].mx < 0){
            return -1;
        }

        if(tl == tr){
            return tl;
        }

        int m = (tl + tr) / 2;

        push(v * 2 + 1);
        push(v * 2 + 2);

        if(l == tl && r == tr){
            if(t[v * 2 + 2].mx >= 0){
                return get(v * 2 + 2, m + 1, tr, m + 1, r);
            }

            return get(v * 2 + 1, tl, m, l, m);
        }

        if (r <= m) {
            return get(v * 2 + 1, tl, m, l, r);
        }

        if (l > m) {
            return get(v * 2 + 2, m + 1, tr, l, r);
        }

        return max(get(v * 2 + 1, tl, m, l, m), get(v * 2 + 2, m + 1, tr, m + 1, r));
    }

public:
    void init(const vector<int> &a) {
        n = a.size();

        build(0, 0, n - 1, a);
    }

    void update(int l, int r, int x) {
        update(0, 0, n - 1, l, r, x);
    }

    int get(int l, int r) {
        return get(0, 0, n - 1, l, r);
    }
};

struct SegmentTreeSum {
private:
    struct node {
        int sum;

        node() {
            sum = 0;
        }

        node(int x) : node() {
            sum = x;
        }

        node operator|(const node &other) const {
            node res;
            res.sum = sum + other.sum;

            return res;
        }
    };

    node t[4 * N];
    int n{};

    void build(int v, int l, int r, const vector<int> &a) {
        if (l == r) {
            t[v] = node(a[l]);
            return;
        }

        int m = (l + r) / 2;

        build(v * 2 + 1, l, m, a);
        build(v * 2 + 2, m + 1, r, a);

        t[v] = t[v * 2 + 1] | t[v * 2 + 2];
    }

    void update(int v, int l, int r, int i, int x) {
        if (l == r) {
            t[v] = node(x);
            return;
        }

        int m = (l + r) / 2;

        if (i <= m) {
            update(v * 2 + 1, l, m, i, x);
        } else {
            update(v * 2 + 2, m + 1, r, i, x);
        }

        t[v] = t[v * 2 + 1] | t[v * 2 + 2];
    }

    node get(int v, int tl, int tr, int l, int r) {
        if (tl == l && tr == r) {
            return t[v];
        }

        int m = (tl + tr) / 2;

        if (r <= m) {
            return get(v * 2 + 1, tl, m, l, r);
        }

        if (l > m) {
            return get(v * 2 + 2, m + 1, tr, l, r);
        }

        return get(v * 2 + 1, tl, m, l, m) |
               get(v * 2 + 2, m + 1, tr, m + 1, r);
    }

public:
    void init(const vector<int> &a) {
        n = a.size();
        //t.resize(4 * n);

        build(0, 0, n - 1, a);
    }

    void update(int i, int x) {
        update(0, 0, n - 1, i, x);
    }

    int get(int l, int r) {
        return get(0, 0, n - 1, l, r).sum;
    }
};

SegmentTreeMax tMx;
SegmentTreeSum tSum;
int n;

void update(int i, int x) {
    int px = tSum.get(i, i);
    tSum.update(i, x);

    tMx.update(i, i, x - px);
    if (i + 1 < n) tMx.update(i + 1, n - 1, px - x);
}

int get(int l, int r) {
    int pref = l > 0 ? tSum.get(0, l - 1) : 0;

    tMx.update(l, r, pref);

    int i = tMx.get(l, r);

    tMx.update(l, r, -pref);

    return i;
}

int32_t main() {
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    cout.tie(nullptr);

    int q;
    cin >> n >> q;

    vector<int> a(n), c(n);
    for (int i = 0, s = 0; i < n; i++) {
        cin >> a[i];

        c[i] = a[i] - s;
        s += a[i];
    }

    tMx.init(c);
    tSum.init(a);

    while (q--) {
        int type;
        cin >> type;

        if (type == 1) {
            int i, x;
            cin >> i >> x;

            i--;

            update(i, x);
        } else {
            int l, r;
            cin >> l >> r;

            l--;
            r--;

            cout << get(l, r) + 1 << "\n";
        }
    }
}
