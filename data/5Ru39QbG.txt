// clang-format off
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <stack>
#include <iomanip>
#include <fstream>
#include <string>
#include <set>
#include <deque>
#include <queue>
#include <map>
#include <bitset>
#include <random>
#include <list>
#include <unordered_map>
#include <unordered_set>
#include <cassert>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef string str;
//typedef __int128 ultraint;
#define sqrt sqrtl
#define F first
#define S second
#define endl '\n'
#define all(vc666) vc666.begin(), vc666.end()
#define allr(vc666) vc666.rbegin(), vc666.rend()
#define int long long
#define degug(x) cerr (#x) << " " << (x) << endl;

const ll INF = (ll)1e18 + 7;
const ll inf = 1e10 + 7;
const ll ONE = 1;
const ll MOD = 1e9 + 7;
const ll max_sz = 1e5 + 1;
ld EPS = 1e-6;
ld PI = 3.1415926535897932384;
mt19937_64 gen(rand() % 100);

struct Query {
    int l, r, x, y;
};

vector <int> a, b, ans, boost;
vector <Query> Q;

void rzl() {
    int i, n = a.size();
    for (i = n - 2; i >= 0; i--) {
        a[i + 1] = a[i + 1] - a[i];
    }
}

void re_count(int l, int r) {
    int i, sup = 0, n = a.size(), x, y;
    for (i = 1; i < n; i++) {
        sup += boost[i];
        a[i] += a[i - 1] + sup;
    }
    vector <pair <int, int> > cur;
    for (i = 0; i < n; i++) {
        if (a[i] >= b[i] && ans[i] == -1) {
            cur.push_back({ a[i] - b[i], i });
        }
    }
    y = cur.size();
    for (i = r; i >= l; i--) {
        for (x = 0; x < y; x++) {
            if (Q[i].l <= cur[x].second && cur[x].second <= Q[i].r) {
                cur[x].first -= Q[i].x;
                cur[x].first -= Q[i].y * (cur[x].second - Q[i].l);
                if (cur[x].first < 0 && ans[cur[x].second] == -1) {
                    ans[cur[x].second] = i + 1;
                }
            }
        }
    }
    for (i = 0; i < n; i++) {
        boost[i] = 0;
    }
    rzl();
}

signed main() {
#ifdef _DEBUG 
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    //cin >> t;
    while (t--) {
        int n, m, i, cnt = 0, k = 500;
        cin >> n;
        a.resize(n);
        b.resize(n);
        ans.resize(n, -1);
        boost.resize(n, 0);
        for (i = 0; i < n; i++) {
            cin >> a[i];
        }
        for (i = 0; i < n; i++) {
            cin >> b[i];
            if (a[i] >= b[i]) {
                ans[i] = 0;
            }
        }
        rzl();
        cin >> m;
        Q.resize(m);
        for (i = 0; i < m; i++) {
            cin >> Q[i].l >> Q[i].r >> Q[i].x >> Q[i].y;
            Q[i].l--;
            Q[i].r--;
            a[Q[i].l] += Q[i].x;
            if (Q[i].r != n - 1) a[Q[i].r + 1] -= Q[i].x;
            if (Q[i].l != n - 1) boost[Q[i].l + 1] += Q[i].y;
            if (Q[i].r != n - 1) {
                boost[Q[i].r + 1] -= Q[i].y;
                a[Q[i].r + 1] -= (Q[i].r - Q[i].l) * Q[i].y;
            }
            cnt++;
            if (cnt == k) {
                re_count(i - k + 1, i);
                cnt = 0;
            }
        }
        re_count(max(i - k, (int)0), i - 1);
        for (i = 0; i < n; i++) {
            cout << ans[i] << " ";
        }
    }
}
//Deisgned by skimonoint fst = 0;