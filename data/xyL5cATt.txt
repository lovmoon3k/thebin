#include <bits/stdc++.h>
using namespace std;

#define fastio ios_base::sync_with_stdio(false); cin.tie(0);
#define endl '\n'
#define _ << ' ' <<


#pragma GCC optimize("Ofast")
#pragma GCC target("avx2,tune=native")
#define siz(x) (int)x.size()
#define print(x) cout << #x << '\t'; for (auto& i : x) cout << i << ' '; cout << '\n'

typedef long long ll;
typedef pair<int, int> pii;
typedef pair<ll, ll> pll;

const ll LINF = 1e18;
const ll MOD = 998244353;
const int maxn = 1e6 + 3;


inline char readchar(){
    const int S = 1<<16;
    static char buf[S], *p = buf, *q = buf;
    return p == q and (q = (p = buf) + fread(buf, 1, S, stdin)) == buf ? EOF : *p++;
}

inline void nextint(int& x) {
    x = 0;
    int c = readchar(), neg = false;
    while(('0' > c || c > '9') && c!='-' && c!=EOF) c = readchar();
    if(c == '-') neg = true, c = readchar();
    while('0' <= c && c <= '9') x = x*10 + (c^'0'), c = readchar();
    if(neg) x = -x;
}

inline void nextll(ll& x) {
    x = 0;
    int c = readchar(), neg = false;
    while(('0' > c || c > '9') && c!='-' && c!=EOF) c = readchar();
    if(c == '-') neg = true, c = readchar();
    while('0' <= c && c <= '9') x = x*10 + (c^'0'), c = readchar();
    if(neg) x = -x;
}


ll pw(ll a, int p, int& mod) {
    ll ret = 1;
    while (p) {
        if (p & 1) {
            ret *= a;
            ret = (ret >= mod ? ret % mod : ret);
        }
        a *= a;
        a = (a >= mod ? a % mod : a);
        p >>= 1;
    }
    return ret;
}


vector<int> lpf, prime;
void seive(int mxn) {
    prime.clear();
    lpf.clear(); lpf.resize(mxn+1, 1);
    for (int i = 2; i <= mxn; ++i) {
        if (lpf[i] == 1) {
            lpf[i] = i;
            prime.emplace_back(i);
        }
        for (auto& j : prime) {
            if (i*j > mxn) break;
            lpf[i*j] = j;
            if (j >= lpf[i]) break;
        }
    }
}


int mx, q;
vector<int> qry;
int ans[maxn];


vector<pii> fac;
void decompose(int x) {
    fac.clear();
    while (x > 1) {
        int p = lpf[x], d = 0;
        while (p == lpf[x]) {
            x /= p;
            d++;
        }
        fac.emplace_back(pii{p, d});
    }
}

int ord;
void dfs(int u, int s, int& mod) {
    if (u == (int)fac.size()) {
        if (pw(10, s, mod) == 1) {
            ord = min(ord, (int)s);
        }
        return;
    }
    for (int i = 0; i <= fac[u].second; i++) {
        dfs(u+1, s, mod);
        s = s * (i == fac[u].second ? 1 : fac[u].first);
    }
}


void init() {

    mx = 0;
    nextint(q);
    qry.clear();

    while (q--) {
        int x; nextint(x);
        mx = max(mx, x);
        qry.emplace_back(x);
    }

    ans[1] = -1;

    seive(mx);

    for (auto& p : prime) {
        if (p == 2 || p == 5) continue;
        // for (auto& s : fac[p-1]) // check pw(10, s, p) = 1 or not
        decompose(p-1);
        ord = p-1;
        dfs(0, 1, p);
        ans[p] = ord;

        int ptr = ans[p];
        for (ll x = (ll)p*p; x <= mx; x *= p) {
            if (x != 9 && x != 237169) ptr *= p;
            ans[x] = ptr;
        }
    }

}



void solve() {

    for (auto& x : qry) {
        if (!(x&1) || x % 5 == 0) {
            printf("-1\n");
            continue;
        }
        if (ans[x]) {
            printf("%d\n", ans[x]);
            continue;
        }
        int res = 1, t = x;
        while (t > 1) {
            int p = lpf[t], s = 1;
            while (lpf[t] == p) {
                s *= p;
                t /= p;
            }
            res = res / __gcd(res, ans[s]) * ans[s];
        }
        ans[x] = res;
        printf("%d\n", res);
    }

}

/*

6
999983
999991
999993
999997
999999
1000000

1
999999


20
1 2 3 4 5
6 7 8 9 10
11 12 13 14 15
16 17 18 19 20

2
3
9

WA when x = 9
 My ans: 3
Correct: 1


*/


int main() {
    // fastio

int T = 1;
// cin >> T;
while (T--) {
    init();
    solve();
}

    return 0;
}