template<template<typename> typename T, template<typename... Ts> typename>
struct MultipleBehaviourSEVisitor : public T<Ts>...
{
  template<typename... Tts>
  MultipleBehaviourSEVisitor(Tts&&... ts) : T<Ts>{ std::forward<Tts>(ts)... }... {}
  using T<Ts>::visit...;
};

template<typename... Ts>
struct TypeList{};

using SETypeList = TypeList<
    MetakeysSideEffect,
    SortedResultsSideEffect,
    UnsortedResultsSideEffect,
    FullHistorySideEffect,
    NativeResultsSideEffect,
    PathsSideEffect>;

// single point of listing all side effect types
template<template<typename> typename Single>
struct BehaviourSideEffectVisitor
  : public MultipleBehaviourSEVisitor<Single, SETypeList>
{};