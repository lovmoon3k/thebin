-- Services
local Players = game:GetService("Players")
local MarketplaceService = game:GetService("MarketplaceService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local HttpService = game:GetService("HttpService")
local RunService = game:GetService("RunService")
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local UIS = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Mouse = Players.LocalPlayer:GetMouse()

-- Variables
local Viewport = workspace.CurrentCamera.ViewportSize

local Library = {}
function Library:validate(defaults, options)
	for i,v in pairs(defaults) do
		if options[i] == nil then
			options[i] = v
		end
	end

	return options
end

function Library:tween(object, goal, callback, tweeninfo)
	local tween = TweenService:Create(object, tweeninfo or TweenInfo.new(.2, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut), goal)
	tween.Completed:Connect(callback or function() end)
	tween:Play()
end

function randomString()local length = math.random(10,20);local array = {};for i = 1, length do array[i] = string.char(math.random(32, 126)) end;return table.concat(array);end
function Library:Init(options)
	options = Library:validate({
		name = "ML"
	}, options or {})

	local GUI = {
		CurrentTab = nil,
		CanDrag = false
	}

	local Notifications = {

	}

	--300
	-- Main Frame
	do
		GUI["1"] = Instance.new("ScreenGui")
		GUI["1"]["Name"] = randomString()
		if get_hidden_gui or gethui then
			local HIDEUI = get_hidden_gui or gethui
			GUI["1"]["Parent"] = HIDEUI()
		elseif (not is_sirhurt_closure) and (syn and syn.protect_gui) then
			syn.protect_gui(GUI["1"])
			GUI["1"]["Parent"] = game:GetService("CoreGui")
		elseif game:GetService("CoreGui"):FindFirstChild('RobloxGui') then
			GUI["1"]["Parent"] = game:GetService("CoreGui").RobloxGui
		else
			GUI["1"]["Parent"] = game:GetService("CoreGui")
		end
		--GUI["1"]["Parent"] = game.Players.LocalPlayer:WaitForChild("PlayerGui")

		GUI["1"]["ZIndexBehavior"] = Enum.ZIndexBehavior.Sibling;
		GUI["1"]["IgnoreGuiInset"] = true;

		-- StarterGui.ML.Main
		GUI["2"] = Instance.new("Frame", GUI["1"]);
		GUI["2"]["BackgroundColor3"] = Color3.fromRGB(49, 49, 49);
		GUI["2"]["AnchorPoint"] = Vector2.new(0, 0);
		GUI["2"]["Size"] = UDim2.new(0, 400, 0, 300);
		GUI["2"]["ClipsDescendants"] = true;
		GUI["2"]["Position"] = UDim2.fromOffset((Viewport.X / 2) - (GUI["2"]["Size"].X.Offset / 2), (Viewport.Y / 2) - (GUI["2"]["Size"].Y.Offset / 2));
		GUI["2"]["Name"] = [[Main]];

		-- StarterGui.ML.Main.UICorner
		GUI["3"] = Instance.new("UICorner", GUI["2"]);
		GUI["3"]["CornerRadius"] = UDim.new(0, 6);

		-- StarterGui.ML.Main.DropShadowHolder
		GUI["4"] = Instance.new("Frame", GUI["2"]);
		GUI["4"]["ZIndex"] = 0;
		GUI["4"]["BorderSizePixel"] = 0;
		GUI["4"]["BackgroundTransparency"] = 1;
		GUI["4"]["Size"] = UDim2.new(1, 0, 1, 0);
		GUI["4"]["Name"] = [[DropShadowHolder]];

		-- StarterGui.ML.Main.DropShadowHolder.DropShadow
		GUI["5"] = Instance.new("ImageLabel", GUI["4"]);
		GUI["5"]["ZIndex"] = 0;
		GUI["5"]["BorderSizePixel"] = 0;
		GUI["5"]["SliceCenter"] = Rect.new(49, 49, 450, 450);
		GUI["5"]["ScaleType"] = Enum.ScaleType.Slice;
		GUI["5"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
		GUI["5"]["ImageTransparency"] = 0.5;
		GUI["5"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
		GUI["5"]["Image"] = [[rbxassetid://6014261993]];
		GUI["5"]["Size"] = UDim2.new(1, 47, 1, 47);
		GUI["5"]["Name"] = [[DropShadow]];
		GUI["5"]["BackgroundTransparency"] = 1;
		GUI["5"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);

		-- StarterGui.ML.Main.TopBar
		GUI["6"] = Instance.new("Frame", GUI["2"]);
		GUI["6"]["BorderSizePixel"] = 0;
		GUI["6"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 0);
		GUI["6"]["Size"] = UDim2.new(1, 0, 0, 30);
		GUI["6"]["Name"] = [[TopBar]];

		-- StarterGui.ML.Main.TopBar.UICorner
		GUI["7"] = Instance.new("UICorner", GUI["6"]);
		GUI["7"]["CornerRadius"] = UDim.new(0, 6);

		-- StarterGui.ML.Main.TopBar.Extension
		GUI["8"] = Instance.new("Frame", GUI["6"]);
		GUI["8"]["BorderSizePixel"] = 0;
		GUI["8"]["BackgroundColor3"] = Color3.fromRGB(255, 0, 0);
		GUI["8"]["AnchorPoint"] = Vector2.new(0, 1);
		GUI["8"]["Size"] = UDim2.new(1, 0, 0.5, 0);
		GUI["8"]["Position"] = UDim2.new(0, 0, 1, 0);
		GUI["8"]["Name"] = [[Extension]];

		-- StarterGui.ML.Main.TopBar.Title
		GUI["9"] = Instance.new("TextLabel", GUI["6"]);
		GUI["9"]["TextWrapped"] = true;
		GUI["9"]["TextXAlignment"] = Enum.TextXAlignment.Left;
		GUI["9"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		GUI["9"]["TextSize"] = 14;
		GUI["9"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
		GUI["9"]["Size"] = UDim2.new(0.5, 0, 1, 0);
		GUI["9"]["Text"] = options["name"];
		GUI["9"]["Name"] = [[Title]];
		GUI["9"]["Font"] = Enum.Font.Gotham;
		GUI["9"]["BackgroundTransparency"] = 1;

		-- StarterGui.ML.Main.TopBar.Title.UIPadding
		GUI["a"] = Instance.new("UIPadding", GUI["9"]);
		GUI["a"]["PaddingLeft"] = UDim.new(0, 8);

		-- StarterGui.ML.Main.TopBar.ExitBtn
		GUI["b"] = Instance.new("ImageLabel", GUI["6"]);
		GUI["b"]["ZIndex"] = 2;
		GUI["b"]["BorderSizePixel"] = 0;
		GUI["b"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		GUI["b"]["Selectable"] = true;
		GUI["b"]["AnchorPoint"] = Vector2.new(1, 0.5);
		GUI["b"]["Image"] = [[rbxassetid://3926305904]];
		GUI["b"]["ImageRectSize"] = Vector2.new(24, 24);
		GUI["b"]["Size"] = UDim2.new(0, 22, 0, 22);
		GUI["b"]["Active"] = true;
		GUI["b"]["Name"] = [[ExitBtn]];
		GUI["b"]["ImageRectOffset"] = Vector2.new(284, 4);
		GUI["b"]["BackgroundTransparency"] = 1;
		GUI["b"]["Position"] = UDim2.new(1, -4, 0.5, 0);

		-- StarterGui.ML.Main.TopBar.Minimize
		GUI["c"] = Instance.new("ImageLabel", GUI["6"]);
		GUI["c"]["ZIndex"] = 2;
		GUI["c"]["BorderSizePixel"] = 0;
		GUI["c"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		GUI["c"]["Selectable"] = true;
		GUI["c"]["AnchorPoint"] = Vector2.new(1, 0.5);
		GUI["c"]["Image"] = [[rbxassetid://6764432408]];
		GUI["c"]["ImageRectSize"] = Vector2.new(50, 50);
		GUI["c"]["Size"] = UDim2.new(0, 22, 0, 22);
		GUI["c"]["Active"] = true;
		GUI["c"]["Name"] = [[Minimize]];
		GUI["c"]["ImageRectOffset"] = Vector2.new(50, 550);
		GUI["c"]["BackgroundTransparency"] = 1;
		GUI["c"]["Position"] = UDim2.new(1, -30, 0.5, 0);

		-- StarterGui.ML.Main.TopBar.Line
		GUI["d"] = Instance.new("Frame", GUI["6"]);
		GUI["d"]["BorderSizePixel"] = 0;
		GUI["d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		GUI["d"]["AnchorPoint"] = Vector2.new(0, 1);
		GUI["d"]["Size"] = UDim2.new(1, 0, 0, 1);
		GUI["d"]["Position"] = UDim2.new(0, 0, 1, 0);
		GUI["d"]["Name"] = [[Line]];

		-- StarterGui.ML.Main.Content
		GUI["19"] = Instance.new("Frame", GUI["2"]);
		GUI["19"]["BorderSizePixel"] = 0;
		GUI["19"]["BackgroundColor3"] = Color3.fromRGB(37, 37, 37);
		GUI["19"]["AnchorPoint"] = Vector2.new(1, 0);
		GUI["19"]["BackgroundTransparency"] = 1;
		GUI["19"]["Size"] = UDim2.new(1, -133, 1, -42);
		GUI["19"]["BorderColor3"] = Color3.fromRGB(55, 55, 55);
		GUI["19"]["Position"] = UDim2.new(1, -6, 0, 36);
		GUI["19"]["Name"] = [[Content]];

		-- StarterGui.ML.Main.Content.UICorner
		GUI["1a"] = Instance.new("UICorner", GUI["19"]);
		GUI["1a"]["CornerRadius"] = UDim.new(0, 6);

		-- StarterGui.ML.Main.Content.Fade
		GUI["5a"] = Instance.new("Frame", GUI["19"]);
		GUI["5a"]["ZIndex"] = 10;
		GUI["5a"]["BorderSizePixel"] = 0;
		GUI["5a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		GUI["5a"]["Size"] = UDim2.new(1, 0, 0, 30);
		GUI["5a"]["Visible"] = false;
		GUI["5a"]["Name"] = [[Fade]];

		-- StarterGui.ML.Main.Content.Fade.UIGradient
		GUI["5b"] = Instance.new("UIGradient", GUI["5a"]);
		GUI["5b"]["Rotation"] = 90;
		GUI["5b"]["Color"] = ColorSequence.new{ColorSequenceKeypoint.new(0.000, Color3.fromRGB(29, 29, 29)),ColorSequenceKeypoint.new(1.000, Color3.fromRGB(29, 29, 29))};
	end

	-- Navigation
	do
		-- StarterGui.ML.Main.Navigation
		GUI["e"] = Instance.new("Frame", GUI["2"]);
		GUI["e"]["BorderSizePixel"] = 0;
		GUI["e"]["BackgroundColor3"] = Color3.fromRGB(66, 66, 66);
		GUI["e"]["Size"] = UDim2.new(0, 120, 1, -30);
		GUI["e"]["Position"] = UDim2.new(0, 0, 0, 30);
		GUI["e"]["Name"] = [[Navigation]];

		-- StarterGui.ML.Main.Navigation.UICorner
		GUI["f"] = Instance.new("UICorner", GUI["e"]);
		GUI["f"]["CornerRadius"] = UDim.new(0, 6);

		-- StarterGui.ML.Main.Navigation.Hide
		GUI["10"] = Instance.new("Frame", GUI["e"]);
		GUI["10"]["BorderSizePixel"] = 0;
		GUI["10"]["BackgroundColor3"] = Color3.fromRGB(66, 66, 66);
		GUI["10"]["Size"] = UDim2.new(1, 0, 0, 20);
		GUI["10"]["Name"] = [[Hide]];

		-- StarterGui.ML.Main.Navigation.Hide2
		GUI["11"] = Instance.new("Frame", GUI["e"]);
		GUI["11"]["BorderSizePixel"] = 0;
		GUI["11"]["BackgroundColor3"] = Color3.fromRGB(66, 66, 66);
		GUI["11"]["AnchorPoint"] = Vector2.new(1, 0);
		GUI["11"]["Size"] = UDim2.new(0, 20, 1, 0);
		GUI["11"]["Position"] = UDim2.new(1, 0, 0, 0);
		GUI["11"]["Name"] = [[Hide2]];

		-- StarterGui.ML.Main.Navigation.ButtonHolder
		GUI["12"] = Instance.new("Frame", GUI["e"]);
		GUI["12"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		GUI["12"]["BackgroundTransparency"] = 1;
		GUI["12"]["Size"] = UDim2.new(1, 0, 1, 0);
		GUI["12"]["Name"] = [[ButtonHolder]];

		-- StarterGui.ML.Main.Navigation.ButtonHolder.UIPadding
		GUI["13"] = Instance.new("UIPadding", GUI["12"]);
		GUI["13"]["PaddingTop"] = UDim.new(0, 8);
		GUI["13"]["PaddingBottom"] = UDim.new(0, 8);

		-- StarterGui.ML.Main.Navigation.ButtonHolder.UIListLayout
		GUI["14"] = Instance.new("UIListLayout", GUI["12"]);
		GUI["14"]["Padding"] = UDim.new(0, 1);
		GUI["14"]["SortOrder"] = Enum.SortOrder.LayoutOrder;

		-- StarterGui.ML.Main.Navigation.Line
		GUI["18"] = Instance.new("Frame", GUI["e"]);
		GUI["18"]["BorderSizePixel"] = 0;
		GUI["18"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
		GUI["18"]["Size"] = UDim2.new(0, 1, 1, 0);
		GUI["18"]["Position"] = UDim2.new(1, 0, 0, 0);
		GUI["18"]["Name"] = [[Line]];
	end

	-- Logic
	do
		task.spawn(function()
			GUI["5c"] = Instance.new("LocalScript", GUI["2"]);
			GUI["5c"]["Name"] = [[DragGui]];
			local function C_5c()
				local script = GUI["5c"];
				local UserInputService = game:GetService("UserInputService")
				local gui = script.Parent
				local dragging
				local dragInput
				local dragStart
				local startPos
				local function update(input)
					pcall(function()
						local delta = input.Position - dragStart
						gui.Position = gui:TweenPosition(UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y), 'Out', 'Linear', 0, true); -- drag speed
					end)
				end
				gui.InputBegan:Connect(function(input)
					if GUI.CanDrag == true then
						if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
							dragging = true
							dragStart = input.Position
							startPos = gui.Position

							input.Changed:Connect(function()
								if input.UserInputState == Enum.UserInputState.End then
									dragging = false
								end
							end)
						end
					end
				end)
				gui.InputChanged:Connect(function(input)
					if GUI.CanDrag == true then
						if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
							dragInput = input
						end
					end
				end)
				UserInputService.InputChanged:Connect(function(input)
					if GUI.CanDrag == true then
						if input == dragInput and dragging then
							update(input)
						end
					end
				end)
			end;
			task.spawn(C_5c);
		end)

		task.spawn(function()
			local ExitBtn = {
				Hover = false,
				MouseDown = false,
				Opened = true
			}

			-- Logic
			do
				GUI["b"].MouseEnter:Connect(function()
					ExitBtn.Hover = true
				end)
				GUI["b"].MouseLeave:Connect(function()
					ExitBtn.Hover = false
				end)
				game:GetService("UserInputService").InputBegan:Connect(function(input,gpe)
					--if gpe then return end

					if input.UserInputType == Enum.UserInputType.MouseButton1 and ExitBtn.Hover then
						ExitBtn.MouseDown = true

						spawn(function()
							task.wait(.265)
							GUI["4"]["Visible"] = false;GUI["19"]["Visible"] = false;GUI["e"]["Visible"] = false;
						end)
						Library:tween(GUI["2"], {Size = UDim2.new(0, 400, 0, 30)}, function()
							Library:tween(GUI["2"], {Size = UDim2.new(0, 0, 0, 30)}, function()
								GUI["1"]:Destroy()
							end, TweenInfo.new(.35, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut))
						end, TweenInfo.new(.35, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut))
						--GUI["2"]["Size"] = UDim2.new(0, 400, 0, 300);
					end
				end)
				game:GetService("UserInputService").InputEnded:Connect(function(input,gpe)
					--if gpe then return end

					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						ExitBtn.MouseDown = false
					end
				end)
			end

			GUI["2"]["Size"] = UDim2.new(0, 400, 0, 300);
		end)

		task.spawn(function()
			local Minimize = {
				Hover = false,
				MouseDown = false,
				Opened = true
			}

			-- Logic
			do
				GUI["c"].MouseEnter:Connect(function()
					Minimize.Hover = true
				end)
				GUI["c"].MouseLeave:Connect(function()
					Minimize.Hover = false
				end)
				game:GetService("UserInputService").InputBegan:Connect(function(input,gpe)
					--if gpe then return end

					if input.UserInputType == Enum.UserInputType.MouseButton1 and Minimize.Hover then
						Minimize.MouseDown = true

						if Minimize.Opened then
							spawn(function()
								task.wait(.265)
								GUI["4"]["Visible"] = false;GUI["19"]["Visible"] = false;GUI["e"]["Visible"] = false;
							end)
							Library:tween(GUI["2"], {Size = UDim2.new(0, 400, 0, 30)}, function()
								Library:tween(GUI["2"], {Size = UDim2.new(0, 200, 0, 30)}, function()
									Minimize.Opened = false
								end, TweenInfo.new(.35, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut))
							end, TweenInfo.new(.35, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut))
							--GUI["2"]["Size"] = UDim2.new(0, 400, 0, 300);
						else
							spawn(function()
								task.wait(.368)
								GUI["4"]["Visible"] = true;GUI["19"]["Visible"] = true;GUI["e"]["Visible"] = true;
							end)
							Library:tween(GUI["2"], {Size = UDim2.new(0, 400, 0, 30)}, function()
								Library:tween(GUI["2"], {Size = UDim2.new(0, 400, 0, 300)}, function()
									Minimize.Opened = true
								end, TweenInfo.new(.35, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut))
							end, TweenInfo.new(.35, Enum.EasingStyle.Quad, Enum.EasingDirection.InOut))
						end
					end
				end)
				game:GetService("UserInputService").InputEnded:Connect(function(input,gpe)
					--if gpe then return end

					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						Minimize.MouseDown = false
					end
				end)
			end

			GUI["2"]["Size"] = UDim2.new(0, 400, 0, 300);
		end)
	end	

	function GUI:CreateTab(options)
		options = Library:validate({
			name = "Preview Tab",
			icon = "rbxassetid://10888331510",
			iconOffset = Vector2.new(0, 0),
			iconSize =  Vector2.new(0, 0)
		}, options or {})

		local Tab = {
			Hover = false,
			Active = false
		}

		-- Render
		do
			-- StarterGui.ML.Main.Navigation.ButtonHolder.Inactive
			Tab["15"] = Instance.new("TextLabel", GUI["12"]);
			Tab["15"]["TextXAlignment"] = Enum.TextXAlignment.Left;
			Tab["15"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			Tab["15"]["TextSize"] = 14;
			Tab["15"]["TextColor3"] = Color3.fromRGB(200, 200, 200);
			Tab["15"]["Size"] = UDim2.new(1, 0, 0, 24);
			Tab["15"]["Text"] = options["name"];
			Tab["15"]["Name"] = [[Inactive]];
			Tab["15"]["Font"] = Enum.Font.Gotham;
			Tab["15"]["BackgroundTransparency"] = 1;

			-- StarterGui.ML.Main.Navigation.ButtonHolder.Inactive.UIPadding
			Tab["16"] = Instance.new("UIPadding", Tab["15"]);
			Tab["16"]["PaddingLeft"] = UDim.new(0, 28);

			-- StarterGui.ML.Main.Navigation.ButtonHolder.Inactive.Icon
			Tab["17"] = Instance.new("ImageLabel", Tab["15"]);
			Tab["17"]["BorderSizePixel"] = 0;
			Tab["17"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
			Tab["17"]["ImageColor3"] = Color3.fromRGB(200, 200, 200);
			Tab["17"]["AnchorPoint"] = Vector2.new(0, 0.5);
			Tab["17"]["Image"] = options["icon"];
			Tab["17"]["ImageRectSize"] = options["iconSize"];
			Tab["17"]["Size"] = UDim2.new(0, 20, 0, 20);
			Tab["17"]["ImageRectOffset"] = options["iconOffset"];
			Tab["17"]["BackgroundTransparency"] = 1;
			Tab["15"]["Name"] = [[Icon]]
			Tab["17"]["Position"] = UDim2.new(0, -24, 0.5, 0);

			-- StarterGui.ML.Main.Content.Tab
			Tab["1b"] = Instance.new("ScrollingFrame", GUI["19"]);
			Tab["1b"]["BorderSizePixel"] = 0;
			Tab["1b"]["BackgroundColor3"] = Color3.fromRGB(48, 48, 48);
			Tab["1b"]["BackgroundTransparency"] = 1;
			Tab["1b"]["Size"] = UDim2.new(1, 0, 1, 0);
			Tab["1b"]["Selectable"] = false;
			Tab["1b"]["ScrollBarThickness"] = 0;
			Tab["1b"]["Name"] = options["name"];
			Tab["1b"]["SelectionGroup"] = false;
			Tab["1b"]["Visible"] = false;

			-- StarterGui.ML.Main.Content.HomeTab.UIPadding
			Tab["21"] = Instance.new("UIPadding", Tab["1b"]);
			Tab["21"]["PaddingTop"] = UDim.new(0, 1);
			Tab["21"]["PaddingRight"] = UDim.new(0, 1);
			Tab["21"]["PaddingBottom"] = UDim.new(0, 1);
			Tab["21"]["PaddingLeft"] = UDim.new(0, 1);

			-- StarterGui.ML.Main.Content.HomeTab.UIListLayout
			Tab["22"] = Instance.new("UIListLayout", Tab["1b"]);
			Tab["22"]["Padding"] = UDim.new(0, 6);
			Tab["22"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
		end

		-- Methods
		function Tab:Activate()
			if Tab.Active == false then
				if GUI.CurrentTab ~= nil then
					GUI.CurrentTab:Deactivate()
				end

				Tab.Active = true
				Library:tween(Tab["15"], {TextColor3 = Color3.fromRGB(255, 255, 255)})
				Library:tween(Tab["17"], {ImageColor3 = Color3.fromRGB(255, 255, 255)})
				Library:tween(Tab["15"], {BackgroundTransparency = 0.8})
				Tab["1b"].Visible = true

				GUI.CurrentTab = Tab
			end
		end

		function Tab:Deactivate()
			if Tab.Active == true then
				Tab.Active = false
				Tab.Hover = false
				Library:tween(Tab["15"], {TextColor3 = Color3.fromRGB(200, 200, 200)})
				Library:tween(Tab["17"], {ImageColor3 = Color3.fromRGB(200, 200, 200)})
				Library:tween(Tab["15"], {BackgroundTransparency = 1})
				Tab["1b"].Visible = false
			end
		end

		-- Logic
		do
			Tab["15"].MouseEnter:Connect(function()
				Tab.Hover = true

				if Tab.Active then
					Library:tween(Tab["15"], {TextColor3 = Color3.fromRGB(255, 255, 255)})
					Library:tween(Tab["17"], {ImageColor3 = Color3.fromRGB(255, 255, 255)})
				end
			end)
			Tab["15"].MouseLeave:Connect(function()
				Tab.Hover = false

				if Tab.Active then
					Library:tween(Tab["15"], {TextColor3 = Color3.fromRGB(200, 200, 200)})
					Library:tween(Tab["17"], {ImageColor3 = Color3.fromRGB(200, 200, 200)})
				end
			end)

			UIS.InputBegan:Connect(function(input, gpe)
				if gpe then return end

				if input.UserInputType == Enum.UserInputType.MouseButton1 then
					if Tab.Hover then
						Tab:Activate()
					end
				end
			end)

			if GUI.CurrentTab == nil then
				Tab:Activate()
			end
		end

		-- Contents
		function Tab:Button(options)
			options = Library:validate({
				text = "Button",
				callback = function() end,
			}, options or {})

			local Button = {
				Hover = false,
				MouseDown = false
			}

			-- Render
			do
				-- StarterGui.ML.Main.Content.HomeTab.Button
				Button["1c"] = Instance.new("Frame", Tab["1b"]);
				Button["1c"]["BackgroundColor3"] = Color3.fromRGB(27, 27, 27);
				Button["1c"]["Size"] = UDim2.new(1, 0, 0, 32);
				Button["1c"]["Name"] = [[Button]];

				-- StarterGui.ML.Main.Content.HomeTab.Button.UICorner
				Button["1d"] = Instance.new("UICorner", Button["1c"]);
				Button["1d"]["CornerRadius"] = UDim.new(0, 4);

				-- StarterGui.ML.Main.Content.HomeTab.Button.UIStroke
				Button["1e"] = Instance.new("UIStroke", Button["1c"]);
				Button["1e"]["Color"] = Color3.fromRGB(82, 82, 82);
				Button["1e"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

				-- StarterGui.ML.Main.Content.HomeTab.Button.Title
				Button["1f"] = Instance.new("TextLabel", Button["1c"]);
				Button["1f"]["TextWrapped"] = true;
				Button["1f"]["TextTruncate"] = Enum.TextTruncate.AtEnd;
				Button["1f"]["TextXAlignment"] = Enum.TextXAlignment.Left;
				Button["1f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
				Button["1f"]["TextSize"] = 14;
				Button["1f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
				Button["1f"]["Size"] = UDim2.new(1, 0, 1, 0);
				Button["1f"]["Text"] = options["text"];
				Button["1f"]["Name"] = [[Title]];
				Button["1f"]["Font"] = Enum.Font.Gotham;
				Button["1f"]["BackgroundTransparency"] = 1;

				-- StarterGui.ML.Main.Content.HomeTab.Button.UIPadding
				Button["20"] = Instance.new("UIPadding", Button["1c"]);
				Button["20"]["PaddingTop"] = UDim.new(0, 6);
				Button["20"]["PaddingRight"] = UDim.new(0, 6);
				Button["20"]["PaddingBottom"] = UDim.new(0, 6);
				Button["20"]["PaddingLeft"] = UDim.new(0, 6);
			end

			-- Logic
			do
				Button["1c"].MouseEnter:Connect(function()
					Button.Hover = true

					Library:tween(Button["1e"], {Color = Color3.fromRGB(102, 102, 102)})
				end)
				Button["1c"].MouseLeave:Connect(function()
					Button.Hover = false

					if not Button.MouseDown then
						Library:tween(Button["1e"], {Color = Color3.fromRGB(82, 82, 82)})
					end
				end)

				UIS.InputBegan:Connect(function(input,gpe)
					if gpe then return end

					if input.UserInputType == Enum.UserInputType.MouseButton1 and Button.Hover then
						Button.MouseDown = true
						Library:tween(Button["1c"], {BackgroundColor3 = Color3.fromRGB(57, 57, 57)})
						Library:tween(Button["1e"], {Color = Color3.fromRGB(200, 200, 200)})
						options.callback()
					end
				end)

				UIS.InputEnded:Connect(function(input,gpe)
					if gpe then return end

					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						Button.MouseDown = false

						if Button.Hover then
							Library:tween(Button["1c"], {BackgroundColor3 = Color3.fromRGB(27, 27, 27)})
							Library:tween(Button["1e"], {Color = Color3.fromRGB(102, 102, 102)})
						else
							Library:tween(Button["1c"], {BackgroundColor3 = Color3.fromRGB(27, 27, 27)})
							Library:tween(Button["1e"], {Color = Color3.fromRGB(82, 82, 82)})
						end
					end
				end)
			end

			return Button
		end

		function Tab:Label(options)
			options = Library:validate({
				text = "Label",
				position = "center",
			}, options or {})

			local Text = {}

			options.position = string.lower(options.position)
			local textxaligment = Enum.TextXAlignment.Left
			if options.position == "left" then
				textxaligment = Enum.TextXAlignment.Left
			end;if options.position == "center" then
				textxaligment = Enum.TextXAlignment.Center
			end;if options.position == "right" then
				textxaligment = Enum.TextXAlignment.Right
			end

			-- Render
			do
				-- StarterGui.ML.Main.Content.HomeTab.LabelLeft
				Text["23"] = Instance.new("Frame", Tab["1b"]);
				Text["23"]["BackgroundColor3"] = Color3.fromRGB(90, 0, 0);
				Text["23"]["BackgroundTransparency"] = 1;
				Text["23"]["Size"] = UDim2.new(1, 0, 0, 26);
				Text["23"]["Name"] = [[Label]];

				-- StarterGui.ML.Main.Content.HomeTab.LabelLeft.Title
				Text["24"] = Instance.new("TextLabel", Text["23"]);
				Text["24"]["TextWrapped"] = true;
				--Text["24"]["TextTruncate"] = Enum.TextTruncate.AtEnd;
				Text["24"]["TextXAlignment"] = textxaligment;
				Text["24"]["TextYAlignment"] = Enum.TextYAlignment.Top;
				Text["24"]["TextWrapped"] = true;
				Text["24"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
				Text["24"]["TextSize"] = 14;
				Text["24"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
				Text["24"]["Size"] = UDim2.new(1, 0, 1, 0);
				Text["24"]["Text"] = options["text"];
				Text["24"]["Name"] = [[Title]];
				Text["24"]["Font"] = Enum.Font.GothamBold;
				Text["24"]["BackgroundTransparency"] = 1;

				-- StarterGui.ML.Main.Content.HomeTab.LabelLeft.UIPadding
				Text["25"] = Instance.new("UIPadding", Text["23"]);
				Text["25"]["PaddingTop"] = UDim.new(0, 6);
				Text["25"]["PaddingRight"] = UDim.new(0, 6);
				Text["25"]["PaddingBottom"] = UDim.new(0, 6);
				Text["25"]["PaddingLeft"] = UDim.new(0, 6);
			end

			function Text:_update()
				Text["23"]["Size"] = UDim2.new(Text["23"]["Size"].X.Scale, Text["23"]["Size"].X.Offset, 0, math.huge)
				Text["23"]["Size"] = UDim2.new(Text["23"]["Size"].X.Scale, Text["23"]["Size"].X.Offset, 0, Text["24"].TextBounds.Y)
				Text["23"]["Size"] = UDim2.new(Text["23"]["Size"].X.Scale, Text["23"]["Size"].X.Offset, 0, Text["24"].TextBounds.Y + (26-14))
			end

			function Text:SetText(text)
				if string.len(text) ~= 0 then
					Text["24"]["Text"] = tostring(text);
					Text:_update()
				end
			end

			Text:_update()
			return Text
		end

		function Tab:Slider(options)
			options = Library:validate({
				name = "Slider",
				default = 50,
				min = 0,
				max = 100,
				callback = function(v) end
			}, options or {})

			local Slider = {
				Hover = false,
				MouseDown = false,
				Connection = nil
			}

			-- Render
			do
				-- StarterGui.ML.Main.Content.HomeTab.Slider
				Slider["2c"] = Instance.new("Frame", Tab["1b"]);
				Slider["2c"]["BackgroundColor3"] = Color3.fromRGB(27, 27, 27);
				Slider["2c"]["Size"] = UDim2.new(1, 0, 0, 42);
				Slider["2c"]["Name"] = [[Slider]];

				-- StarterGui.ML.Main.Content.HomeTab.Slider.UICorner
				Slider["2d"] = Instance.new("UICorner", Slider["2c"]);
				Slider["2d"]["CornerRadius"] = UDim.new(0, 4);

				-- StarterGui.ML.Main.Content.HomeTab.Slider.UIStroke
				Slider["2e"] = Instance.new("UIStroke", Slider["2c"]);
				Slider["2e"]["Color"] = Color3.fromRGB(82, 82, 82);
				Slider["2e"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

				-- StarterGui.ML.Main.Content.HomeTab.Slider.Title
				Slider["2f"] = Instance.new("TextLabel", Slider["2c"]);
				Slider["2f"]["TextWrapped"] = true;
				Slider["2f"]["TextTruncate"] = Enum.TextTruncate.AtEnd;
				Slider["2f"]["TextXAlignment"] = Enum.TextXAlignment.Left;
				Slider["2f"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
				Slider["2f"]["TextSize"] = 14;
				Slider["2f"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
				Slider["2f"]["Size"] = UDim2.new(0.8531798124313354, -24, 1, -10);
				Slider["2f"]["Text"] = options["name"];
				Slider["2f"]["Name"] = [[Title]];
				Slider["2f"]["Font"] = Enum.Font.Gotham;
				Slider["2f"]["BackgroundTransparency"] = 1;

				-- StarterGui.ML.Main.Content.HomeTab.Slider.UIPadding
				Slider["30"] = Instance.new("UIPadding", Slider["2c"]);
				Slider["30"]["PaddingTop"] = UDim.new(0, 6);
				Slider["30"]["PaddingRight"] = UDim.new(0, 6);
				Slider["30"]["PaddingBottom"] = UDim.new(0, 6);
				Slider["30"]["PaddingLeft"] = UDim.new(0, 6);

				-- StarterGui.ML.Main.Content.HomeTab.Slider.Value
				Slider["31"] = Instance.new("TextLabel", Slider["2c"]);
				Slider["31"]["TextWrapped"] = true;
				Slider["31"]["TextXAlignment"] = Enum.TextXAlignment.Right;
				Slider["31"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
				Slider["31"]["TextSize"] = 14;
				Slider["31"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
				Slider["31"]["AnchorPoint"] = Vector2.new(1, 0);
				Slider["31"]["Size"] = UDim2.new(0.14681994915008545, 24, 1, -10);
				Slider["31"]["Text"] = tostring(options["default"]);
				Slider["31"]["Name"] = [[Value]];
				Slider["31"]["Font"] = Enum.Font.Gotham;
				Slider["31"]["BackgroundTransparency"] = 1;
				Slider["31"]["Position"] = UDim2.new(1, 0, 0, 0);

				-- StarterGui.ML.Main.Content.HomeTab.Slider.SliderBG
				Slider["32"] = Instance.new("Frame", Slider["2c"]);
				Slider["32"]["BorderSizePixel"] = 0;
				Slider["32"]["BackgroundColor3"] = Color3.fromRGB(13, 13, 13);
				Slider["32"]["AnchorPoint"] = Vector2.new(0, 1);
				Slider["32"]["Size"] = UDim2.new(1, 0, 0, 4);
				Slider["32"]["BorderColor3"] = Color3.fromRGB(13, 13, 13);
				Slider["32"]["Position"] = UDim2.new(0, 0, 1, 0);
				Slider["32"]["Name"] = [[SliderBG]];

				-- StarterGui.ML.Main.Content.HomeTab.Slider.SliderBG.UICorner
				Slider["33"] = Instance.new("UICorner", Slider["32"]);
				Slider["33"]["CornerRadius"] = UDim.new(0, 4);

				-- StarterGui.ML.Main.Content.HomeTab.Slider.SliderBG.UIStroke
				Slider["34"] = Instance.new("UIStroke", Slider["32"]);
				Slider["34"]["Color"] = Color3.fromRGB(64, 64, 64);
				Slider["34"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

				-- StarterGui.ML.Main.Content.HomeTab.Slider.SliderBG.Draggable
				Slider["35"] = Instance.new("Frame", Slider["32"]);
				Slider["35"]["BackgroundColor3"] = Color3.fromRGB(41, 41, 41);
				Slider["35"]["Size"] = UDim2.new(0.5, 0, 1, 0);
				Slider["35"]["Name"] = [[Draggable]];

				-- StarterGui.ML.Main.Content.HomeTab.Slider.SliderBG.Draggable.UICorner
				Slider["36"] = Instance.new("UICorner", Slider["35"]);
				Slider["36"]["CornerRadius"] = UDim.new(0, 4);
			end

			-- Methods
			function Slider:SetText(text)
				if string.len(text) ~= 0 then
					Slider["2f"]["Text"] = tostring(text)
				end
			end

			function Slider:SetValue(v)
				if v == nil then
					local percentage = math.clamp((Mouse.X - Slider["2c"].AbsolutePosition.X) / (Slider["2c"].AbsoluteSize.X), 0, 1)
					local value = math.floor(((options.max - options.min) * percentage) + options.min)

					Slider["31"]["Text"] = tostring(value)
					Slider["35"]["Size"] = UDim2.fromScale(percentage, 1)
					--Library:tween(Slider["35"], {Size = UDim2.fromScale(percentage, 1)})
				else
					Slider["31"]["Text"] = tostring(v)
					Slider["35"]["Size"] = UDim2.fromScale(((v - options.min) / (options.max - options.min)), 1)
					--Library:tween(Slider["35"], {Size = UDim2.fromScale(((v - options.min) / (options.max - options.min)), 1)}, function() end, TweenInfo.new())				
				end
				options.callback(Slider:GetValue())
			end

			function Slider:GetValue()
				return tonumber(Slider["31"]["Text"])
			end

			-- Logic
			do
				Slider["2c"].MouseEnter:Connect(function()
					Slider.Hover = true

					Library:tween(Slider["2e"], {Color = Color3.fromRGB(102, 102, 102)})
					Library:tween(Slider["34"], {Color = Color3.fromRGB(102, 102, 102)})
					Library:tween(Slider["35"], {BackgroundColor3 = Color3.fromRGB(102, 102, 102)})
				end)
				Slider["2c"].MouseLeave:Connect(function()
					Slider.Hover = false

					if not Slider.MouseDown then
						Library:tween(Slider["2e"], {Color = Color3.fromRGB(82, 82, 82)})
						Library:tween(Slider["34"], {Color = Color3.fromRGB(82, 82, 82)})
						Library:tween(Slider["35"], {BackgroundColor3 = Color3.fromRGB(82, 82, 82)})
					end
				end)

				UIS.InputBegan:Connect(function(input,gpe)
					if gpe then return end

					if input.UserInputType == Enum.UserInputType.MouseButton1 and Slider.Hover then
						GUI.CanDrag = false
						Slider.MouseDown = true
						Library:tween(Slider["2c"], {BackgroundColor3 = Color3.fromRGB(57, 57, 57)})
						Library:tween(Slider["2e"], {Color = Color3.fromRGB(200, 200, 200)})
						Library:tween(Slider["34"], {Color = Color3.fromRGB(200, 200, 200)})
						Library:tween(Slider["35"], {BackgroundColor3 = Color3.fromRGB(200, 200, 200)})

						if Slider.Connection == nil or not Slider.Connection then
							Slider.Connection = RunService.RenderStepped:Connect(function(deltaTime)
								GUI.CanDrag = false
								Slider:SetValue()
							end)
						end
					end
				end)

				UIS.InputEnded:Connect(function(input,gpe)
					if gpe then return end

					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						GUI.CanDrag = true
						Slider.MouseDown = false

						if Slider.Hover then
							Library:tween(Slider["2c"], {BackgroundColor3 = Color3.fromRGB(27, 27, 27)})
							Library:tween(Slider["2e"], {Color = Color3.fromRGB(102, 102, 102)})
							Library:tween(Slider["34"], {Color = Color3.fromRGB(102, 102, 102)})
							Library:tween(Slider["35"], {BackgroundColor3 = Color3.fromRGB(200, 200, 200)})
						else
							Library:tween(Slider["2c"], {BackgroundColor3 = Color3.fromRGB(27, 27, 27)})
							Library:tween(Slider["2e"], {Color = Color3.fromRGB(82, 82, 82)})
							Library:tween(Slider["34"], {Color = Color3.fromRGB(82, 82, 82)})
							Library:tween(Slider["35"], {BackgroundColor3 = Color3.fromRGB(82, 82, 82)})
						end

						if Slider.Connection then Slider.Connection:Disconnect() 	end
						Slider.Connection = nil
					end
				end)
			end

			return Slider
		end

		function Tab:Toggle(options)
			options = Library:validate({
				text = "Toggle",
				callback = function(v) end
			}, options or {})

			local Toggle = {
				Hover = false,
				MouseDown = false,
				State = false
			}

			-- Render
			do
				-- StarterGui.ML.Main.Content.HomeTab.ToggleInactive
				Toggle["51"] = Instance.new("Frame", Tab["1b"]);
				Toggle["51"]["BackgroundColor3"] = Color3.fromRGB(27, 27, 27);
				Toggle["51"]["Size"] = UDim2.new(1, 0, 0, 32);
				Toggle["51"]["Name"] = [[ToggleInactive]];

				-- StarterGui.ML.Main.Content.HomeTab.ToggleInactive.UICorner
				Toggle["52"] = Instance.new("UICorner", Toggle["51"]);
				Toggle["52"]["CornerRadius"] = UDim.new(0, 4);

				-- StarterGui.ML.Main.Content.HomeTab.ToggleInactive.UIStroke
				Toggle["53"] = Instance.new("UIStroke", Toggle["51"]);
				Toggle["53"]["Color"] = Color3.fromRGB(82, 82, 82);
				Toggle["53"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

				-- StarterGui.ML.Main.Content.HomeTab.ToggleInactive.Title
				Toggle["54"] = Instance.new("TextLabel", Toggle["51"]);
				Toggle["54"]["TextWrapped"] = true;
				Toggle["54"]["TextTruncate"] = Enum.TextTruncate.AtEnd;
				Toggle["54"]["TextXAlignment"] = Enum.TextXAlignment.Left;
				Toggle["54"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
				Toggle["54"]["TextSize"] = 14;
				Toggle["54"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
				Toggle["54"]["Size"] = UDim2.new(1, -26, 1, 0);
				Toggle["54"]["Text"] = options["text"];
				Toggle["54"]["Name"] = [[Title]];
				Toggle["54"]["Font"] = Enum.Font.Gotham;
				Toggle["54"]["BackgroundTransparency"] = 1;

				-- StarterGui.ML.Main.Content.HomeTab.ToggleInactive.UIPadding
				Toggle["55"] = Instance.new("UIPadding", Toggle["51"]);
				Toggle["55"]["PaddingTop"] = UDim.new(0, 6);
				Toggle["55"]["PaddingRight"] = UDim.new(0, 6);
				Toggle["55"]["PaddingBottom"] = UDim.new(0, 6);
				Toggle["55"]["PaddingLeft"] = UDim.new(0, 6);

				-- StarterGui.ML.Main.Content.HomeTab.ToggleInactive.CheckmarkHolder
				Toggle["56"] = Instance.new("Frame", Toggle["51"]);
				Toggle["56"]["Active"] = true;
				Toggle["56"]["BackgroundColor3"] = Color3.fromRGB(64, 64, 64);
				Toggle["56"]["AnchorPoint"] = Vector2.new(1, 0.5);
				Toggle["56"]["LayoutOrder"] = 3;
				Toggle["56"]["Size"] = UDim2.new(0, 16, 0, 16);
				Toggle["56"]["Selectable"] = true;
				Toggle["56"]["Position"] = UDim2.new(1, -3, 0.5, 0);
				Toggle["56"]["Name"] = [[CheckmarkHolder]];

				-- StarterGui.ML.Main.Content.HomeTab.ToggleInactive.CheckmarkHolder.UICorner
				Toggle["57"] = Instance.new("UICorner", Toggle["56"]);
				Toggle["57"]["CornerRadius"] = UDim.new(0, 4);

				-- StarterGui.ML.Main.Content.HomeTab.ToggleInactive.CheckmarkHolder.UIStroke
				Toggle["58"] = Instance.new("UIStroke", Toggle["56"]);
				Toggle["58"]["Color"] = Color3.fromRGB(82, 82, 82);
				Toggle["58"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

				-- StarterGui.ML.Main.Content.HomeTab.ToggleInactive.CheckmarkHolder.Checkmark
				Toggle["59"] = Instance.new("ImageButton", Toggle["56"]);
				Toggle["59"]["ZIndex"] = 2;
				Toggle["59"]["ImageTransparency"] = 1;
				Toggle["59"]["ImageColor3"] = Color3.fromRGB(0, 0, 0);
				Toggle["59"]["LayoutOrder"] = 3;
				Toggle["59"]["AnchorPoint"] = Vector2.new(0.5, 0.5);
				Toggle["59"]["Image"] = [[rbxassetid://3926305904]];
				Toggle["59"]["ImageRectSize"] = Vector2.new(36, 36);
				Toggle["59"]["Size"] = UDim2.new(1, -2, 1, -2);
				Toggle["59"]["Name"] = [[Checkmark]];
				Toggle["59"]["ImageRectOffset"] = Vector2.new(644, 204);
				Toggle["59"]["Position"] = UDim2.new(0.5, 0, 0.5, 0);
				Toggle["59"]["BackgroundTransparency"] = 1;
			end

			-- Methods
			function Toggle:Toggle()
				Toggle.State = not Toggle.State
				Library:tween(Toggle["56"], {BackgroundColor3 = Toggle.State and Color3.fromRGB(126, 255, 124) or Color3.fromRGB(64, 64, 64)})
				Library:tween(Toggle["59"], {ImageTransparency = Toggle.State and 0 or 1})
			end

			function Toggle:SetState(v)
				if v ~= nil then
					Toggle.State = v
				end

				Library:tween(Toggle["56"], {BackgroundColor3 = Toggle.State and Color3.fromRGB(126, 255, 124) or Color3.fromRGB(64, 64, 64)})
				Library:tween(Toggle["59"], {ImageTransparency = Toggle.State and 0 or 1})
			end

			function Toggle:GetState()
				return Toggle.State
			end

			-- Logic
			do
				Toggle["51"].MouseEnter:Connect(function()
					Toggle.Hover = true

					Library:tween(Toggle["53"], {Color = Color3.fromRGB(102, 102, 102)})
				end)
				Toggle["51"].MouseLeave:Connect(function()
					Toggle.Hover = false

					if not Toggle.MouseDown then
						Library:tween(Toggle["53"], {Color = Color3.fromRGB(82, 82, 82)})
					end
				end)

				UIS.InputBegan:Connect(function(input,gpe)
					if gpe then return end

					if input.UserInputType == Enum.UserInputType.MouseButton1 and Toggle.Hover then
						Toggle.MouseDown = true
						Library:tween(Toggle["51"], {BackgroundColor3 = Color3.fromRGB(57, 57, 57)})
						Library:tween(Toggle["53"], {Color = Color3.fromRGB(200, 200, 200)})

						Toggle:Toggle()
						options.callback(Toggle:GetState())
					end
				end)

				UIS.InputEnded:Connect(function(input,gpe)
					if gpe then return end

					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						Toggle.MouseDown = false

						if Toggle.Hover then
							Library:tween(Toggle["51"], {BackgroundColor3 = Color3.fromRGB(27, 27, 27)})
							Library:tween(Toggle["53"], {Color = Color3.fromRGB(102, 102, 102)})
						else
							Library:tween(Toggle["51"], {BackgroundColor3 = Color3.fromRGB(27, 27, 27)})
							Library:tween(Toggle["53"], {Color = Color3.fromRGB(82, 82, 82)})
						end
					end
				end)
			end

			return Toggle
		end

		function Tab:Dropdown(options)
			options = Library:validate({
				text = "Dropdown",
				callback = function(v) end
			}, options or {})

			local Dropdown = {
				Hover = false,
				MouseDown = false,
				Items = {},
				Opened = false,
				CurrentItem = nil,
				ToggleDebounce = false,
				HoveringItem = false
			}

			-- Render
			do
				-- StarterGui.ML.Main.Content.HomeTab.Dropdown
				Dropdown["37"] = Instance.new("Frame", Tab["1b"]);
				Dropdown["37"]["BackgroundColor3"] = Color3.fromRGB(27, 27, 27);
				Dropdown["37"]["Size"] = UDim2.new(1, 0, 0, 32);
				Dropdown["37"]["ClipsDescendants"] = true;
				Dropdown["37"]["Name"] = [[Dropdown]];

				-- StarterGui.ML.Main.Content.HomeTab.Dropdown.UICorner
				Dropdown["38"] = Instance.new("UICorner", Dropdown["37"]);
				Dropdown["38"]["CornerRadius"] = UDim.new(0, 4);

				-- StarterGui.ML.Main.Content.HomeTab.Dropdown.UIStroke
				Dropdown["39"] = Instance.new("UIStroke", Dropdown["37"]);
				Dropdown["39"]["Color"] = Color3.fromRGB(82, 82, 82);
				Dropdown["39"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

				-- StarterGui.ML.Main.Content.HomeTab.Dropdown.Title
				Dropdown["3a"] = Instance.new("TextLabel", Dropdown["37"]);
				Dropdown["3a"]["TextWrapped"] = true;
				Dropdown["3a"]["TextTruncate"] = Enum.TextTruncate.AtEnd;
				Dropdown["3a"]["TextXAlignment"] = Enum.TextXAlignment.Left;
				Dropdown["3a"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
				Dropdown["3a"]["TextSize"] = 14;
				Dropdown["3a"]["TextColor3"] = Color3.fromRGB(255, 255, 255);
				Dropdown["3a"]["Size"] = UDim2.new(1, 0, 0, 20);
				Dropdown["3a"]["Text"] = options["text"];
				Dropdown["3a"]["Name"] = [[Title]];
				Dropdown["3a"]["Font"] = Enum.Font.Gotham;
				Dropdown["3a"]["BackgroundTransparency"] = 1;

				-- StarterGui.ML.Main.Content.HomeTab.Dropdown.UIPadding
				Dropdown["3b"] = Instance.new("UIPadding", Dropdown["37"]);
				Dropdown["3b"]["PaddingTop"] = UDim.new(0, 6);
				Dropdown["3b"]["PaddingRight"] = UDim.new(0, 6);
				Dropdown["3b"]["PaddingBottom"] = UDim.new(0, 6);
				Dropdown["3b"]["PaddingLeft"] = UDim.new(0, 6);

				-- StarterGui.ML.Main.Content.HomeTab.Dropdown.Icon
				Dropdown["3c"] = Instance.new("ImageLabel", Dropdown["37"]);
				Dropdown["3c"]["Selectable"] = true;
				Dropdown["3c"]["AnchorPoint"] = Vector2.new(1, 0);
				Dropdown["3c"]["Image"] = [[rbxassetid://6764432408]];
				Dropdown["3c"]["ImageRectSize"] = Vector2.new(50, 50);
				Dropdown["3c"]["LayoutOrder"] = 3;
				Dropdown["3c"]["Size"] = UDim2.new(0, 20, 0, 20);
				Dropdown["3c"]["Active"] = true;
				Dropdown["3c"]["Name"] = [[Icon]];
				Dropdown["3c"]["ImageRectOffset"] = Vector2.new(200, 550);
				Dropdown["3c"]["BackgroundTransparency"] = 1;
				Dropdown["3c"]["Position"] = UDim2.new(1, 0, 0, 0);

				-- StarterGui.ML.Main.Content.HomeTab.Dropdown.OptionHolder
				Dropdown["3d"] = Instance.new("Frame", Dropdown["37"]);
				Dropdown["3d"]["BackgroundColor3"] = Color3.fromRGB(255, 255, 255);
				Dropdown["3d"]["BackgroundTransparency"] = 1;
				Dropdown["3d"]["Size"] = UDim2.new(1, 0, 1, -24);
				Dropdown["3d"]["Position"] = UDim2.new(0, 0, 0, 26);
				Dropdown["3d"]["Visible"] = false;
				Dropdown["3d"]["Name"] = [[OptionHolder]];

				-- StarterGui.ML.Main.Content.HomeTab.Dropdown.OptionHolder.UIListLayout
				Dropdown["3e"] = Instance.new("UIListLayout", Dropdown["3d"]);
				Dropdown["3e"]["Padding"] = UDim.new(0, 6);
				Dropdown["3e"]["SortOrder"] = Enum.SortOrder.LayoutOrder;
			end

			-- Methods
			function Dropdown:SetText(text)
				if string.len(text) ~= 0 then
					Dropdown["3a"]["Text"] = tostring(text)
				end
			end
			
			function Dropdown:Resize()
				local count = 0
				for i,v in pairs(Dropdown.Items) do
					if v ~= nil then
						count += 1
					end
				end

				if count > 0 and Dropdown.Opened == true then
					Library:tween(Dropdown["37"], {Size = UDim2.new(1, 0, 0, 30 + (count * 30) + 4)})
				else
					Library:tween(Dropdown["37"], {Size = UDim2.new(1, 0, 0, 30)})
				end
			end

			function Dropdown:Add(id, value)
				if Dropdown.Items[id] ~= nil then
					return
				end

				local Item = {
					Hover = false,
					MouseDown = false
				}

				Dropdown.Items[id] = {
					instance = {},
					value = value,
					id = id,
					Connections = {}
				}

				-- StarterGui.ML.Main.Content.HomeTab.Dropdown.OptionHolder.Option
				Dropdown.Items[id].instance["4d"] = Instance.new("TextLabel", Dropdown["3d"]);
				Dropdown.Items[id].instance["4d"]["TextTruncate"] = Enum.TextTruncate.AtEnd;
				Dropdown.Items[id].instance["4d"]["BackgroundColor3"] = Color3.fromRGB(57, 57, 57);
				Dropdown.Items[id].instance["4d"]["TextSize"] = 14;
				Dropdown.Items[id].instance["4d"]["TextColor3"] = Color3.fromRGB(203, 203, 203);
				Dropdown.Items[id].instance["4d"]["Size"] = UDim2.new(1, 0, 0, 16);
				Dropdown.Items[id].instance["4d"]["Text"] = id;
				Dropdown.Items[id].instance["4d"]["Name"] = id;
				Dropdown.Items[id].instance["4d"]["Font"] = Enum.Font.Gotham;

				-- StarterGui.ML.Main.Content.HomeTab.Dropdown.OptionHolder.Option.UIStroke
				Dropdown.Items[id].instance["4d_UIStroke"] = Instance.new("UIStroke", Dropdown.Items[id].instance["4d"]);
				Dropdown.Items[id].instance["4d_UIStroke"]["Color"] = Color3.fromRGB(82, 82, 82);
				Dropdown.Items[id].instance["4d_UIStroke"]["ApplyStrokeMode"] = Enum.ApplyStrokeMode.Border;

				-- StarterGui.ML.Main.Content.HomeTab.Dropdown.OptionHolder.Option.UICorner
				Dropdown.Items[id].instance["4d_UICorner"] = Instance.new("UICorner", Dropdown.Items[id].instance["4d"]);
				Dropdown.Items[id].instance["4d_UICorner"]["CornerRadius"] = UDim.new(0, 3);

				Dropdown.Items[id].instance["4d"]["Size"] = UDim2.new(Dropdown.Items[id].instance["4d"]["Size"].X.Scale, Dropdown.Items[id].instance["4d"]["Size"].X.Offset, 0, math.huge)
				Dropdown.Items[id].instance["4d"]["Size"] = UDim2.new(Dropdown.Items[id].instance["4d"]["Size"].X.Scale, Dropdown.Items[id].instance["4d"]["Size"].X.Offset, 0, Dropdown.Items[id].instance["4d"].TextBounds.Y)
				Dropdown.Items[id].instance["4d"]["Size"] = UDim2.new(Dropdown.Items[id].instance["4d"]["Size"].X.Scale, Dropdown.Items[id].instance["4d"]["Size"].X.Offset, 0, Dropdown.Items[id].instance["4d"].TextBounds.Y + (26-14))

				table.insert(
					Dropdown.Items[id].Connections,
					Dropdown.Items[id].instance["4d"].MouseEnter:Connect(function()
						Item.Hover = true
						Dropdown.HoveringItem = true

						Library:tween(Dropdown.Items[id].instance["4d_UIStroke"], {Color = Color3.fromRGB(255, 255, 255)})
					end)
				)
				table.insert(
					Dropdown.Items[id].Connections,
					Dropdown.Items[id].instance["4d"].MouseLeave:Connect(function()
						Item.Hover = false
						Dropdown.HoveringItem = false

						if not Item.MouseDown then
							Library:tween(Dropdown.Items[id].instance["4d_UIStroke"], {Color = Color3.fromRGB(82, 82, 82)})
						end
					end)
				)
				table.insert(
					Dropdown.Items[id].Connections,
					UIS.InputBegan:Connect(function(input,gpe)
						if gpe then return end

						if input.UserInputType == Enum.UserInputType.MouseButton1 and Item.Hover then
							Item.MouseDown = true
							Library:tween(Dropdown.Items[id].instance["4d_UIStroke"], {Color = Color3.fromRGB(200, 200, 200)})

							Dropdown.CurrentItem = Dropdown.Items[id]
							--if Dropdown.CurrentItem ~= nil then
							options.callback(Dropdown.CurrentItem.id)
							Dropdown:Toggle()
							--end
						end
					end)
				)

				table.insert(
					Dropdown.Items[id].Connections,
					UIS.InputEnded:Connect(function(input,gpe)
						if gpe then return end

						if input.UserInputType == Enum.UserInputType.MouseButton1 then
							Item.MouseDown = false

							if Item.Hover then
								Library:tween(Dropdown.Items[id].instance["4d_UIStroke"], {Color = Color3.fromRGB(255, 255, 255)})
							else
								Library:tween(Dropdown.Items[id].instance["4d_UIStroke"], {Color = Color3.fromRGB(82, 82, 82)})
							end
						end
					end)
				)

				Dropdown:Resize()
			end

			function Dropdown:Remove(id)
				if Dropdown.Items[id] ~= nil then
					if Dropdown.CurrentItem ~= nil then
						if Dropdown.CurrentItem.id == id then
							Dropdown.CurrentItem = nil
						end
					end

					for _, con in pairs(Dropdown.Items[id].Connections) do
						pcall(function()
							con:Disconnect()
						end)
					end
					for _,v in pairs(Dropdown.Items[id].instance) do
						pcall(function()
							v:Destroy()
						end)
					end
					Dropdown.Items[id] = nil
				end

				Dropdown:Resize()
			end

			function Dropdown:Clear()
				if Dropdown.Opened == true then
					Dropdown:Toggle()
				end

				for i,v in pairs(Dropdown.Items) do
					Dropdown:Remove(i)
				end
				Dropdown.CurrentItem = nil
				Dropdown.Items = {}
				Dropdown:Resize()
			end

			function Dropdown:Toggle()
				if Dropdown.ToggleDebounce == true then return end
				Dropdown.ToggleDebounce = true

				if Dropdown.Opened then
					Library:tween(Dropdown["3c"], {Rotation = 0})
					Library:tween(Dropdown["37"], {Size = UDim2.new(1, 0, 0, 30)}, function()
						Dropdown["3d"]["Visible"] = false
						Dropdown.Opened = false
						Dropdown.ToggleDebounce = false
					end)
				else
					local count = 0
					for i,v in pairs(Dropdown.Items) do
						if v ~= nil then
							count += 1
						end
					end

					if count > 0 then
						Dropdown["3d"]["Visible"] = true
						Library:tween(Dropdown["3c"], {Rotation = 180})
						Library:tween(Dropdown["37"], {Size = UDim2.new(1, 0, 0, 30 + (count * 30) + 4)}, function()
							Dropdown.Opened = true
							Dropdown.ToggleDebounce = false
						end)
					end
				end
			end

			-- Logic
			do
				Dropdown["37"].MouseEnter:Connect(function()
					Dropdown.Hover = true

					Library:tween(Dropdown["39"], {Color = Color3.fromRGB(102, 102, 102)})
				end)
				Dropdown["37"].MouseLeave:Connect(function()
					Dropdown.Hover = false

					if not Dropdown.MouseDown then
						Library:tween(Dropdown["39"], {Color = Color3.fromRGB(82, 82, 82)})
					end
				end)

				UIS.InputBegan:Connect(function(input,gpe)
					if gpe then return end

					if input.UserInputType == Enum.UserInputType.MouseButton1 and Dropdown.Hover then
						Dropdown.MouseDown = true
						Library:tween(Dropdown["37"], {BackgroundColor3 = Color3.fromRGB(57, 57, 57)})
						Library:tween(Dropdown["39"], {Color = Color3.fromRGB(200, 200, 200)})

						if not Dropdown.HoveringItem then
							Dropdown:Toggle()
						end
					end
				end)

				UIS.InputEnded:Connect(function(input,gpe)
					if gpe then return end

					if input.UserInputType == Enum.UserInputType.MouseButton1 then
						Dropdown.MouseDown = false

						if Dropdown.Hover then
							Library:tween(Dropdown["37"], {BackgroundColor3 = Color3.fromRGB(27, 27, 27)})
							Library:tween(Dropdown["39"], {Color = Color3.fromRGB(102, 102, 102)})
						else
							Library:tween(Dropdown["37"], {BackgroundColor3 = Color3.fromRGB(27, 27, 27)})
							Library:tween(Dropdown["39"], {Color = Color3.fromRGB(82, 82, 82)})
						end
					end
				end)
			end

			return Dropdown
		end

		return Tab
	end

	return GUI
end

return Library