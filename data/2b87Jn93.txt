#include <iostream>

long long max(long long a, long long b) {
    return a > b ? a : b;
}

int main() {
    constexpr long long INF = 2e12;
    constexpr int MAX = 200;
    int a[MAX][MAX];
    int n, m;
    std::cin >> n >> m;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++)
            std::cin >> a[i][j];
    }
    long long dp[MAX][MAX][2];
    for (int j = 0; j < m; j++) {
        dp[0][j][0] = a[0][j] % 2 == 0 ? a[0][j] : INF;
        dp[0][j][1] = a[0][j] % 2 == 1 ? a[0][j] : INF;
    }

    for (int i = 1; i < n; i++) {
        for (int j = 0; j < m; j++) {
            dp[i][j][0] = dp[i][j][1] = -INF;
            for (int k = 0; k < 2; k++) {
                int r = 0;
                if (k % 2 != a[i][j] % 2)
                    r = 1;
                long long d1 = INF;
                long long d2 = dp[i-1][j][r];
                long long d3 = INF;
                if (j > 0)
                    d1 = dp[i-1][j-1][r];
                if (j < m-1)
                    d3 = dp[i-1][j+1][r];
                if (d1 != INF)
                    dp[i][j][k] = max(dp[i][j][k], d1 + a[i][j]);
                if (d2 != INF)
                    dp[i][j][k] = max(dp[i][j][k], d2 + a[i][j]);
                if (d3 != INF)
                    dp[i][j][k] = max(dp[i][j][k], d3 + a[i][j]);
                if (dp[i][j][k] == -INF)
                    dp[i][j][k] *= -1;
            }
        }
    }
    long long ans = -INF;
    for (int j = 0; j < m; j++)
        if (dp[n-1][j][1] != INF)
            ans = max(ans, dp[n-1][j][1]);
    if (ans != -INF)
        std::cout << ans << "\n";
    else
        std::cout << "impossible\n";
    return 0;
}