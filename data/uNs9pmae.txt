#include <iostream>
#include <cmath>
#include <vector>
#include <queue>
#include <algorithm>
#include <string>
#include <stack>
#include <set>
#include <map>
#define pii pair <int, int>
#define pb(x) push_back(x)
using namespace std;
using ll = long long;
using ld = long double;
using db = double;
void cv(vector <int> &v) {
    for (auto x : v) cout << x << ' ';
    cout << "\n";
}

void cvl(vector <ll> &v) {
    for (auto x : v) cout << x << ' ';
    cout << "\n";
}


void cvv(vector <vector <int> > &v) {
    for (auto x : v) cv(x);
    cout << "\n";
}

void cvb(vector <bool> v) {
    for (bool x : v) cout << x << ' ';
    cout << "\n";
}

void cvs(vector <string>  v) {
    for (auto a : v) {
        cout << a << "\n";
    }
}

void cvp(vector <pii> a) {
    for (auto p : a) {
        cout << p.first << ' ' << p.second << "\n";
    }
    cout << "\n";
}

bool im(bool a, bool b) {
    return !a || b;
}

bool f(bool x, bool y, bool z, bool w) {
    return (im(x, y) == im(w, x)) && im(z, w);
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    vector <int> id = {0, 1, 2, 3};
    vector <bool> v = {0, 1};
    do {
        cout << "permutation\n";
        cv(id);
        for (bool a: v) {
            for (bool b: v) {
                for (bool c: v) {
                    for (bool d: v) {
                        vector <bool> our = {a, b, c, d};
                        bool r = f(our[id[0]], our[id[1]], our[id[2]], our[id[3]]);
                        cout << a << ' ' << b << ' ' << c << ' ' << d << ' ' << r << "\n";
                        //cout << "\n";
                    }
                }
            }
        } cout << "\n";
    } while (next_permutation(id.begin(), id.end()));
}
