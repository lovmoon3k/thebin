# fill out n, m, c, A, b
# run


import numpy as np
import pulp as pl
cbc = pl.PULP_CBC_CMD(msg=False)


### INGREDIENTS ###
# number of variables
n =
# number of constraints
m =
# variables x
x = np.array([pl.LpVariable('x'+str(i+1)) for i in range(n)])
# obj coefficients c, len n
c = np.array([])
# constraint coefficients A, len mn
A = np.array([])
A.shape = (m, n)
# bounding vector b, len m
b = np.array([])


### LP PROBLEM ###
prob = pl.LpProblem('Title', pl.LpMaximize)
# objective
prob += pl.lpSum(c*x)
# constraints
for i in range(m):
    prob += pl.lpSum([A[i]*x]) <= b[i]


### SOLUTION ###
result = prob.solve(solver=cbc)


### PRINTING RESULTS ###
xval = [x[i].varValue for i in range(n)]
print('Optimal solution:', xval)
print('Objective value:', pl.value(prob.objective))
binding = [str(i+1) for i in range(m) if pl.lpSum([A[i]*xval]) == b[i]]
print('Binding constraints:', binding)