//Library to convert Digital Output pins of the board to transmitter as well as receiver
#include <SoftwareSerial.h>
#define RE 8
#define DE 7
const byte requestframe[] = {0x01, 0x03, 0x00, 0x00, 0x00, 0x07, 0x04, 0x08};
byte values[19];
SoftwareSerial mod(2, 3); // RX, TX ( Creates a new SoftwareSerial object )

void setup() {
  Serial.begin(4800);
  mod.begin(4800);
  pinMode(RE, OUTPUT);
  pinMode(DE, OUTPUT);
}

void loop() {
    SoilParams();
    // We show the seven records.
    delay(2000);
    for (int i = 0; i < 7; i++) {
      switch (i) {
        case 1:
          Serial.print("| hum: ");
          Serial.print(getInverseInt(values, i) / 100.00);
          Serial.print(" % ");
          break;
        case 2:
          Serial.print(" temp: ");
          Serial.print(getInverseInt(values, i) / 100.00);
          Serial.print(" ยบ ");
          break;
        case 3:
          Serial.print(" ec: ");
          Serial.print(getInverseInt(values, i));
          Serial.print("  ");
          break;
        case 4:
          Serial.print(" ph: ");
          Serial.print(getInverseInt(values, i));
          Serial.print(" ");
          break;
        case 5:
          Serial.print(" n: ");
          Serial.print(getInverseInt(values, i));
          Serial.print("  ");
          break;
        case 6:
          Serial.print(" p: ");
          Serial.print(getInverseInt(values, i));
          Serial.print("  ");
          break;
        case 7:
          Serial.print(" k: ");
          Serial.print(getInverseInt(values, i));
          Serial.print(" ");
          break;
        default:
          break;
      }
    }
    Serial.println(" ");
  delay(1000);
}

void SoilParams() {
  digitalWrite(DE, HIGH);
  digitalWrite(RE, HIGH);
  if (mod.write(requestframe, sizeof(requestframe)) == 8) {
    mod.flush();
    delay(10);
    digitalWrite(DE, LOW);
    digitalWrite(RE, LOW);
    while (!mod.available());
    for (byte i = 0; i < 19; i++){
        values[i] = mod.read();
        Serial.print(values[i], HEX);
        Serial.print(' ');
        delay(10);
    }
  }
}
// This function takes the buffer answered with the modbus frame, and gets the
// data that is in position pos.
int getInverseInt(byte *bufer, int pos) {
  int a = pos * 2 + 3; // We avoid the id, function and number of data.
  // We mount the word and return it as an int.
  return (int)((word)bufer[a] << 8 | (word)bufer[a + 1]);
}