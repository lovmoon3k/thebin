#include <bits/stdc++.h>
#include <random>

#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")

using namespace std;
using ll = long long;

#ifdef FAST_ALLOCATOR_MEMORY
int allocator_pos = 0;
    char allocator_memory[(int)FAST_ALLOCATOR_MEMORY];
    inline void * operator new ( size_t n ) {
        char res = allocator_memory + allocator_pos;
        allocator_pos += n;
        assert(allocator_pos <= (int)FAST_ALLOCATOR_MEMORY);
        return (void)res;
    }
    inline void operator delete ( void * ) noexcept { }
    //inline void * operator new [] ( size_t ) { assert(0); }
    //inline void operator delete [] ( void * ) { assert(0); }
#endif
#define pb push_back
#define pp pop_back
#define ld long double
#define RandGen mt19937 rng(chrono::steady_clock::now().time_since_epoch().count())

const int INF = INT_MAX;
#define int long long

vector<int> color;
vector<map<int, int>> heavy_save;
vector<bool> type;
int answer;

signed main() {
  vector<vector<int>> graph;
  vector<vector<int>> heavy_graph;
  color.assign(100010, 0);
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);
  int n, m;
  answer = 0;
  cin >> n >> m;
  type.assign(n + 10, false);
  heavy_save.assign(n, map<int, int>());
  const int CON = 500;
  for (int i = 0; i < n; ++i) {
    int t_color;
    cin >> t_color;
    color[i] = t_color;
    vector<int> p;
    graph.push_back(p);
    heavy_graph.push_back(p);
  }
  vector<pair<int, int>> respect;
  for (int i = 0; i < m; ++i) {
    int a, b;
    cin >> a >> b;
    a--;
    b--;
    respect.emplace_back(a, b);
    if (color[a] == color[b]) {
      answer++;
    }
    graph[a].push_back(b);
    graph[b].push_back(a);
  }
  for (int i = 0; i < m; ++i) {
    int a = respect[i].first;
    int b = respect[i].second;
    heavy_save[a][color[b]]++;
    heavy_save[b][color[a]]++;
    if (graph[a].size() > CON && !type[a]) {
      type[a] = true;
    }
    if (graph[b].size() > CON && !type[b]) {
      type[b] = true;
    }
    if (type[a] && type[b]) {
      heavy_graph[a].push_back(b);
      heavy_graph[b].push_back(a);
    }
  }
  int q;
  cin >> q;
  for (int i = 0; i < q; ++i) {
    int num, new_color;
    cin >> num >> new_color;
    num--;
    int prev_color = color[num];
    color[num] = new_color;
    if (new_color == prev_color) {
      cout << m - answer << '\n';
      continue;
    }
    if (!type[num]) {
      for (auto v : graph[num]) {
        if (color[v] == prev_color) {
          answer--;
        } else if (color[v] == new_color) {
          answer++;
        }
        if (type[v]) {
          heavy_save[v][prev_color]--;
          heavy_save[v][new_color]++;
        }
      }
    } else {
      answer -= heavy_save[num][prev_color];
      answer += heavy_save[num][new_color];
      for (auto w : heavy_graph[num]) {
        heavy_save[w][prev_color]--;
        heavy_save[w][new_color]++;
      }
    }
    cout << m - answer << '\n';
  }
  return 0;
}
