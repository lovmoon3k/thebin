#include <bits/stdc++.h>

#pragma GCC optimize("Ofast")
#pragma GCC optimize("unroll-loops")

using namespace std;
using ll = long long;

#define pb push_back
#define pp pop_back
#define ld long double
#define RandGen mt19937 rng(chrono::steady_clock::now().time_since_epoch().count())

const int INF = INT_MAX;
#define int long long

const int PRIME = 31;
const int MOD = 1200720071;

vector<int> hashes;

int get_hash(const string& key, int l, int r) {
  int result = 0;
  for (int i = l; i < r; ++i) {
    int x = (int)(key[i] - 'a' + 1);
    result = (result * PRIME + x) % MOD;
  }
  return result;
}

signed main() {
  string key;
  cin >> key;
  int n;
  cin >> n;
  //hashes = {0};
  for (int i = 1; i < n; ++i) {
    hashes.push_back(get_hash(key, 0, i));
  }
  while (n--) {
    int a, b, c, d;
    cin >> a >> b >> c >> d;
    //cout << quoted(key.substr(a - 1, b - a + 1)) << ' ' << quoted(key.substr(c - 1, d - c + 1)) << '\n';
    if (((MOD + hashes[b] - (hashes[a - 1] * (int)pow(PRIME, b) - a + 1) % MOD) % MOD) == ((MOD + hashes[d] - (hashes[c - 1] * (int)pow(PRIME, d) - c + 1) % MOD) % MOD)) {
      cout << "Yes\n";
    } else {
      cout << "No\n";
    }
  }
  return 0;
}
