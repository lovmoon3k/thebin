#include<stdio.h>
#include<stdlib.h>
#include <time.h>

struct Node {
  int data;
  struct Node* next;
};

void generate_random(int lower, int upper, int n){
  FILE *f = fopen("output.txt", "w");
  
  for(int i=0; i<n; i++){
    int num = (rand() % (upper - lower + 1)) + lower;
    fprintf(f, "%d\n", num);
  }
  
  fclose(f);
  return;
}

void print_array(int arr[], int n){
  for(int i=0; i<n; i++) printf("%d ", arr[i]);
  printf("\n");
  return;
}

void insertion_sort(int arr[], int n){
    int i, j, key;
    for (i = 1; i < n; i++){
        key = arr[i];
        j = i - 1;
        while (j >= 0 && arr[j] > key){
            arr[j + 1] = arr[j];
            j = j - 1;
        }
        arr[j + 1] = key;
    }
    print_array(arr, n);
    return;
}

void swap(int *a, int *b)
{
    int temp = *a;
    *a = *b;
    *b = temp;
    return;
}
 
void heapSort(int arr[], int n)
{
    int i;
    for (i = n/2 - 1; i >= 0; i--)
    {
        int k = i;
        int j = 2*k + 1;
        while (j < n)
        {
            if (j + 1 < n && arr[j + 1] > arr[j])
                j++;
            if (arr[k] < arr[j])
            {
                // swap(&arr[k], &arr[j]);
                int tmp = arr[k];
                arr[k] = arr[j];
                arr[j] = tmp;
                k = j;
                j = 2*k + 1;
            }
            else
                break;
        }
    }
 
    for (i = n - 1; i >= 0; i--)
    {
        // swap(&arr[0], &arr[i]);
        int tmp = arr[0];
        arr[0] = arr[i];
        arr[i] = tmp;
        int k = 0;
        int j = 2*k + 1;
        while (j < i)
        {
            if (j + 1 < i && arr[j + 1] > arr[j])
                j++;
            if (arr[k] < arr[j])
            {
                // swap(&arr[k], &arr[j]);
                int tmp = arr[k];
                arr[k] = arr[j];
                arr[j] = tmp;
                k = j;
                j = 2*k + 1;
            }
            else
                break;
        }
    }
    // print_array(arr, n);
    return;
}

void insertion_sort_list(struct Node **head_ref) {
    // Initialize sorted linked list
    struct Node *sorted = NULL;

    // Traverse the given linked list and insert every node to sorted
    struct Node *current = *head_ref;
    while (current != NULL) {
        // Store next for next iteration
        struct Node *next = current->next;

        // insert current in sorted linked list
        struct Node** sorted_ref = &sorted;
        while (*sorted_ref != NULL && (*sorted_ref)->data <= current->data) {
            sorted_ref = &((*sorted_ref)->next);
        }
        current->next = *sorted_ref;
        *sorted_ref = current;

        // Update current
        current = next;
    }

    // Update head_ref to point to sorted linked list
    *head_ref = sorted;
    return;
}

void push(struct Node** head_ref, int new_data) {
    struct Node* new_node = (struct Node*) malloc(sizeof(struct Node));
    new_node->data = new_data;
    new_node->next = (*head_ref);
    (*head_ref) = new_node;
    return;
}

void bucketSort(int arr[], int n, int m)
{
    struct Node *bucket[m];
    int i;

    for (i = 0; i < m; i++) bucket[i] = NULL;

    for (i = 0; i < n; i++)
    {
        struct Node *node = (struct Node*)malloc(sizeof(struct Node));
        node->data = arr[i];
        node->next = bucket[n*arr[i]];
        bucket[n*arr[i]] = node;
    }

    for(i=0; i < m; i++) insertion_sort_list(&bucket[i]);

    int index = 0;
    for (int i = 0; i < m; i++) {
        struct Node *current = bucket[i];
        while (current != NULL) {
            arr[index++] = current->data;
            current = current->next;
        }
    }

    
    print_array(arr, n);

    return;
}


int main(){
  clock_t start, end;
  double cpu_time_used;
  generate_random(0, 3, 1000000);
  FILE *f = fopen("output.txt", "r");
  int n = 1000;
  scanf("%d", &n);
  int arr[n];
  for(int i=0; i<n; i++) fscanf(f, "%d", &arr[i]);
  start = clock();

  // gcc -Wl,--stack,16777216 -o file.exe file.c
  // insertion_sort(arr, n);
  // heapSort(arr, n);
  bucketSort(arr, n, 350000);

  end = clock();
  double time_taken = ((double) (end - start)) / CLOCKS_PER_SEC;
  printf("Time Taken -> %f\n", time_taken);
  fclose(f);

  return 0;
}