#include <iostream>
#include <vector>
#include <queue>
#include <set>
using namespace std;

const int N = 1e5 + 5;
const int INF = 1e9 + 9;
vector<pair<int, int>> g[N];
int n, m, dist[N], used[N];

int main()
{
    cin >> n >> m;
    for (int i = 1; i <= m; i++) {
        int u, v, w;
        cin >> u >> v >> w;
        g[u].push_back({v, w});
        g[v].push_back({u, w});
    }
    for (int i = 1; i <= n; i++)
        dist[i] = INF;
    dist[1] = 0;


    priority_queue<pair<int, int>> q; ///(-dist[v], v) for the vertex that were not selected before
    q.push({0, 1}); //adding element
    ///take elements from the queue as long as it is not empty
    while (!q.empty()) {
        int v = q.top().second;
        int d = -q.top().first;
        q.pop(); ///delete the first element
        if (d != dist[v])
            continue;
        ///update
        for (auto [u, w] : g[v]) { //C++17
            if (dist[u] > dist[v] + w) {
                dist[u] = dist[v] + w;
                q.push({-dist[u], u});
            }
        }
    }
    for (int i = 1; i <= n; i++)
        cout << dist[i] << ' ';
    return 0;
}
