#include <stdio.h>
#include <ctype.h>
#include <stdint.h>
#include <stdlib.h>
#include <string.h>

#define SIZE 100

char* get_sentence(){
    int buf_size = SIZE;
    char* sentence= malloc(buf_size*sizeof (char*));
    int len_of_sentence = 0;
    int symbol;
    do{
        symbol=getchar();
        if(symbol==' ' && len_of_sentence==0) {
            continue;
        }
        sentence[len_of_sentence++]=symbol;
        if (len_of_sentence==buf_size && sentence!=NULL){
            buf_size+=SIZE;
            sentence= realloc(sentence,buf_size);
        } else if(sentence==NULL) {
            printf("Ошибка выделения памяти!\n");
        }
    }while(symbol!='.'&&symbol!='\n');

    sentence[len_of_sentence]='\0';
    return sentence;
}

char** get_text(int* text_size){
    int buf_size=SIZE;
    char** text = malloc(buf_size*sizeof(char* ));
    int size = 0;
    char* sentence;

    while(1){
        sentence = get_sentence();
        if(sentence[0]=='\n'){
            break;
        }
        text[size++]=sentence;
        if (size==buf_size && text!=NULL){
            buf_size+=SIZE;
            text= realloc(text,buf_size*sizeof(char* ));
        } else if(sentence==NULL) {
            printf("Ошибка выделения памяти!\n");
        }
    }
    *text_size=size;
    return text;
}

char** delete_all_equal_sentences(char** text,int* count){
    char** new_text= malloc(*count*sizeof(char*));
    int duplicate=0;
    int dc;
    int c=0;
    for (int i = 0; i < *count; i++) {
        dc=0;
        for (int j = i+1; j < *count; j++) {
            if (strlen(text[i])== strlen(text[j])){
                duplicate=1;
                for (int k = 0; k < strlen(text[i]); k++) {
                    if (tolower(text[j][k])!= tolower(text[i][k])){
                        duplicate=0;
                        break;
                    }
                }
                dc+=duplicate;
            }
        }
        if (dc==0){
            new_text[c++]=text[i];
        }
    }
    *count=c;
    return new_text;
}

int cmp_comma(const void *a, const void *b) {
    const int **a1 = (const int **)a;
    const int **b1 = (const int **)b;
    const int a2 = (*a1)[0];
    const int b2 = (*b1)[0];
    if(a2>b2) {
        return 1;
    }
    if(a2<b2) {
        return -1;
    }
    return 0;
}

char** sort_by_comma(char** text,int text_size) {
    char** new_text = malloc(text_size*sizeof(char*));
    int len;
    int comma;
    int** comma_count = malloc(text_size*sizeof(int*));
    for(int i = 0; i < text_size; i++) {
        comma_count[i] = malloc(2*sizeof(int));
    }
    for(int i = 0; i < text_size; i++) {
        comma = 0;
        len = strlen(text[i]);
        for(int j = 0; j < len; j++) {
            if(text[i][j] == ',') comma++;
        }
        comma_count[i][0] = comma;
        comma_count[i][1] = i;
    }
    qsort(comma_count, text_size, sizeof(int*), cmp_comma);
    for(int i = 0; i < text_size; i++) {
        new_text[i] = text[comma_count[i][1]];
    }
    return new_text; 
}

char** delete_sum_13(char** text, int* text_size){
    int numbers[10] = {0,1,2,3,4,5,6,7,8,9};
    int count;
    char symb;
    int a;
    for(int i = 0; i < *text_size; i++) {
        count = 0;
        int len = strlen(text[i]);
        for(int j = 0; j < len; j++) {
            symb = text[i][j];
            if(isdigit(symb)) {
                a = symb-'0';
                count+=numbers[a];
            }
        }
        if(count==13) {
            memmove(text+i, text+i+1, ((*text_size-i)*sizeof(char*)));
            i--;
            (*text_size)--;
        }
    }
    return text;
}

char **replace_robin(char **text,int *size){
    char* rob = "Robin";
    char* bat = "I am Batman";
    char *p;
    int len;
    for (int i = 0; i < *size; i++) {
        p = strstr(text[i], rob);
        while (p!=NULL) {
            len = strlen(text[i]);
            memcpy(p + strlen(bat), p + strlen(rob), strlen(text[i]) - strlen(rob));
            memcpy(p, bat, strlen(bat));
            text[i][len + 7] = '\0';
            p = strstr(p+1, rob);
        }
    }
    return text;
}

void print_sentence_vowel_and_figure(char** text, int text_size){
    char vowels[] = "AEIOUY";
    for(int i = 0; i < text_size; i++){
        int s = 0;
        while(isalnum(text[i][s]) == 0){
            s++;
        }
        if(isdigit(text[i][s])){
            puts(text[i]);
        }else{
            int flag = 0;
            for(int j = 0; j < 6; j++){
                if(toupper(text[i][s]) == vowels[j]){
                    flag = 1;
                    break;
                }
            }
            if(flag == 1){
                puts(text[i]);
            }
        }
    }
}

void print_text(char** text, int text_size){
    for(int i=0; i<text_size; i++){
        printf("%s",text[i]);
    }
}

void menu(){
    printf("Введите одно из действий:\n"\
    "1) Заменить все подстроки <Robin> на подстроку <I am Batman>.\n"\
    "2) Отсортировать предложения по учеличению количества запятых в прделожении.\n"\
    "3) Удалить все предложения в которых сумма цифр в предложении равняется 13.\n"\
    "4) Вывести все предложения в которых первое слово начинается с гласной буквы или цифры.\n"\
    "5) Завершить работу проргаммы\n");
}

int main(){
    int text_size;
    char option;
    char** new_text;
    printf("Введите текст\n");
    new_text=get_text(&text_size);
    new_text = delete_all_equal_sentences(new_text,&text_size);
    printf("Повторяющиеся предложения удалены\n");
    print_text(new_text, text_size);
    menu();
    scanf("%c", &option);
    switch(option){
        case '1':
            new_text = replace_robin(new_text,&text_size);
            print_text(new_text, text_size);
            break;
        case '2':
            new_text = sort_by_comma(new_text,text_size);
            print_text(new_text, text_size);
            break;
        case '3':
            new_text = delete_sum_13(new_text,&text_size);
            print_text(new_text, text_size);
            break;
        case '4':
            print_sentence_vowel_and_figure(new_text, text_size);
            break;
        case '5':
            printf("Работа программы завершена.\n");
            break;
        default:
            printf("Такого действия нет!\n");
            break;
    }   
    return 0;
}