# From ChatGPT

import socket
import json
from enum import Enum
from concurrent.futures import ThreadPoolExecutor
from flask import Flask, request
import grpc
from protobuf import calculator_pb2, calculator_pb2_grpc

app = Flask(__name__)

class Operation(Enum):
    ADDITION = 1
    SUBTRACTION = 2
    MULTIPLICATION = 3
    DIVISION = 4

def perform_operation(numbers, operation):
    if operation == Operation.ADDITION:
        return sum(numbers)
    elif operation == Operation.SUBTRACTION:
        return numbers[0] - sum(numbers[1:])
    elif operation == Operation.MULTIPLICATION:
        result = 1
        for number in numbers:
            result *= number
        return result
    elif operation == Operation.DIVISION:
        result = numbers[0]
        for number in numbers[1:]:
            result /= number
        return result
    else:
        return "Invalid operation"

@app.route("/calculate", methods=["POST"])
def calculate():
    data = request.get_json()
    numbers = data["numbers"]
    operation = Operation(data["operation"])
    result = perform_operation(numbers, operation)
    return str(result)

class CalculatorServicer(calculator_pb2_grpc.CalculatorServicer):
    def Calculate(self, request, context):
        numbers = request.numbers
        operation = Operation(request.operation)
        result = perform_operation(numbers, operation)
        return calculator_pb2.CalculateResponse(result=result)

def start_flask_server():
    app.run(port=8080)

def start_grpc_server():
    server = grpc.server(ThreadPoolExecutor(max_workers=10))
    calculator_pb2_grpc.add_CalculatorServicer_to_server(CalculatorServicer(), server)
    server.add_insecure_port("[::]:50051")
    server.start()
    server.wait_for_termination()

def handle_tcp_request(conn, addr):
    data = conn.recv(1024).decode()
    data = json.loads(data)
    numbers = data["numbers"]
    operation = Operation(data["operation"])
    result = perform_operation(numbers, operation)
    result = str(result).encode()
    conn.sendall(result)
    conn.close()

def start_tcp_server():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind(("0.0.0.0", 1234))
    server.listen(5)
    while True:
        conn, addr = server.accept()
        handle_tcp_request(conn, addr)

def handle_udp_request(data, addr):
    data = json.loads(data.decode())
    numbers = data["numbers"]
    operation = Operation(data["operation"])
    result
