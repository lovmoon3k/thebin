#include <limits>
#include <random>
#include <iostream>
#include<future>
#include<vector>
#include<numeric>

using namespace std;

void LoadTest( vector <int>&  foo){
  mt19937 gen;
  uniform_int_distribution<int> dist(
    numeric_limits<int>::min(),
    numeric_limits<int>::max());

  for (int i = 0; i < 100000;++i) {
    foo.push_back(dist(gen));
  }
  
}

int SumToVectorsFirst(const vector <int>& one, const vector <int>& two) {
	return accumulate(begin(one), end(one), 0) + accumulate(begin(two), end(two), 0);
}

int SumToVectorsSecond(const vector <int>& one, const vector <int>& two) {

	future<int> f = async([&one] {
		return accumulate(begin(one), end(one), 0);
		});
	int result = accumulate(begin(two), end(two), 0);
		return f.get() + result;
}



static void first(benchmark::State& state) {
 vector <int> one; LoadTest(one);
 vector <int> two; LoadTest(two);
  for (auto _ : state) {
    SumToVectorsFirst(one, two);
  }
}

BENCHMARK(first);

static void second(benchmark::State& state) {
 vector <int> one; LoadTest(one);
 vector <int> two; LoadTest(two);
  for (auto _ : state) {
    SumToVectorsSecond(one, two);
  }
}
BENCHMARK(second);
