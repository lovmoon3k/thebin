#include <iostream>
#include <cmath>
#include <vector>
#include <queue>
#include <algorithm>
#include <string>
#include <stack>
#include <set>
#include <map>
#define pii pair <int, int>
#define pb(x) push_back(x)
using namespace std;
using ll = long long;
using ld = long double;
using db = double;
void cv(vector <int> &v) {
    for (auto x : v) cout << x << ' ';
    cout << "\n";
}

void cvl(vector <ll> &v) {
    for (auto x : v) cout << x << ' ';
    cout << "\n";
}


void cvv(vector <vector <int> > &v) {
    for (auto x : v) cv(x);
    cout << "\n";
}

void cvb(vector <bool> v) {
    for (bool x : v) cout << x << ' ';
    cout << "\n";
}

void cvs(vector <string>  v) {
    for (auto a : v) {
        cout << a << "\n";
    }
}

void cvp(vector <pii> a) {
    for (auto p : a) {
        cout << p.first << ' ' << p.second << "\n";
    }
    cout << "\n";
}



struct tim {
    int h, mn, s;
    void see() {
        cout << h << ' ' << mn << ' ' << s << "\n";
    }
};

int len(tim x) {
    return 3600 * x.h + 60 * x.mn + x.s;
}

bool cmp(tim a, tim b) {
    return len(a) < len(b);
}

int f(tim a, tim b) {
    int la = len(a), lb = len(b);
    if (lb - la < 0) {
        lb += 24 * 3600;
    }
    return lb - la;
}


tim con(string T) {
    int h = int(T[0] + T[1]);
    int mn = int(T[3] + T[4]);
    int s = int(T[6] + T[7]);
    return {h, mn, s};
}


int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    bool sh = 1;
    int n, m;
    map <string, pair <tim, tim> > res;
    cin >> n >> m;
    for (int i = 0; i < m; ++i) {
        int p;
        cin >> p;
        string nam; cin >> nam;
        string Ti; cin >> Ti;
        if (p != 1 && p != n) {
            continue;
        }
        tim t = con(Ti);
        if (p == 1) {
            res[nam].first = t;
        } else {
            res[nam].second = t;
        }
    }
    
    if (sh) {
        
    }
}
