clear all
close all
clc




%% 1. kmeans clustering - Define aggregators positions
% *************************************************************************
% *************************************************************************
% *************************************************************************
% *************************************************************************

% Define the number of sensors and their positions
LEN_X = 150;
LEN_Y = 150;
N_sens = 100;
x_sens = -LEN_X/2 + rand(1, N_sens) * LEN_X;
y_sens = -LEN_Y/2 + rand(1, N_sens) * LEN_Y;
% My kmeans - Split sensors into clusters and define aggregators
K = 3;
epsilon_thr = 0.005;
points = [x_sens; y_sens];
colors1 = ["red", "green", "blue", "yellow", "cyan", "magenta", "black"];
colors2 = zeros(K, 3);
for k = 1 : K
    colors2(k, :) = [rand, rand, rand];
end

colors = [];
if K <= length(colors1)
    colors = colors1;
else
    colors = colors2;
end
[aggregators, groups] = my_kmeans(x_sens, y_sens, N_sens, K, epsilon_thr, colors, colors1, colors2);
aggregators = [20 -20 25; 10 0 -15];
% aggregators = [100 -40 -100 -50 70; 50 110 10 -80 -80];


%% 2. Fixed data about position and frequency
% *************************************************************************
% *************************************************************************
% *************************************************************************
% *************************************************************************

% BS === CP
xb = 1.6 * LEN_X / 2;    yb = 0;    h_b = 15;    qb = [xb, yb];
x_cp = xb;    y_cp = yb;    q_cp = [x_cp, y_cp];

% Data EM waves
f = 5.8 * 10^9;    c = 3 * 10^8;    lambda = c / f;    B = 10^6;
Gt = 1;    Gr = 1;
Gt_dB = natural_to_dB(Gt);    Gr_dB = natural_to_dB(Gr);
P_aggr_max = 0.01;                       % 0.02 W = 13 dBm
P_tr = P_aggr_max / 2;

% Formulas for noise
sigma_dBm = -174 + 10 * log10(B);
sigma_dB = sigma_dBm - 30;
P_noise = dB_to_natural(sigma_dB);

% Calculations
Gt_dB = natural_to_dB(Gt);    Gr_dB = natural_to_dB(Gr);
% FSPL
d0 = 1;
rho_1m_dB = - (20 * log10(d0 * f) + 20 * log10(4*pi/c) - Gt_dB - Gr_dB);
rho_1m = dB_to_natural(rho_1m_dB);

% Data of UAV-RIS
H = 30;
d = lambda / 2;
delta_t = 2;
v_max_kmh = 62;
v_max = v_max_kmh / 3.6;                          % 16.67 m/s                 
a_max = 8.2;                                      % 8.2 m/s^2

% SNR Threshold
SNR_thr = 1;
rate_thr = B * log2(1 + SNR_thr);




%% 3. UAV Components - Find flight time
% *************************************************************************
% *************************************************************************
% *************************************************************************
% *************************************************************************

M_max = 800;
M = 500;
m_list = 1 : M;

name = "Tattu 30.000 mAh";
B_c = 666 * 3600;               % Wh  ---> W * s = Joule
B_w = 4.67;                     % kgr
UAV_w = 3.25;                   % kgr
E_w = 7.76 / 1000;              % kgr
T_max = 20;                     % kgr

rho_air = 1.225;                % kgr/m^3
v_a = 2.5;                      % 2.5 m/s
C_d = 0.005;
g = 9.81;                       % m/s^2


% Worst Case Scenario (M_max)
display('**********************************************************');
display('Worst case scenario, when M = M_max');
display(' ');
logos_max = 0.4;                % (v / vmax)_max
v_max_mine = v_max * logos_max;
[Ltmin_minutes, P_tot_max] = find_Lt_minutes(M_max, logos_max, lambda, UAV_w, E_w, T_max, rho_air, v_a, C_d, g, v_max, B_w, B_c);
Ltmin_sec = floor(Ltmin_minutes * 60);
N_min = floor(Ltmin_sec / delta_t);
pretty_Lt(M_max, logos_max, P_tot_max, Ltmin_minutes, N_min);
display('**********************************************************');
display(' ');

% This Case Scenario  (M)
display('**********************************************************');
display('This case scenario, when M != M_max');
display(' ');
[Lt_minutes, P_tot] = find_Lt_minutes(M, logos_max, lambda, UAV_w, E_w, T_max, rho_air, v_a, C_d, g, v_max, B_w, B_c);
Lt_sec = floor(Lt_minutes * 60);
N = floor(Lt_sec / delta_t);
pretty_Lt(M, logos_max, P_tot, Lt_minutes, N);
display('**********************************************************');
display(' ');







%% 4. Technical RIS Stats - Weights and Dimensions
display('**********************************************************');
W = technical_RIS_stats(f, B, M, logos_max, lambda, UAV_w, E_w, T_max, rho_air, v_a, C_d, g, v_max, B_w, B_c);
display('**********************************************************');
display(' ');






%% 5. Initialize A, P, Q, Theta
% *************************************************************************
% *************************************************************************
% *************************************************************************
% *************************************************************************

n_list = 1 : N;

% -------- VARIABLES ---------
% TDMA  = 1 x N ----> A = K x N
% POWER = 1 x N ----> P = K x N
% Q = 2 x N
% Theta = M x N, total_gain_optimized = 1 x N
% SNR = 1 x N, SNR_av_optimized = scalar

% -------- OTHER BENCHMARKS --------
% Q = benchmark_straight(q_cp, LEN_X, LEN_Y, N);
% Q = benchmark_straight_lines(q_cp, N, aggregators, K);
% TDMA = benchmark_TDMA_straight(N, K, Q, aggregators)

iter = 0;
TDMA = randi(K, 1, N);
A = TDMA_to_A(TDMA, K, N);
POWER = P_tr * ones(1, N);
P = POWER_to_P(POWER, K, N, TDMA);
Q = traj_ellipsis(q_cp, LEN_X, LEN_Y, N);

[Theta, total_gain_optimized, SNR, SNR_av_optimized_dB] = ...
optimize_phase_shifts(N, M, TDMA, P_tr, Q, aggregators, H, h_b, qb, ...
lambda, d, rho_1m, P_noise);

% [Theta, total_gain_optimized, SNR, SNR_av_optimized] = ...
% optimal_Theta(N, M, A, P, Q, aggregators, H, h, qb, ...
% lambda, d, rho_1m, P_noise, K);

DF = find_DF(A, P_tr, Q, Theta, total_gain_optimized, N, Lt_sec, K, B, ...
P_noise, delta_t, SNR_thr, rate_thr);







%% 6. Plots, velocity, acceleration
Q;
v = calculate_velocity(Q, delta_t, N);
a = calculate_acceleration(v, delta_t, N);
plot_trajectory(Q, LEN_X, LEN_Y, aggregators, ...
    x_cp, y_cp, xb, yb, K, colors, iter);





%% 7. Initial QoS
% *************************************************************************
% *************************************************************************
% *************************************************************************
% *************************************************************************

display(' ');
display(' ');
display(' ');
display(' ');
display('**********************************************************');
display('**********************************************************');
display(' ');
display('MAIN FUNCTION PARAMETERS');
display(' ');
disp("M = " + num2str(M) + " elements");
disp("N = " + num2str(N) + " timeslots");
disp("K = " + num2str(K) + " aggregators");
display(' ');
display(' ');


fprintf('<strong>-----------------------------</strong>\n');
disp("-------- Iteration " + num2str(iter) + " --------");
fprintf('<strong>-----------------------------</strong>');
display(' ');
display('******** QoS ********');
disp("SNR_av_optimized_dB = " + SNR_av_optimized_dB + " dB");
disp("Average DF = " + num2str(DF / (8*10^6)) + " MB");
display(' ');

display('**** Outage (SNR < 1) ****');
bad_SNR = find(SNR <= 1);
bad_len = length(bad_SNR);
P_outage = bad_len / N;
disp("Happened in " + num2str(bad_len) + "/" + num2str(N) + " timeslots")
disp("P_outage = " + num2str(100 * P_outage) + " %");
display(' ');







%% 8. Alternate Algorithm - Improve QoS
% *************************************************************************
% *************************************************************************
% *************************************************************************
% *************************************************************************

max_iter = 3;
improve_perc = Inf;
improve_perc_thr = 1/100;




while iter < max_iter && improve_perc > improve_perc_thr
    
    
    
    iter = iter + 1;
    initial_A = A;
    initial_Q = Q;
    initial_Theta = Theta;
    initial_total_gain_optimized = total_gain_optimized;
    initial_SNR = SNR;
    initial_DF = DF;
   
    fprintf('<strong>-----------------------------</strong>\n');
    disp("-------- Iteration " + num2str(iter) + " --------");
    fprintf('<strong>-----------------------------</strong>');
    display(' ');
     
    
    
    
    %% A - New Time Allocation (TDMA_new)
    fprintf('<strong> Subproblem 1 - Optimize A </strong>');
    display(' ');
    
    % A1 - New TDMA-A (Phases from OLD A, OLD Q)   
    TDMA_new = benchmark_TDMA_straight(N, K, initial_Q, aggregators);
    A_new = TDMA_to_A(TDMA_new, K, N);  
    DF_A1 = find_DF(A_new, P_tr, initial_Q, initial_Theta, initial_total_gain_optimized, N, Lt_sec, K, B, ...
    P_noise, delta_t, SNR_thr, rate_thr);
    
    % A2 - New TDMA-A (Phases from NEW A, OLD Q)
	[Theta_A, total_gain_optimized_A, SNR_A, SNR_av_optimized_dB_A] = ...
	optimize_phase_shifts(N, M, TDMA_new, P_tr, initial_Q, aggregators, H, h_b, qb, ...
	lambda, d, rho_1m, P_noise);
    DF_A2 = DF_thr(A_new, P_tr, initial_Q, total_gain_optimized_A, K, N, B, P_noise, Lt_sec, delta_t, SNR_thr, rate_thr);
    
    % Stats
    display('******** QoS ********');
    disp("SNR_av_optimized_dB_A = " + SNR_av_optimized_dB_A + " dB");  
    disp("Average DF_A2 = " + num2str(DF_A2 / (8*10^6)) + " MB");
    display(' ');
    
    display('**** Outage (SNR < 1) ****');
    bad_SNR = find(SNR_A <= 1);
    bad_len = length(bad_SNR);
    P_outage = bad_len / N;
    disp("Happened in " + num2str(bad_len) + "/" + num2str(N) + " timeslots")
    disp("P_outage = " + num2str(100 * P_outage) + " %");
    display('(Used new A, old Q, new phases)');
    display(' ');
    
    display('**** Improve ****');
    improve_perc_A = (DF_A2 - initial_DF) / initial_DF;
    disp("Improve_A = " + num2str(100*improve_perc_A) + "%");
    display(' ');
    
    
    
    
    
    %% Q - New Trajectory - FMINCON (Q_new)
    fprintf('<strong> Subproblem 2 - Optimize Q </strong>');
    display(' ');
    
    % 1. Fixed variables for this iteration
    F = P_tr * (rho_1m * M)^2 / P_noise;
    xk = zeros(1, N);
    yk = zeros(1, N);
    for n = 1 : N
        xk(n) = aggregators(1, TDMA_new(n));
        yk(n) = aggregators(2, TDMA_new(n));
    end
         
    
    % FMINCON - With Auxiliary Variables
    % Variables order for UAV position: 
    % z = [ |... xn ...| |... yn...| |...sn...| |...tn...| ]
    % Size of z ---> 4N
    
    iter_SCA = 1;
    max_iter_SCA = 5;
    while iter_SCA <= max_iter_SCA
        
        if iter == 1
            z0 = 1.45 * ones(4*N, 1);     % Initial point
            s0 = rand(N, 1);               % Auxiliary 's' ---> Taylor point
            t0 = rand(N, 1);               % Auxiliary 't' ---> Taylor point
        end
        if iter > 1 || iter_SCA > 1
            z0 = z;
            s0 = z(2*N : 3*N);
            t0 = z(3*N : 4*N);
        end
        lb = zeros(4*N, 1);
        lb(1:N) = -LEN_X/2;
        lb(N+1:2*N) = -LEN_Y/2;
        obj = @(z) sum(z(2*N+1:3*N)./ s0) + sum(z(3*N+1:4*N) ./ t0);
        options = optimoptions(@fmincon,'Algorithm','interior-point',...
                  'MaxIter',10000,'MaxFunEvals',10000);
              
        [z, fval, exitflag] = fmincon(@objective, z0, [], [], ...
                                 [], [], lb, [], @nonlcon, options);
        fval
        exitflag
        iter_SCA = iter_SCA + 1;
        
    end
    
    
    
    
    % Plot the Q_fmincon = new trajectory
    display(' ');
    display('Diafores me initial_Q');
    Q_new = zeros(2, N);
    Q_new(1, :) = z(1:N);
    Q_new(2, :) = z(N+1:2*N);
    
    SAME_COORD = sum(sum(Q_new == initial_Q));
    disp("Same coordinates: " + num2str(SAME_COORD) + "/" + num2str(2*N));
    disp("Diff coordinates: " + num2str(2*N-SAME_COORD) + "/" + num2str(2*N));
    plot_trajectory(Q_new, LEN_X, LEN_Y, aggregators, ...
    x_cp, y_cp, xb, yb, K, colors, iter);
    title_string = "Iteration " + num2str(iter) + " with fmincon - auxiliary";
    title(title_string);
    
    
    
    
    
    
    % Q - New Trajectory (Phases from NEW A, OLD Q)
	[Theta_Q, total_gain_optimized_Q, SNR_Q, SNR_av_optimized_dB_Q] = ...
	optimize_phase_shifts(N, M, TDMA_new, P_tr, Q_new, aggregators, H, h_b, qb, ...
	lambda, d, rho_1m, P_noise);
    DF_Q = DF_thr(A_new, P_tr, Q_new, total_gain_optimized_Q, K, N, B, P_noise, Lt_sec, delta_t, SNR_thr, rate_thr);
    
    % Stats
    display('******** QoS ********');
    disp("SNR_av_optimized_dB_Q = " + SNR_av_optimized_dB_Q + " dB");  
    disp("Average DF_Q = " + num2str(DF_Q / (8*10^6)) + " MB");
    display(' ');
    
    display('**** Outage (SNR < 1) ****');
    bad_SNR = find(SNR_Q <= 1);
    bad_len = length(bad_SNR);
    P_outage = bad_len / N;
    disp("Happened in " + num2str(bad_len) + "/" + num2str(N) + " timeslots")
    disp("P_outage = " + num2str(100 * P_outage) + " %");
    display('(Used new A, old Q, new phases)');
    display(' ');
    
    display('**** Improve ****');
    improve_perc_Q = (DF_Q - initial_DF) / initial_DF;
    disp("Improve_Q = " + num2str(100*improve_perc_Q) + "%");
    display(' ');
    
    
    
    
    
    %% Prepare for new iteration
    A = A_new;
    Q = Q_new;
    Theta = Theta_Q;
    total_gain_optimized = total_gain_optimized_Q;
    SNR = SNR_Q;
    DF = DF_Q;

    
end






%% FMINCON AUXILIARY FUNCTIONS

function value = objective(z)

    global s0 t0 N
    value = 0;
    for n = 1 : N
        value = value + z(2*N + n) / s0(n);
        value = value + z(3*N + n) / t0(n);
    end
    
end


function [cin, ceq] = nonlcon(z)
    
    global N xb yb v_max_mine delta_t h_b
    
    % Equality Constraints:
    eq1 = z(1) - xb;                        % x0 = xb
    eq2 = z(N+1) - yb;                      % y0 = yb
    eq3 = z(N) - xb;                        % xN = xb
    eq4 = z(2*N) - yb;                      % yN = yb
    eq5 = z(200) - 40;
    eq6 = z(N+200) + 2.5;
    eq7 = z(400) + 60;
    eq8 = z(N+400) - 2;
    %eq5 = (z(2)-z(1))^2 + (z(N+2)-z(N+1))^2 - ...
    %    (v_max_mine/5 * delta_t)^2;         % v(1) = v_max_mine/5
    ceq = [eq1 eq2 eq3 eq4 eq5 eq6 eq7 eq8];
    
    % Inequality Constraints
    cin = [];
    for n = 2 : N
        ineq = (z(n)-z(n-1))^2 + (z(N+n)-z(N+n-1))^2 - ...
            (v_max_mine * delta_t)^2;
        cin = [cin ineq];
    end
    
    % Auxiliary Variables Constraints
    for n = 1 : N
        ineq1 = (z(n)-xk(n))^2 + (z(N+n)-yk(n))^2 + H^2 - z(2*N+n);
        ineq2 = (z(n)-xb)^2 + (z(N+n)-yb)^2 + (H-h_b)^2 - z(3*N+n);
        cin = [cin ineq1 ineq2];
    end
    
end



