import re

def split_list(lst:list, steps: int) -> list[list]:
	_result = []

	for k in range(0, steps):
		_result.append(lst[:8])
		del lst[:9]

	return _result

def load_all(path: str) -> list[str]:
	with open(path, 'r') as f:
		try:
			#read from file and stripping 
			_stripped = []
			result = f.readlines()
			for line in result:
				_stripped.append(line.strip())
			return _stripped
		except OSError as e:
			return e


def read_table(table: list) -> list:
	_chesses = []
	_buff = ['.','.','.','.','.','.','.','.']
	for row in table:
		_splitted_row = []
		_splitted_row[:0] = row
		for k in range(0, 8):
			if _splitted_row[k] != _buff[k]:
				_buff[k] = " "


		expr = re.findall(r'[a-zA-Z]', row) 
		for match in expr:
			if match:
				_chesses.append(match)

	_free_columns = _buff.count('.')
	return [_free_columns, count_figures(_chesses)]

def count_figures(lst: list) -> list[bool, int]:a
	_isSimilar = False
	_result = 0
	_figures = ['K', 'W', 'S', 'H', 'G', 'P']
	for figure in _figures:
		if lst.count(figure) == lst.count(figure.lower()):
			_result += lst.count(figure)*2
		else:
			return _isSimilar
	_isSimilar = True
	return [_isSimilar, _result]

def get_answer(data: list, step: int):
	total = 0
	similartotal = 0
	deskbuff = []
	isSimilarBuff = []
	for k in range(0, step):
		desk, isSimilar = read_table(data[k])
		if desk:
			total += 1
			deskbuff.append(desk)

		if isSimilar:
			similartotal += 1
			isSimilarBuff.append(isSimilar[1])

	deskbuff.sort()
	isSimilarBuff.sort()

	print(total, deskbuff)
	print(similartotal, isSimilarBuff)





lst = load_all('szachy_przyklad.txt')

res = split_list(lst, 125)

get_answer(res, 125)

# print(read_table(res[1]))
