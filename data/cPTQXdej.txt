namespace _11._Array_Manipulator
{
	using System;
	using System.Linq;
	using System.Text;

	class ArrayManipulator
	{
        static void Main(string[] args)
        {
            const byte EVEN_FLAG = 0;
            const byte ODD_FLAG = 1;

            const string END_COMMAND = "end";
            const string EXCHANGE_COMMAND = "exchange";
            const string MAX_COMMAND = "max";
            const string MIN_COMMAND = "min";
            const string ODD_COMMAND = "odd";
            const string FIRST_COMMAND = "first";
            const string LAST_COMMAND = "last";

            const string IVALID_INDEX_MESSAGE = "Invalid index";
            const string IVALID_COUNT_MESSAGE = "Invalid count";
            const string NO_MATCHES_MESSAGE = "No matches";

            StringBuilder sb = new StringBuilder();

            int[] arr = Console.ReadLine().Split().Select(int.Parse).ToArray();

            string commands;

            while ((commands = Console.ReadLine()) != END_COMMAND)
            {
                string[] input = commands.Split().ToArray();

                string command = input[0];
                string action = input[1];

                if (command == EXCHANGE_COMMAND)
                {
                    int index = int.Parse(action);

                    if (!IsValid(arr.Length, index))
                    {
                        sb.AppendLine(IVALID_INDEX_MESSAGE);
                    }
                    else
                    {
                        arr = GetExchangedArray(arr, index);
                    }
                }
                else if (command == MAX_COMMAND || command == MIN_COMMAND)
                {
                    byte flag = EVEN_FLAG;

                    if (action == ODD_COMMAND)
                    {
                        flag = ODD_FLAG;
                    }

                    if (OddEvenChecker(arr, flag))
                    {
                        switch (command)
                        {
                            case MAX_COMMAND:
                                sb.AppendLine(GetMax(arr, flag).ToString());
                                break;

                            case MIN_COMMAND:
                                sb.AppendLine(GetMin(arr, flag).ToString());
                                break;
                        }
                    }
                    else
                    {
                        sb.AppendLine(NO_MATCHES_MESSAGE);
                    }
                }
                else if (command == FIRST_COMMAND)
                {
                    int index = int.Parse(action);

                    action = input[2];

                    byte flag = EVEN_FLAG;

                    if (action == ODD_COMMAND)
                    {
                        flag = ODD_FLAG;
                    }

                    if (index > arr.Length)
                    {
                        sb.AppendLine(IVALID_COUNT_MESSAGE);
                    }
                    else if (!OddEvenChecker(arr, flag))
                    {
                        sb.AppendLine("[]");
                    }
                    else
                    {
                        sb.AppendLine(GetFirst(arr, index, flag));
                    }
                }
                else if (command == LAST_COMMAND)
                {
                    int index = int.Parse(action);

                    action = input[2];

                    byte flag = EVEN_FLAG;

                    if (action == ODD_COMMAND)
                    {
                        flag = ODD_FLAG;
                    }

                    if (index > arr.Length)
                    {
                        sb.AppendLine(IVALID_COUNT_MESSAGE);
                    }
                    else if (!OddEvenChecker(arr, flag))
                    {
                        sb.AppendLine("[]");
                    }
                    else
                    {
                        sb.AppendLine(GetLast(arr, index, flag));
                    }
                }
            }

            sb.AppendLine($"[{string.Join(", ", arr)}]");

            Console.WriteLine(sb.ToString());
        }

        static bool IsValid(int maxLimit, int index) => (index >= 0) && (index < maxLimit);

        static int[] GetExchangedArray(int[] arr, int index)
        {
            int[] result = new int[arr.Length];
            int newIndex = 0;

            if ((index + 1) < arr.Length)
            {
                for (int i = index + 1; i < arr.Length; i++)
                {
                    result[newIndex] = arr[i];
                    newIndex++;
                }

                for (int i = 0; i <= index; i++)
                {
                    result[newIndex] = arr[i];
                    newIndex++;
                }
            }
            else
            {
                result = arr;
            }

            return result;
        }

        static bool OddEvenChecker(int[] arr, byte flag)
        {
            foreach (int item in arr)
            {
                if (item % 2 == flag)
                {
                    return true;
                }
            }

            return false;
        }

        static int GetMax(int[] arr, byte flag)
        {
            int max = int.MinValue;
            int maxIndex = 0;

            for (int i = 0; i < arr.Length; i++)
            {
                bool isMatch = (Math.Abs(arr[i] % 2) == flag) && (arr[i] >= max);

                if (isMatch)
                {
                    maxIndex = i;
                    max = arr[i];
                }
            }

            return maxIndex;
        }

        static int GetMin(int[] arr, byte flag)
        {
            int min = int.MaxValue;
            int minIndex = 0;

            for (int i = 0; i < arr.Length; i++)
            {
                bool isMatch = (Math.Abs(arr[i] % 2) == flag) && (arr[i] <= min);

                if (isMatch)
                {
                    minIndex = i;
                    min = arr[i];
                }
            }

            return minIndex;
        }

        static string GetFirst(int[] arr, int count, byte flag)
        {
            char[] charsToTrim = { ',', ' ' };
            StringBuilder sb = new StringBuilder();

            int i = 0;

            while (i < arr.Length && count > 0)
            {
                if (Math.Abs(arr[i] % 2) == flag)
                {
                    sb.Append($"{arr[i]}, ");
                    count--;
                }

                i++;
            }

            return $"[{sb.ToString().TrimEnd(charsToTrim)}]";
        }

        static string GetLast(int[] arr, int count, byte flag)
        {
            char[] charsToTrim = { ',', ' ' };
            StringBuilder sb = new StringBuilder();

            int i = arr.Length - 1;

            while (i >= 0 && count > 0)
            {
                if (Math.Abs(arr[i] % 2) == flag)
                {
                    sb.Append($"{arr[i]}, ");
                    count--;
                }

                i--;
            }

            return $"[{sb.ToString().TrimEnd(charsToTrim)}]";
        }
    }
}
