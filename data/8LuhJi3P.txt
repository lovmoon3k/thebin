海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥搜索@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"gmtModified\":0,\"id\":0,\"last_chapter_rule\":\"\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"二级\",\"path\":\"erji\",\"rule\":\"js:\\nvar d = [];\\nfunction getIMG(url) {\\nif (/video_list/.test(url)) {\\nvar script = pdfh(fetchPC(url), \\\"body&&script,0&&Html\\\").replace('window.__NUXT__=', \\\"\\\").replace('data-v-98afda2c:0', 'go');\\n}else{\\n    var script = pdfh(fetchPC(url), \\\"body&&script,0&&Html\\\").replace('window.__NUXT__=', \\\"\\\").replace('data-v-7ca6f172:0', 'go');}\\n    var json = eval(script);\\n   var lists = json.fetch.go.list;\\n    var pics = [];\\n    for (let i of lists) {\\n        /http/.test(i.thumbnail) ? pics.push(i.thumbnail) : pics.push('https://www.dayi.org.cn' + i.thumbnail)\\n    }\\n    return pics;\\n}\\ntry{\\nif (/##/.test(MY_URL)) {\\n    var url = MY_URL.split('##')[0];\\n} else {\\n    var url = MY_URL.split('jkf=')[1];\\n}\\nif (MY_PAGE == 1) {\\n    pdfa(fetchPC(url), \\\".department-container&&a\\\").forEach(j => {\\n        d.push({\\n            title: pdfh(j, \\\"a&&Text\\\"),\\n            url: 'hiker://page/erji?url=' + pd(j, \\\"a&&href\\\") + '##fypage',\\n            col_type: \\\"scroll_button\\\"\\n        })\\n    })\\n}\\nif (/video_list/.test(MY_URL)) {\\n    if (url.lastIndexOf('video_list') == url.length - 10) {\\n        url = url + '/70/' + MY_PAGE;\\n    } else {\\n        url = url + '/' + MY_PAGE;\\n    }\\n    var lazy = `@lazyRule=js:var video=pd(fetchPC(input),\\\"video&&src\\\");video`;\\nvar pic=getIMG(url);\\n    pdfa(fetchPC(url), \\\".list-container&&.public-node\\\").forEach((j,i) => {\\n        d.push({\\n            title: pdfh(j, \\\".node-name&&Text\\\"),\\n            url: pd(j, \\\".node-name&&a&&href\\\") + lazy,\\npic:pic[i],\\n            desc: pdfh(j, \\\".node-main-content&&Text\\\"),\\n            col_type: \\\"movie_1\\\"\\n        })\\n    })\\n} else if (/list\\\\/\\\\d+/.test(MY_URL)) {\\n    url = url + '/' + MY_PAGE;\\n    var pics = getIMG(url);\\n    var list = pdfa(fetchPC(url), \\\".list-container&&.public-node\\\");\\n    for (var i = 0; i < list.length; i++) {\\n        d.push({\\n            title: pdfh(list[i], \\\".node-name&&Text\\\"),\\n            url: 'x5://' + pd(list[i], \\\".node-name&&a&&href\\\"),\\n            pic: pics[i] + '@Referer=',\\n            desc: pdfh(list[i], \\\".node-main-content||.intro&&Text\\\"),\\n            col_type: \\\"movie_1\\\"\\n        })\\n    }\\n}else if(/search/.test(MY_URL)){\\nvar html=JSON.parse(fetchPC(url)).list;\\nhtml.forEach(j=>{\\nif(!j.auditDoctor){\\nif(!j.thumbnail){\\nvar pic=\\\"https://proxy.pixivel.moe/c/540x540_70/img-master/img/2022/12/31/00/05/28/104058960_p0_master1200.jpg\\\";\\n}else if(/[}{\\\\[\\\\]]/.test(j.thumbnail)){\\nvar pic=j.thumbnail.match(/https.*\\\\.jpg/)[0];\\n}else{\\nvar pic=j.thumbnail;\\n}\\nif(/中成药/.test(j.secondTitle)){\\nvar url=\\\"https://www.dayi.org.cn/drug/\\\"\\n}else if(/疾病/.test(j.secondTitle)){\\nvar url=\\\"https://www.dayi.org.cn/disease/\\\"\\n}else if(/中药材/.test(j.secondTitle)){\\nvar url=\\\"https://www.dayi.org.cn/cmedical/\\\"\\n}else if(/方剂/.test(j.secondTitle)){\\nvar url=\\\"https://www.dayi.org.cn/prescriptions/\\\"\\n}\\nvar lazy = $().lazyRule((id,url)=>{\\nreturn url+id;\\n},j.id,url);\\nd.push({\\ntitle:'““””'+j.title,\\ndesc:j.secondTitle,\\npic:pic,\\nurl:lazy,\\ncol_type:\\\"movie_1\\\"\\n},{\\ntitle:j.introduction,\\ncol_type:\\\"long_text\\\"\\n},{\\ncol_type:\\\"line_blank\\\"\\n},{\\ncol_type:\\\"line_blank\\\"\\n},{\\ncol_type:\\\"line_blank\\\"\\n})\\n}else{\\nif(/视频/.test(j.secondTitle)){\\nvar lazy = $().lazyRule((id)=>{var video=pd(fetchPC(\\\"https://www.dayi.org.cn/qa/\\\"+id),\\\"video&&src\\\");return video;},j.id);\\n}else{\\nvar lazy = $().lazyRule(()=>{return \\\"toast://😅好吧，我也不知道发生甚么事了\\\"});\\n}\\nd.push({\\ntitle:j.auditDoctor.clinicProfessional+':'+j.auditDoctor.name+'\\\\n'+j.auditDoctor.departmentName,\\ndesc:'““””'+j.title+'-'+j.secondTitle,\\npic:j.auditDoctor.thumbnail,\\nurl:lazy,\\ncol_type:\\\"movie_1\\\"\\n},{\\ntitle:j.introduction,\\ncol_type:\\\"long_text\\\"\\n},{\\ncol_type:\\\"line_blank\\\"\\n},{\\ncol_type:\\\"line_blank\\\"\\n},{\\ncol_type:\\\"line_blank\\\"\\n})}\\n})\\n}else {\\n    var html = pdfh(fetchPC(url), \\\".detail-container&&Html\\\")\\n    d.push({\\n        title: html,\\n        col_type: \\\"rich_text\\\"\\n    })\\n}}catch(e){toast(\\\"😅完蛋没得玩了\\\")}\\nsetResult(d);\"}],\"params\":\"{\\\"defaultValue\\\":\\\"\\\",\\\"onChange\\\":\\\"putMyVar('txt',input)\\\"}\",\"saved\":false,\"title\":\"中国医药信息\",\"version\":0,\"url\":\"hiker://page/erji?jkf=https://api2.dayi.org.cn/api/search2?pageNo=fypage&pageSize=10&keyword=腹部有下坠感\",\"col_type\":\"movie_3\",\"find_rule\":\"js:\\nvar d = [];\\nfunction getIMG(url) {\\nif (/video_list/.test(url)) {\\nvar script = pdfh(fetchPC(url), \\\"body&&script,0&&Html\\\").replace('window.__NUXT__=', \\\"\\\").replace('data-v-98afda2c:0', 'go');\\n}else{\\n    var script = pdfh(fetchPC(url), \\\"body&&script,0&&Html\\\").replace('window.__NUXT__=', \\\"\\\").replace('data-v-7ca6f172:0', 'go');}\\n    var json = eval(script);\\n   var lists = json.fetch.go.list;\\n    var pics = [];\\n    for (let i of lists) {\\n        /http/.test(i.thumbnail) ? pics.push(i.thumbnail) : pics.push('https://www.dayi.org.cn' + i.thumbnail)\\n    }\\n    return pics;\\n}\\ntry{\\nif (/##/.test(MY_URL)) {\\n    var url = MY_URL.split('##')[0];\\n} else {\\n    var url = MY_URL.split('jkf=')[1];\\n}\\nif (MY_PAGE == 1) {\\n    pdfa(fetchPC(url), \\\".department-container&&a\\\").forEach(j => {\\n        d.push({\\n            title: pdfh(j, \\\"a&&Text\\\"),\\n            url: 'hiker://page/erji?url=' + pd(j, \\\"a&&href\\\") + '##fypage',\\n            col_type: \\\"scroll_button\\\"\\n        })\\n    })\\n}\\nif (/video_list/.test(MY_URL)) {\\n    if (url.lastIndexOf('video_list') == url.length - 10) {\\n        url = url + '/70/' + MY_PAGE;\\n    } else {\\n        url = url + '/' + MY_PAGE;\\n    }\\n    var lazy = `@lazyRule=js:var video=pd(fetchPC(input),\\\"video&&src\\\");video`;\\nvar pic=getIMG(url);\\n    pdfa(fetchPC(url), \\\".list-container&&.public-node\\\").forEach((j,i) => {\\n        d.push({\\n            title: pdfh(j, \\\".node-name&&Text\\\"),\\n            url: pd(j, \\\".node-name&&a&&href\\\") + lazy,\\npic:pic[i],\\n            desc: pdfh(j, \\\".node-main-content&&Text\\\"),\\n            col_type: \\\"movie_1\\\"\\n        })\\n    })\\n} else if (/list\\\\/\\\\d+/.test(MY_URL)) {\\n    url = url + '/' + MY_PAGE;\\n    var pics = getIMG(url);\\n    var list = pdfa(fetchPC(url), \\\".list-container&&.public-node\\\");\\n    for (var i = 0; i < list.length; i++) {\\n        d.push({\\n            title: pdfh(list[i], \\\".node-name&&Text\\\"),\\n            url: 'x5://' + pd(list[i], \\\".node-name&&a&&href\\\"),\\n            pic: pics[i] + '@Referer=',\\n            desc: pdfh(list[i], \\\".node-main-content||.intro&&Text\\\"),\\n            col_type: \\\"movie_1\\\"\\n        })\\n    }\\n}else if(/search/.test(MY_URL)){\\nvar html=JSON.parse(fetchPC(url)).list;\\nhtml.forEach(j=>{\\nif(!j.auditDoctor){\\nif(!j.thumbnail){\\nvar pic=\\\"https://proxy.pixivel.moe/c/540x540_70/img-master/img/2022/12/31/00/05/28/104058960_p0_master1200.jpg\\\";\\n}else if(/[}{\\\\[\\\\]]/.test(j.thumbnail)){\\nvar pic=j.thumbnail.match(/https.*\\\\.jpg/)[0];\\n}else{\\nvar pic=j.thumbnail;\\n}\\nif(/中成药/.test(j.secondTitle)){\\nvar url=\\\"https://www.dayi.org.cn/drug/\\\"\\n}else if(/疾病/.test(j.secondTitle)){\\nvar url=\\\"https://www.dayi.org.cn/disease/\\\"\\n}else if(/中药材/.test(j.secondTitle)){\\nvar url=\\\"https://www.dayi.org.cn/cmedical/\\\"\\n}else if(/方剂/.test(j.secondTitle)){\\nvar url=\\\"https://www.dayi.org.cn/prescriptions/\\\"\\n}\\nvar lazy = $().lazyRule((id,url)=>{\\nreturn url+id;\\n},j.id,url);\\nd.push({\\ntitle:'““””'+j.title,\\ndesc:j.secondTitle,\\npic:pic,\\nurl:lazy,\\ncol_type:\\\"movie_1\\\"\\n},{\\ntitle:j.introduction,\\ncol_type:\\\"long_text\\\"\\n},{\\ncol_type:\\\"line_blank\\\"\\n},{\\ncol_type:\\\"line_blank\\\"\\n},{\\ncol_type:\\\"line_blank\\\"\\n})\\n}else{\\nif(/视频/.test(j.secondTitle)){\\nvar lazy = $().lazyRule((id)=>{var video=pd(fetchPC(\\\"https://www.dayi.org.cn/qa/\\\"+id),\\\"video&&src\\\");return video;},j.id);\\n}else{\\nvar lazy = $().lazyRule(()=>{return \\\"toast://😅好吧，我也不知道发生甚么事了\\\"});\\n}\\nd.push({\\ntitle:j.auditDoctor.clinicProfessional+':'+j.auditDoctor.name+'\\\\n'+j.auditDoctor.departmentName,\\ndesc:'““””'+j.title+'-'+j.secondTitle,\\npic:j.auditDoctor.thumbnail,\\nurl:lazy,\\ncol_type:\\\"movie_1\\\"\\n},{\\ntitle:j.introduction,\\ncol_type:\\\"long_text\\\"\\n},{\\ncol_type:\\\"line_blank\\\"\\n},{\\ncol_type:\\\"line_blank\\\"\\n},{\\ncol_type:\\\"line_blank\\\"\\n})}\\n})\\n}else {\\n    var html = pdfh(fetchPC(url), \\\".detail-container&&Html\\\")\\n    d.push({\\n        title: html,\\n        col_type: \\\"rich_text\\\"\\n    })\\n}}catch(e){toast(\\\"😅完蛋没得玩了\\\")}\\nsetResult(d);\",\"group\":\"其它\",\"ua\":\"pc\",\"preRule\":\"\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"二级\\\",\\\"path\\\":\\\"erji\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nfunction getIMG(url) {\\\\nif (/video_list/.test(url)) {\\\\nvar script = pdfh(fetchPC(url), \\\\\\\"body&&script,0&&Html\\\\\\\").replace('window.__NUXT__=', \\\\\\\"\\\\\\\").replace('data-v-98afda2c:0', 'go');\\\\n}else{\\\\n    var script = pdfh(fetchPC(url), \\\\\\\"body&&script,0&&Html\\\\\\\").replace('window.__NUXT__=', \\\\\\\"\\\\\\\").replace('data-v-7ca6f172:0', 'go');}\\\\n    var json = eval(script);\\\\n   var lists = json.fetch.go.list;\\\\n    var pics = [];\\\\n    for (let i of lists) {\\\\n        /http/.test(i.thumbnail) ? pics.push(i.thumbnail) : pics.push('https://www.dayi.org.cn' + i.thumbnail)\\\\n    }\\\\n    return pics;\\\\n}\\\\ntry{\\\\nif (/##/.test(MY_URL)) {\\\\n    var url = MY_URL.split('##')[0];\\\\n} else {\\\\n    var url = MY_URL.split('jkf=')[1];\\\\n}\\\\nif (MY_PAGE == 1) {\\\\n    pdfa(fetchPC(url), \\\\\\\".department-container&&a\\\\\\\").forEach(j => {\\\\n        d.push({\\\\n            title: pdfh(j, \\\\\\\"a&&Text\\\\\\\"),\\\\n            url: 'hiker://page/erji?url=' + pd(j, \\\\\\\"a&&href\\\\\\\") + '##fypage',\\\\n            col_type: \\\\\\\"scroll_button\\\\\\\"\\\\n        })\\\\n    })\\\\n}\\\\nif (/video_list/.test(MY_URL)) {\\\\n    if (url.lastIndexOf('video_list') == url.length - 10) {\\\\n        url = url + '/70/' + MY_PAGE;\\\\n    } else {\\\\n        url = url + '/' + MY_PAGE;\\\\n    }\\\\n    var lazy = `@lazyRule=js:var video=pd(fetchPC(input),\\\\\\\"video&&src\\\\\\\");video`;\\\\nvar pic=getIMG(url);\\\\n    pdfa(fetchPC(url), \\\\\\\".list-container&&.public-node\\\\\\\").forEach((j,i) => {\\\\n        d.push({\\\\n            title: pdfh(j, \\\\\\\".node-name&&Text\\\\\\\"),\\\\n            url: pd(j, \\\\\\\".node-name&&a&&href\\\\\\\") + lazy,\\\\npic:pic[i],\\\\n            desc: pdfh(j, \\\\\\\".node-main-content&&Text\\\\\\\"),\\\\n            col_type: \\\\\\\"movie_1\\\\\\\"\\\\n        })\\\\n    })\\\\n} else if (/list\\\\\\\\/\\\\\\\\d+/.test(MY_URL)) {\\\\n    url = url + '/' + MY_PAGE;\\\\n    var pics = getIMG(url);\\\\n    var list = pdfa(fetchPC(url), \\\\\\\".list-container&&.public-node\\\\\\\");\\\\n    for (var i = 0; i < list.length; i++) {\\\\n        d.push({\\\\n            title: pdfh(list[i], \\\\\\\".node-name&&Text\\\\\\\"),\\\\n            url: 'x5://' + pd(list[i], \\\\\\\".node-name&&a&&href\\\\\\\"),\\\\n            pic: pics[i] + '@Referer=',\\\\n            desc: pdfh(list[i], \\\\\\\".node-main-content||.intro&&Text\\\\\\\"),\\\\n            col_type: \\\\\\\"movie_1\\\\\\\"\\\\n        })\\\\n    }\\\\n}else if(/search/.test(MY_URL)){\\\\nvar html=JSON.parse(fetchPC(url)).list;\\\\nhtml.forEach(j=>{\\\\nif(!j.auditDoctor){\\\\nif(!j.thumbnail){\\\\nvar pic=\\\\\\\"https://proxy.pixivel.moe/c/540x540_70/img-master/img/2022/12/31/00/05/28/104058960_p0_master1200.jpg\\\\\\\";\\\\n}else if(/[}{\\\\\\\\[\\\\\\\\]]/.test(j.thumbnail)){\\\\nvar pic=j.thumbnail.match(/https.*\\\\\\\\.jpg/)[0];\\\\n}else{\\\\nvar pic=j.thumbnail;\\\\n}\\\\nif(/中成药/.test(j.secondTitle)){\\\\nvar url=\\\\\\\"https://www.dayi.org.cn/drug/\\\\\\\"\\\\n}else if(/疾病/.test(j.secondTitle)){\\\\nvar url=\\\\\\\"https://www.dayi.org.cn/disease/\\\\\\\"\\\\n}else if(/中药材/.test(j.secondTitle)){\\\\nvar url=\\\\\\\"https://www.dayi.org.cn/cmedical/\\\\\\\"\\\\n}else if(/方剂/.test(j.secondTitle)){\\\\nvar url=\\\\\\\"https://www.dayi.org.cn/prescriptions/\\\\\\\"\\\\n}\\\\nvar lazy = $().lazyRule((id,url)=>{\\\\nreturn url+id;\\\\n},j.id,url);\\\\nd.push({\\\\ntitle:'““””'+j.title,\\\\ndesc:j.secondTitle,\\\\npic:pic,\\\\nurl:lazy,\\\\ncol_type:\\\\\\\"movie_1\\\\\\\"\\\\n},{\\\\ntitle:j.introduction,\\\\ncol_type:\\\\\\\"long_text\\\\\\\"\\\\n},{\\\\ncol_type:\\\\\\\"line_blank\\\\\\\"\\\\n},{\\\\ncol_type:\\\\\\\"line_blank\\\\\\\"\\\\n},{\\\\ncol_type:\\\\\\\"line_blank\\\\\\\"\\\\n})\\\\n}else{\\\\nif(/视频/.test(j.secondTitle)){\\\\nvar lazy = $().lazyRule((id)=>{var video=pd(fetchPC(\\\\\\\"https://www.dayi.org.cn/qa/\\\\\\\"+id),\\\\\\\"video&&src\\\\\\\");return video;},j.id);\\\\n}else{\\\\nvar lazy = $().lazyRule(()=>{return \\\\\\\"toast://😅好吧，我也不知道发生甚么事了\\\\\\\"});\\\\n}\\\\nd.push({\\\\ntitle:j.auditDoctor.clinicProfessional+':'+j.auditDoctor.name+'\\\\\\\\n'+j.auditDoctor.departmentName,\\\\ndesc:'““””'+j.title+'-'+j.secondTitle,\\\\npic:j.auditDoctor.thumbnail,\\\\nurl:lazy,\\\\ncol_type:\\\\\\\"movie_1\\\\\\\"\\\\n},{\\\\ntitle:j.introduction,\\\\ncol_type:\\\\\\\"long_text\\\\\\\"\\\\n},{\\\\ncol_type:\\\\\\\"line_blank\\\\\\\"\\\\n},{\\\\ncol_type:\\\\\\\"line_blank\\\\\\\"\\\\n},{\\\\ncol_type:\\\\\\\"line_blank\\\\\\\"\\\\n})}\\\\n})\\\\n}else {\\\\n    var html = pdfh(fetchPC(url), \\\\\\\".detail-container&&Html\\\\\\\")\\\\n    d.push({\\\\n        title: html,\\\\n        col_type: \\\\\\\"rich_text\\\\\\\"\\\\n    })\\\\n}}catch(e){toast(\\\\\\\"😅完蛋没得玩了\\\\\\\")}\\\\nsetResult(d);\\\"}]\",\"proxy\":\"\"}","title":"搜索"}