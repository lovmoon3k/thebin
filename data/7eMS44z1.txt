import java.util.Scanner;

public class Feeld {
    private static Scanner scan = new Scanner(System.in);

    public static void main(String[] args) {

        String[] input = scan.nextLine().split(" ");
        int n = Integer.parseInt(input[0]);
        int m = Integer.parseInt(input[1]);

        int[][] matrix = new int[n][m];
        fillMatrix(matrix);

        int[] start = new int[2];
        int max = 0;

        while (start[0] > -1) {
            target = matrix[start[0]][start[1]];           //current symbol to find neighbors of
            int result = solveMaze(matrix, start[0], start[1]);
            if (max < result) {
                max = result;
            }

            findStart(matrix, start);
            area = 0;                     // numbor of neighbors
        }
        System.out.println(max);
    }

    private static int target = 0;

    private static int area = 0;

    private static int solveMaze(int[][] matrix, int x, int y) {
        if (outOfBounds(matrix, x, y) || visited(matrix, x, y)) {
            return 0;
        }
        if (matrix[x][y] != -1) {
            area++;
        }
        matrix[x][y] = -1;
        solveMaze(matrix, x, y + 1);
        solveMaze(matrix, x + 1, y);
        solveMaze(matrix, x, y - 1);
        solveMaze(matrix, x - 1, y);
        return area;
    }


    private static void findStart(int[][] matrix, int[] start) {
        for (int i = 0; i < matrix.length; i++) {
            for (int j = 0; j < matrix[i].length; j++) {
                if (matrix[i][j] != -1) {
                    start[0] = i;
                    start[1] = j;
                    return;
                }
            }
        }
        start[0] = -1;
    }

    private static boolean outOfBounds(int[][] matrix, int x, int y) {
        return x == matrix.length
                || x < 0
                || y == matrix[0].length
                || y < 0;
    }

    private static boolean visited(int[][] maze, int row, int col) {
        return maze[row][col] == -1 || maze[row][col] != target;
    }

    private static void fillMatrix(int[][] matrix) {
        for (int i = 0; i < matrix.length; i++) {
            String[] input = scan.nextLine().split(" ");
            for (int j = 0; j < matrix[0].length; j++) {
                matrix[i][j] = Integer.parseInt(input[j]);
            }
        }
    }

}
