// clang-format off
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <stack>
#include <iomanip>
#include <fstream>
#include <string>
#include <set>
#include <deque>
#include <queue>
#include <map>
#include <bitset>
#include <random>
#include <list>
#include <unordered_map>
#include <unordered_set>
#include <cassert>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef string str;
//typedef __int128 ultraint;
#define sqrt sqrtl
#define F first
#define S second
#define endl '\n'
#define all(vc666) vc666.begin(), vc666.end()
#define allr(vc666) vc666.rbegin(), vc666.rend()
#define int long long
#define degug(x) cerr (#x) << " " << (x) << endl;

const ll INF = (ll)1e18 + 7;
const ll inf = 1e10 + 7;
const ll ONE = 1;
const ll MOD = 16714589;
const ll max_sz = 1e5 + 1;
ld EPS = 1e-6;
ld PI = 3.1415926535897932384;
mt19937_64 gen(3);

struct Point {
    ld x, y;
    Point() : x(0), y(0) {}
    Point(ld _x, ld _y) : x(_x), y(_y) {}

    Point operator+(const Point& other) const {
        return Point(x + other.x, y + other.y);
    }
    Point operator-(const Point& other) const {
        return Point(x - other.x, y - other.y);
    }
    Point operator*(const ld k) const {
        return Point(x * k, y * k);
    }
    ld operator*(const Point& other) const {
        return x * other.x + y * other.y;
    }
    ld operator%(const Point& other) const {
        return x * other.y - y * other.x;
    }
    ld lenSqr() const {
        return x * x + y * y;
    }
    ld len() const {
        return sqrt(lenSqr());
    }
    Point ort() const {
        return Point(-y, x);
    }
};

bool is_point_on_line(const Point &a, const Point &b, const Point &c) {
    Point ab = b - a;
    Point ac = c - a;
    return ab % ac == 0;
}

bool is_point_on_ray(const Point& a, const Point& b, const Point& c) {
    if (is_point_on_line(a, b, c)) {
        Point ab = b - a;
        Point ac = c - a;
        if ((ab * ac) >= 0) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
}

bool is_point_on_segment(const Point& a, const Point& b, const Point& c) {
    return is_point_on_ray(a, b, c) && is_point_on_ray(b, a, c);
}

bool is_point_in_angle(Point a, Point o, Point b, Point p) {
    a = a - o;
    b = b - o;
    p = p - o;
    if ((b % a) >= 0) {
        if ((a % p) <= 0 && (b % p) >= 0) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        if ((a % p) >= 0 && (b % p) <= 0) {
            return true;
        }
        else {
            return false;
        }
    }
}

signed main() {
#ifdef _DEBUG 
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    //cin >> t;
    while (t--) {
        Point a, o, b, p;
        cin >> a.x >> a.y;
        cin >> o.x >> o.y;
        cin >> b.x >> b.y;
        cin >> p.x >> p.y;
        if (is_point_in_angle(a, o, b, p)) {
            cout << "YES" << endl;
        }
        else {
            cout << "NO" << endl;
        }
    }
}
//Deisgned by skimono