package reghzy.api.utils;

import gnu.trove.list.linked.TDoubleLinkedList;
import gnu.trove.list.linked.TFloatLinkedList;
import gnu.trove.list.linked.TIntLinkedList;
import gnu.trove.list.linked.TLongLinkedList;
import reghzy.api.utils.function.ExceptionalFunction;
import reghzy.api.utils.function.ExceptionalSupplier;

import java.util.LinkedList;
import java.util.Optional;

/**
 * A parser which works with {@link Parsing} to ensure chain-parsed values are cleaned up afterwards
 * <p>
 *     Instances of this class must call {@link Parser#close()} when they are no longer needed
 * </p>
 * @author REghZy
 */
public final class Parser implements AutoCloseable {
    private TFloatLinkedList qF;
    private TDoubleLinkedList qD;
    private TIntLinkedList qI;
    private TLongLinkedList qL;
    private LinkedList<Object> qO;

    public Parser() {
    }

    public static Parser of() {
        return Parsing.newParser();
    }

    public TFloatLinkedList getQF() {
        return this.qF != null ? this.qF : (this.qF = new TFloatLinkedList(0f));
    }

    public TDoubleLinkedList getQD() {
        return this.qD != null ? this.qD : (this.qD = new TDoubleLinkedList(0d));
    }

    public TIntLinkedList getQI() {
        return this.qI != null ? this.qI : (this.qI = new TIntLinkedList(0));
    }

    public TLongLinkedList getQL() {
        return this.qL != null ? this.qL : (this.qL = new TLongLinkedList(0L));
    }

    public LinkedList<Object> getQO() {
        return this.qO != null ? this.qO : (this.qO = new LinkedList<Object>());
    }

    private boolean pushInt(boolean parseSuccess) {
        if (parseSuccess)
            getQI().add(Parsing.getLastInt());
        return parseSuccess;
    }

    private boolean pushLong(boolean parseSuccess) {
        if (parseSuccess)
            getQL().add(Parsing.getLastInt());
        return parseSuccess;
    }

    private boolean pushFloat(boolean parseSuccess) {
        if (parseSuccess)
            getQF().add(Parsing.getLastInt());
        return parseSuccess;
    }

    private boolean pushDouble(boolean parseSuccess) {
        if (parseSuccess)
            getQD().add(Parsing.getLastInt());
        return parseSuccess;
    }

    private boolean pushObject(boolean parseSuccess) {
        if (parseSuccess)
            getQO().add(Parsing.getLastInt());
        return parseSuccess;
    }

    public boolean parseInt(CharSequence value) {
        return pushInt(Parsing.parseInt(value));
    }

    public boolean parseInt(CharSequence value, int startIndex) {
        return pushInt(Parsing.parseInt(value, startIndex));
    }

    public boolean parseInt(CharSequence value, int startIndex, int endIndex) {
        return pushInt(Parsing.parseInt(value, startIndex, endIndex));
    }

    public boolean parseInt(char[] chars) {
        return pushInt(Parsing.parseInt(chars));
    }

    public boolean parseInt(char[] chars, int startIndex) {
        return pushInt(Parsing.parseInt(chars, startIndex));
    }

    public boolean parseInt(char[] chars, int startIndex, int endIndex) {
        return pushInt(Parsing.parseInt(chars, startIndex, endIndex));
    }

    public boolean parseIntWR(CharSequence value, int radix) {
        return pushInt(Parsing.parseIntWR(value, radix));
    }

    public boolean parseIntWR(CharSequence value, int startIndex, int radix) {
        return pushInt(Parsing.parseIntWR(value, startIndex, radix));
    }

    public boolean parseIntWR(CharSequence value, int startIndex, int endIndex, int radix) {
        return pushInt(Parsing.parseIntWR(value, startIndex, endIndex, radix));
    }

    public boolean parseIntWR(char[] chars, int radix) {
        return pushInt(Parsing.parseIntWR(chars, radix));
    }

    public boolean parseIntWR(char[] chars, int startIndex, int radix) {
        return pushInt(Parsing.parseIntWR(chars, startIndex, radix));
    }

    public boolean parseIntWR(char[] chars, int startIndex, int endIndex, int radix) {
        return pushInt(Parsing.parseIntWR(chars, startIndex, endIndex, radix));
    }

    public boolean parseLong(Object object) {
        return pushLong(Parsing.parseLong(object));
    }

    public boolean parseLong(CharSequence value) {
        return pushLong(Parsing.parseLong(value));
    }

    public boolean parseLong(CharSequence value, int startIndex) {
        return pushLong(Parsing.parseLong(value, startIndex));
    }

    public boolean parseLong(CharSequence value, int startIndex, int endIndex) {
        return pushLong(Parsing.parseLong(value, startIndex, endIndex));
    }

    public boolean parseLong(char[] chars) {
        return pushLong(Parsing.parseLong(chars));
    }

    public boolean parseLong(char[] chars, int startIndex) {
        return pushLong(Parsing.parseLong(chars, startIndex));
    }

    public boolean parseLong(char[] chars, int startIndex, int endIndex) {
        return pushLong(Parsing.parseLong(chars, startIndex, endIndex));
    }

    public boolean parseLongWR(CharSequence value, int radix) {
        return pushLong(Parsing.parseLongWR(value, radix));
    }

    public boolean parseLongWR(CharSequence value, int startIndex, int radix) {
        return pushLong(Parsing.parseLongWR(value, startIndex, radix));
    }

    public boolean parseLongWR(CharSequence value, int startIndex, int endIndex, int radix) {
        return pushLong(Parsing.parseLongWR(value, startIndex, endIndex, radix));
    }

    public boolean parseLongWR(char[] chars, int radix) {
        return pushLong(Parsing.parseLongWR(chars, radix));
    }

    public boolean parseLongWR(char[] chars, int startIndex, int radix) {
        return pushLong(Parsing.parseLongWR(chars, startIndex, radix));
    }

    public boolean parseLongWR(char[] chars, int startIndex, int endIndex, int radix) {
        return pushLong(Parsing.parseLongWR(chars, startIndex, endIndex, radix));
    }

    public boolean parseFloat(Object object) {
        return pushFloat(Parsing.parseFloat(object));
    }

    public boolean parseFloat(CharSequence value) {
        return pushFloat(Parsing.parseFloat(value));
    }

    public boolean parseFloat(CharSequence value, int startIndex) {
        return pushFloat(Parsing.parseFloat(value, startIndex));
    }

    public boolean parseFloat(CharSequence value, int startIndex, int endIndex) {
        return pushFloat(Parsing.parseFloat(value, startIndex, endIndex));
    }

    public boolean parseDouble(Object object) {
        return pushDouble(Parsing.parseDouble(object));
    }

    public boolean parseDouble(CharSequence value, int startIndex) {
        return pushDouble(Parsing.parseDouble(value, startIndex));
    }

    public boolean parseDouble(CharSequence value, int startIndex, int endIndex) {
        return pushDouble(Parsing.parseDouble(value, startIndex, endIndex));
    }

    public boolean parseDouble(CharSequence value) {
        return pushDouble(Parsing.parseDouble(value));
    }

    public <T> boolean parse(ExceptionalSupplier<T> provider) {
        return pushObject(Parsing.parse(provider));
    }

    public <T, TParam> boolean parse(TParam parameter, ExceptionalFunction<TParam, T> supplier) {
        return pushObject(Parsing.parse(parameter, supplier));
    }

    public <T> boolean parse(String value, ExceptionalFunction<String, T> supplier) {
        return pushObject(Parsing.parse(value, supplier));
    }

    public <T> boolean parseOptional(String value, ExceptionalFunction<String, Optional<T>> supplier) {
        return pushObject(Parsing.parseOptional(value, supplier));
    }

    /**
     * Pops the first element from the float queue
     */
    public float getFloat() {
        return this.qF.removeAt(0);
    }

    /**
     * Pops the first element from the double queue
     */
    public double getDouble() {
        return this.qD.removeAt(0);
    }

    /**
     * Pops the first element from the int queue
     */
    public int getInt() {
        return this.qI.removeAt(0);
    }

    /**
     * Pops the first element from the long queue
     */
    public long getLong() {
        return this.qL.removeAt(0);
    }

    @SuppressWarnings("unchecked")
    public <T> T getObject() {
        return (T) this.qO.removeLast();
    }


    /**
     * Pops the first element from the float queue
     */
    public float getFloat(int forward_offset) {
        return this.qF.removeAt(forward_offset);
    }

    /**
     * Pops the first element from the double queue
     */
    public double getDouble(int forward_offset) {
        return this.qD.removeAt(forward_offset);
    }

    /**
     * Pops the first element from the int queue
     */
    public int getInt(int forward_offset) {
        return this.qI.removeAt(forward_offset);
    }

    /**
     * Pops the first element from the long queue
     */
    public long getLong(int forward_offset) {
        return this.qL.removeAt(forward_offset);
    }

    @SuppressWarnings("unchecked")
    public <T> T getObject(int forward_offset) {
        return (T) (forward_offset == 0 ? this.qO.removeFirst() : this.qO.remove(forward_offset));
    }


    /**
     * Pops the last element from the float queue
     */
    public float getLastFloat() {
        return this.qF.removeAt(this.qF.size() - 1);
    }

    /**
     * Pops the last element from the double queue
     */
    public double getLastDouble() {
        return this.qD.removeAt(this.qD.size() - 1);
    }

    /**
     * Pops the last element from the int queue
     */
    public int getLastInt() {
        return this.qI.removeAt(this.qI.size() - 1);
    }

    /**
     * Pops the last element from the long queue
     */
    public long getLastLong() {
        return this.qL.removeAt(this.qL.size() - 1);
    }

    /**
     * Pops the last element from the object queue
     */
    @SuppressWarnings("unchecked")
    public <T> T getLastObject() {
        return (T) this.qO.remove(this.qO.size() - 1);
    }

    /**
     * Pops the last element from the float queue
     */
    public float getLastFloat(int reverse_offset) {
        return this.qF.removeAt(this.qF.size() - 1 - reverse_offset);
    }

    /**
     * Pops the last element from the double queue
     */
    public double getLastDouble(int reverse_offset) {
        return this.qD.removeAt(this.qD.size() - 1 - reverse_offset);
    }

    /**
     * Pops the last element from the int queue
     */
    public int getLastInt(int reverse_offset) {
        return this.qI.removeAt(this.qI.size() - 1 - reverse_offset);
    }

    /**
     * Pops the last element from the long queue
     */
    public long getLastLong(int reverse_offset) {
        return this.qL.removeAt(this.qL.size() - 1 - reverse_offset);
    }

    /**
     * Pops the last element from the object queue
     */
    @SuppressWarnings("unchecked")
    public <T> T getLastObject(int reverse_offset) {
        return (T) this.qO.remove(this.qO.size() - 1 - reverse_offset);
    }

    @Override
    public final void close() {

    }
}
