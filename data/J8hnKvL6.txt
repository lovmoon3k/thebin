/*
 * Click `Run` to execute the snippet below!
 */

import java.io.*;
import java.util.*;

class Solution {
  
  private static class Node {
    String name;
    Set<Node> neighbors = new HashSet<>();
    
    public Node(String name, Node... neighbors) {
      this.name = name;
      this.neighbors.addAll(Arrays.asList(neighbors));
    }
    
    @Override
    public String toString() { return name; }
  }
  
  /*
   
   A -> B
    \     \
     \     -> D
      \     ^
        -> C 
   
   */
  public static void main(String[] args) {
    Node D = new Node("D");
    Node B = new Node("B", D);
    Node C = new Node("C", D);
    Node A = new Node("A", B, C);
    C.neighbors.add(A);

    Set<Node> allNodes = new HashSet<>(Arrays.asList(A, B, C, D));
    
    Set<Node> visitedNodes = new HashSet<>();
    List<Node> sortedNodes = new ArrayList<>();
    
    for (Node node : allNodes) {
      if (!visitedNodes.contains(node)) {
        Set<Node> pathNodes = new HashSet<>();
        dfs(node, visitedNodes, sortedNodes, pathNodes);
      }
    }
    Collections.reverse(sortedNodes);
    System.out.println(sortedNodes);
  }
  
  private static void dfs(Node node, Set<Node> visitedNodes, List<Node> sortedNodes, 
                          Set<Node> pathNodes) {
    pathNodes.add(node);
    for (Node neighbor : node.neighbors) {
      if (pathNodes.contains(neighbor)) {
        throw new RuntimeException("found a cycle!");
      }
      
      if (!visitedNodes.contains(neighbor)) {
        dfs(neighbor, visitedNodes, sortedNodes, pathNodes);
      }
    }
    visitedNodes.add(node);
    sortedNodes.add(node);
  }
    
}

