my $i = 9;
my $f = 3.4;
my $s = 'hey';
say($s);
print("\t", $i, "\t", $f);
my ($a, $b) = (4 , 5);

# words(); and qw<>; is the same as just <>
# %(); is the same as {};

# to stringize an identifier you do:

my $var1 = 789;
my $var2 = "\$var1";
# you can even do: my $var3 = "\$var3";

# almost any non-word character can replace # < or >;
my $sss = q|str1 str2 str3|;
print($sss);

state $I = 0;
#if used in a function, it retains #its value per function call. (kinda like the #static keyword in  C).

my $sz = 6;
my @arr[$sz];
@arr[$sz-6] = 11;
@arr[$sz-5] = 22;
@arr[$sz-4] = 33;
@arr[$sz-3] = 44;
@arr[$sz-2] = 55;
@arr[$sz-1] = 66;
my $VAR1 = 789;
my $VAR2 = "$VAR1";
my $VAR3 = "\$VAR3";
print($VAR1, "\n");
print($VAR2, "\n");
print($VAR3, "\n");
print($sz, "\n");
print(@arr[], "\n");
print(@arr[$sz/2], "\n");
print(@arr[$sz=0+2], "\n");

my $S1 = "a";
for 0 .. 5 {print($S1++ ~ $S1++ ~ $S1++, "\n");}
my $S2 = "ak";
for 0 .. 5 {print($S2++ ~ $S2++ ~ $S2++, "\n");}

my @list = 'x', 'y';
@list=Nil; #all elements are now Nil

# print(@list[0], "\n");
# worked because it returned
# error: uninitialized object
# print(@list[1], "\n");
# worked because it returned
# error: uninitialized object

my $i = 77; # declare variable $i and give it the value: 77
print($i, "\n"); # print 77 and a newline
$i = my $p = 99; # declares variable $p and sets its value to 99
my $pp = 99; $i = $pp; # same as above
print($i, "\n", $p, "\n"); # print $i , $p and a newline
$p = 22; # change value of $p
print($i, "\n"); # $i is still the same because $p's value was copied
$i := $p;# bind $p and $i / $i and $p
print($i, "\n"); # $p and $i now reflect their changes bi-directionally, you cannot unbind two scalars however
my $numlist = (6, 5, 7, 2, 8); # create a list of 5 numbers
print($numlist, "\n"); # print entire list $numlist
print($numlist[1], "\n"); # print just the second element of list $numlist
print($numlist[0, 2, 4], "\n"); # print the 1st, 3rd & 5th element of list $numlist
print($numlist[0 .. 3], "\n"); # print the 1st, 2nd. 3rd & 4th element of list $numlist
my $numlist2D = (1, 3, 5;2, 4, 6); # create a 2 dimensional list of 3 elements each
print($numlist2D, "\n"); # print entire numlist2D
print($numlist2D[1][1], "\n"); # print 2nd element of 2nd dimension of numlist2D
print($numlist2D[1][], "\n"); # print entire 2nd dimension of numlist2D
print($numlist2D[][1], "\n"); # same as above
print($numlist2D[1;2], "\n"); # equivalent to doing [1][2]
my $x = <a b c>; # < > lets you not need to specify commas or "" or ''. if you do,
# they will literally be in the string.
# however, unlike ' ' , < > treats space as the element separator
# where as a space inside of ' ' or " " is still just part of the string
print($x[0], "\n"); # prints a followed by a newline
print($x[1], "\n"); # prints b followed by a newline
print($x[2], "\n"); # prints c followed by a newline
my $str = "'a' ' ' 'b'"; # as said above this will not work the same as < >
# note that <> is just shorthand for qw<>
print($str[0], "\n"); # prints "'a' ' ' 'b' followed by a newline"
# print($str[1], "\n"); # $str[1] uninitialized and out of range
# print($str[2], "\n"); # $str[1] uninitialized and out of range
my $str2 = ("'a'","' '","'b'"); # mixing it all up
print($str2[0], "\n"); # prints 'a' followed by  a newline
print($str2[1], "\n"); # prints 'b' followed by  a newline
print($str2[2], "\n"); # prints 'c' followed by  a newline
# this would work however, but if you don't want it to print the ' '  you would need to remove them.
my $z = 'c'; # declaring variable $z and setting its value to c ( is the invisible 'null termination' character)
my $str3 = ('a',"$z",'b'); # this is also possible, mixing '' and "" with string interpolation (of $z)
my @array = ('a','b','c'); #declaring an array called @array and declaring 3 elements with values 'a' 'b' and 'c'
print(@array[0], "\n"); # prints a followed by a newline
print(@array[1], "\n"); # prints b followed by a newline
print(@array[2], "\n"); # prints c followed by a newline
my @array2 = <a b c>; # again using < > but on an array.
print(@array2[0], "\n"); # prints a followed by a newline
print(@array2[1], "\n"); # prints b followed by a newline
print(@array2[2], "\n"); # prints c followed by a newline
my @array3 = ("ab", "cd", <ef>); # mixing "" and <> up works
print(@array3[0], "\n"); # prints ab followed by a newline
print(@array3[1], "\n"); # prints cd followed by a newline
print(@array3[2], "\n"); # prints ef followed by a newline
# showing some array syntax using $array,$array1 and $array2
my @array4 = ("abc",'d',<e>;"fgh",'i',<j>); # mixing up "" '' and <> works
print(@array4[0][0], "\n"); # more valid array syntax
print(@array4[0][1], "\n"); # more valid array syntax
print(@array4[0][2], "\n"); # more valid array syntax
print(@array4[1][0], "\n"); # more valid array syntax
print(@array4[1][1], "\n"); # more valid array syntax
print(@array4[1][2], "\n"); # more valid array syntax

my ($A,    $B,    $C)    = ( 3 , 4 , 5);
my ($AA,   $BB,   $CC)   = ( 33 ; 44 ; 55);
my ($AAA,  $BBB,  $CCC)  = ((333),(444),(555));
my ($AAAA, $BBBB, $CCCC) = ([3333],[4444],[5555]);

my @arr = ($A,$B,$C); # declare a 1D array called $arr of 3 variables called $A, $B and $C

print($A, "\n"); # prints the value of $A followed by a newline
print($B, "\n"); # prints the value of $B followed by a newline
print($C, "\n"); # prints the value of $C followed by a newline

print($AA, "\n"); # prints the value of $AA followed by a newline
print($BB, "\n"); # prints the value of $BB followed by a newline
print($CC, "\n"); # prints the value of $CC followed by a newline

print($AAA, "\n"); # prints the value of $AAA followed by a newline
print($BBB, "\n"); # prints the value of $BBB followed by a newline
print($CCC, "\n"); # prints the value of $CCC followed by a newline

print($AAAA, "\n"); # prints the value of $AAAA followed by a newline
print($BBBB, "\n"); # prints the value of $BBBB followed by a newline
print($CCCC, "\n"); # prints the value of $CCCC followed by a newline

print(@$A, "\n"); # prints the values of @$A followed by a newline
print(@$B, "\n"); # prints the values of @$B followed by a newline
print(@$C, "\n"); # prints the values of @$C followed by a newline
print ($@arr, "\n"); # prints the values of $@arr followed by a newline

# print($@A, "\n");   # you can't just swap the $ and @ however, unless you change the original declaration
# print($@B, "\n");   # you can't just swap the $ and @ however, unless you change the original declaration
# print($@C, "\n");   # you can't just swap the $ and @ however, unless you change the original declaration
# print(@$arr, "\n"); # you can't just swap the $ and @ however, unless you change the original declaration

my @aa = (11); # declare a single element array called @aa and set its value to 11
my @bb = (22); # declare a single element array called @bb and set its value to 22
my @cc = (33); # declare a single element array called @cc and set its value to 33
my $LST = (@aa,@bb,@cc); # declare a 1D list called $LST of 3 arrays called @aa,@bb and @cc

print($@aa, "\n"); # prints the value of $@aa
print($@bb, "\n"); # prints the value of $@bb
print($@cc, "\n"); # prints the value of $@cc
print(@$LST, "\n"); # prints the values of @$LST

my $i1 = 505; # declare a variable called $i1 and set its value to 505
my $i2 = 606; # declare a variable called $i1 and set its value to 606
my $i3 = 707; # declare a variable called $i1 and set its value to 700
my $LST2 = ($i1,$i2,$i3); # declare a 1D list called $LST2 of 3 variables called $i1,$12, and $i3

print($$i1, "\n"); # prints the value of $$i1 followed by a newline
print($$i2, "\n"); # prints the value of $$i2 followed by a newline
print($$i3, "\n"); # prints the value of $$i3 followed by a newline
print($$LST2, "\n"); # prints the values of $$LST2 followed by a newline

my @A1 = (515); # declare a 1D array called A1 of 1 element of value 515;
my @A2 = (525); # declare a 1D array called A2 of 1 element of value 525;
my @A3 = (535); # declare a 1D array called A3 of 1 element of value 535;
my @ARR2 = (@A1,@A2,@A3); # declare an 1D array called @ARR2 of 3 1d arrays called @A1,@A2 and @A3

print(@@A1, "\n"); #  prints the value of @@A1 followed by a newline
print(@@A2, "\n"); #  prints the value of @@A2 followed by a newline
print(@@A3, "\n"); #  prints the value of @@A3 followed by a newline
print(@@ARR2, "\n"); #  prints the values of @@AAR2 followed by a newline

print("@@A1", "\n");   # print value  of  @@A using string interpolation followed by a newline
print("@\@A1", "\n");   # prints @A1 followed by a newline
print("\@@A1", "\n");   # prints @A1 followed by a newline
print("\@\@A1", "\n");  # prints A1 followed by a newline

print("$$i1", "\n"); # prints value of $$l1 because of interpolation followed by a newline
print("\$$i1", "\n");   # prints $i1 followed by a newline
# print("$\$i1", "\n"); # does not work because it is trying to make \ part of the identifier
print("\$\$i1", "\n");  # prints i1 followed by a newline

print("$@aa", "\n"); # prints the value of $@aa because of interpolation followed by a newline
print("$@bb", "\n"); # prints the value of $@bb because of interpolation followed by a newline
print("$@cc", "\n"); # prints the value of $@cc because of interpolation followed by a newline
print("@$LST", "\n"); # prints the values of @$LST because of interpolation followed by a newline

print("\$@aa", "\n"); # prints @aa followed by a newline
print("\$@bb", "\n"); # prints @bb followed by a newline
print("\$@cc", "\n"); # prints @cc followed by a newline
print("\@$LST", "\n"); # prints $LST followed by a newline

# print("$\@aa", "\n"); # does not work because it is trying to make \ part of the identifier
# print("$\@bb", "\n"); # does not work because it is trying to make \ part of the identifier
# print("$\@cc", "\n"); # does not work because it is trying to make \ part of the identifier
print("@\$LST", "\n"); # prints @LST followed by a newline

print("\$\@aa", "\n"); # prints aa followed by a newline
print("\$\@bb", "\n"); # prints bb followed by a newline
print("\$\@cc", "\n"); # prints cc followed by a newline
print("\@\$LST", "\n"); # prints LST followed by a newline

print("@$A", "\n"); # prints the value of @A because of interpolation followed by a newline
print("@$B", "\n"); # prints the value of @A because of interpolation followed by a newline
print("@$C", "\n"); # prints the value of @A because of interpolation followed by a newline
print ("$@arr", "\n"); # prints the values of $@arr because of interpolation followed by a newline

print("\@$A", "\n"); # prints $A followed by a newline
print("\@$B", "\n"); # prints $B followed by a newline
print("\@$C", "\n"); #  prints $C followed by a newline
print ("\$@arr", "\n"); # prints @arr followed by a newline

print("@\$A", "\n"); # prints @A followed by a newline
print("@\$B", "\n"); # prints @B followed by a newline
print("@\$C", "\n"); # prints @C  followed by a newline
# print ("$\@arr", "\n"); # does not work because it is trying to make \ part of the identifier

print("\@\$A", "\n"); # prints A followed by a newline
print("\@\$B", "\n"); # prints B followed by a newline
print("\@\$C", "\n"); # prints C followed by a newline
print ("\$\@arr", "\n"); # prints arr followed by a newline

constant FLOAT = Rational; # basically a C typedef
my FLOAT $weight = 19.38;
print($weight, "\n");
dd(FLOAT);

sub Rat_2_Str(FLOAT $f) returns Str
{
return "$f";
}

my $strweight = Rat_2_Str($weight);
say($strweight);
dd($strweight);

sub replace($s, $i, &y) is export
{
return substr($s, 0, $i) ~ y(comb($s, $i)) ~ substr($s, $i + 1);
};

my $strng = "pass";
$strng = replace($strng, 0, {'t'});
print($strng);
#to temporerily change $strng do
print(replace($strng, 3, {'t'}););

my $fp = open "data.ldr", :r;
my @data_ldr = $fp.IO.lines.map(*.comb.List);
close($fp);

my $fp = open "data.ldr", :r;
my @data_ldr = $fp.IO.lines.map(*.comb.List);
close($fp);

my UInt $column = 0;
my UInt $line = 0;

    given (@data_ldr[$line][$column])
    {
        when (@data_ldr[$line][$column] eq chr(32))
        {
            when (@data_ldr[$line][$column] eq chr(9))
            {
                if ($column == 0 || $column != $column - 1) # check if the column is the first valid ldraw parameter
                {                                           # (i.e not a whitespace, or invalid character)
                print("\$column is paramater 1 (line type).\n");
                }
                else
                {
                $column += 1; #move to next character
                }
            }
        }
        default {print("line  is type: unknown.\n");}
    }


