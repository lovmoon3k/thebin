海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥随机装备.dz@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"gmtModified\":0,\"id\":0,\"last_chapter_rule\":\"\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"text_1\",\"name\":\"ClassTab\",\"path\":\"ClassTab\",\"rule\":\"const ClassTab = function(classArray, params) {\\n    Object.assign(this, params)\\n    this.arr = classArray.map(v => this.init(v))\\n    this.sign = '$' + QING_TITLE + '_' + (this.name || '') + '_'\\n    this.color = this.color || '#12b668'\\n    this.boundary = this.boundary || 'blank_block'\\n}\\nClassTab.prototype = {\\n    constructor: ClassTab,\\n    load(el) {\\n        let folded = this.fold && getVar('fold_' + this.sign, '')\\n        if (this.arr.length > 1 && this.fold) el.push({\\n            title: '““””' + (folded ? '▶' : '▼').fontcolor('#049eff'),\\n            url: $('#noLoading#').lazyRule((sign, folded) => {\\n                putVar('fold_' + sign, { '': 'T', 'T': '' } [folded])\\n                refreshPage(false)\\n                return 'hiker://empty'\\n            }, this.sign, folded),\\n            col_type: 'scroll_button'\\n        })\\n        let arr = folded ? [this.arr[0]] : this.arr\\n        arr.forEach((v) => {\\n            let { id, class_name, class_url } = v,\\n            selected = JSON.stringify(this.getClass(id))\\n            class_name.forEach((name, i) => {\\n                let url = class_url[i],\\n                    now = JSON.stringify({ name: name, url: url })\\n                el.push({\\n                    title: selected == now ? '““””' + name.fontcolor(this.color).bold() : name,\\n                    url: selected == now ? 'hiker://empty' : $('#noLoading#').lazyRule((sign, id, now) => {\\n                        putVar(sign + id, now)\\n                        refreshPage(false)\\n                        return 'hiker://empty'\\n                    }, this.sign, id, now),\\n                    col_type: 'scroll_button'\\n                })\\n            })\\n            el.push({ col_type: this.boundary })\\n        })\\n    },\\n    init(classObject) {\\n        if (typeof classObject.class_name == 'string')\\n            classObject.class_name = classObject.class_name.split('&')\\n        if (typeof classObject.class_url == 'string')\\n            classObject.class_url = classObject.class_url.split('&').map((v) => v.trim())\\n        return classObject\\n    },\\n    push(classObject) {\\n        this.arr.push(this.init(classObject))\\n    },\\n    getClass(id) {\\n        let defaultClass = this.arr.find(item => item.id == id)\\n        defaultClass = JSON.stringify(defaultClass ? {\\n            name: defaultClass.class_name[0],\\n            url: defaultClass.class_url[0]\\n        } : { name:  'cannot find id: ' + id + ' in classTab: ' + this.sign, url: ''})\\n        return JSON.parse(getVar(this.sign + id, defaultClass))\\n    },\\n    setUrl(url) {\\n        return url.replace(/\\\\$\\\\{([^}]*)\\\\}/g, (_, id) => this.getClass(id).url)\\n    }\\n}\\n// 生成头部分类\\nconst fyAll = RULE.url.includes('fyAll')\\nlet tabHeader = []\\nif (RULE.class_name) tabHeader.push({\\n    id: fyAll ? 'fyAll' : 'fyclass',\\n    class_name: RULE.class_name,\\n    class_url: RULE.class_url\\n})\\nif (RULE.area_name) tabHeader.push({\\n    id: fyAll ? 'fyAll' : 'fyarea',\\n    class_name: RULE.area_name,\\n    class_url: RULE.area_url\\n})\\nif (RULE.year_name) tabHeader.push({\\n    id: fyAll ? 'fyAll' : 'fyyear',\\n    class_name: RULE.year_name,\\n    class_url: RULE.year_url\\n})\\nif (RULE.sort_name) tabHeader.push({\\n    id: fyAll ? 'fyAll' : 'fysort',\\n    class_name: RULE.sort_name,\\n    class_url: RULE.sort_url\\n})\\ntabHeader = new ClassTab(tabHeader, { name: RULE.title, fold: readFile('tabFold'), })\\n\"},{\"col_type\":\"icon_2_round\",\"name\":\"设置\",\"path\":\"Config\",\"rule\":\"js:\\naddListener('onClose', 'clearMyVar(\\\"sortFlag\\\");refreshPage()');\\nsetPageTitle('⚙ 轻合集设置 ⚙');\\nconst defaultDisTabModify = false; //默认禁用自定义分类关闭.就是开启自定义\\nconst QING_TITLE = getMyVar('myCollection');\\nlet data = $.require('hiker://page/dataLoad?rule=' + QING_TITLE)(true),\\n    el = [{\\n        title: '<b> 清除缓存，立即更新 <small> （基于远程仓库，不要频繁点击）',\\n        url: $('基于远程仓库，不要频繁点击，增加仓库压力\\\\n若为本地文件，则不会进行缓存，本功能也无效').confirm(() => {\\n            deleteCache(getMyVar('remoteUrl'))\\n            back(false)\\n            return 'toast://已更新'\\n        }),\\n        img: 'hiker://images/icon4',\\n        col_type: 'avatar'\\n    }],\\n    updateInterval = readFile('updateInterval') || '1',\\n    newWindow = readFile('newWindow'),\\n    tabFold = readFile('tabFold'),\\n    disTabModify = readFile('disTabModify'),\\n    disableCustom = readFile('disableCustom'),\\n    editMode = getMyVar('editMode', '启用/禁用');\\nif(disTabModify===''){\\n    saveFile('disTabModify', defaultDisTabModify+'');\\n    disTabModify = defaultDisTabModify;\\n}else if(/true|false/.test(disTabModify)){\\n    disTabModify = JSON.parse(disTabModify);\\n}\\nel.push({\\n    title: '  💡 更新频率: ' + (updateInterval == 0 ? '手动' : updateInterval + '天') + '  ',\\n    url: $(updateInterval, '输入更新间隔（天），为0则手动更新\\\\n本地文件链接无效').input(() => {\\n        saveFile('updateInterval', input)\\n        refreshPage()\\n        return 'hiker://empty'\\n    }),\\n    col_type: 'scroll_button'\\n}, {\\n    title: '  🖥 独立首页: ' + (newWindow ? '是' : '否') + '  ',\\n    url: $('#noLoading#').lazyRule((newWindow) => {\\n        saveFile('newWindow', newWindow ? '' : '1')\\n        refreshPage()\\n        return 'hiker://empty'\\n    }, newWindow),\\n    col_type: 'scroll_button'\\n}, {\\n    title: '  💠 分类折叠: ' + (tabFold ? '是' : '否') + '  ',\\n    url: $('#noLoading#').lazyRule((tabFold) => {\\n        saveFile('tabFold', tabFold ? '' : '1')\\n        refreshPage()\\n        return 'hiker://empty'\\n    }, tabFold),\\n    col_type: 'scroll_button'\\n}, {\\n    title: '  💠 分类自定义: ' + (disTabModify ? '否' : '是') + '  ',\\n    url: $('#noLoading#').lazyRule((disTabModify) => {\\n        saveFile('disTabModify', disTabModify ? 'false' : 'true');\\n        putMyVar('typeShow', '');\\n        refreshPage();\\n        return 'hiker://empty'\\n    }, disTabModify),\\n    col_type: 'scroll_button'\\n},{\\n    title: '  💼 备份恢复  ',\\n    url: $(['备份', '恢复'], 1).select((QING_TITLE, updateInterval, newWindow, tabFold, disableCustom) => {\\n        let url = getMyVar('remoteUrl')\\n        if (input == '备份') return $('hiker://files/tmp/' + QING_TITLE + '_backup.json', '输入备份路径')\\n            .input((url, updateInterval, newWindow, tabFold, disableCustom) => {\\n                let rules = request(url),\\n                    customData = readFile('customData')\\n                writeFile(input, JSON.stringify({\\n                    updateInterval: updateInterval,\\n                    newWindow: newWindow,\\n                    tabFold: tabFold,\\n                    disableCustom: disableCustom,\\n                    customData: customData,\\n                    rules: rules\\n                }))\\n                return 'toast://已备份'\\n            }, url, updateInterval, newWindow, tabFold, disableCustom)\\n        else return $('hiker://files/tmp/' + QING_TITLE + '_backup.json', '输入备份路径').input((url) => {\\n            let { updateInterval, newWindow, tabFold, disableCustom, customData, rules } = JSON.parse(request(input))\\n            saveFile('updateInterval', updateInterval)\\n            saveFile('newWindow', newWindow)\\n            saveFile('tabFold', tabFold)\\n            saveFile('disableCustom', disableCustom)\\n            saveFile('customData', customData)\\n            writeFile('hiker://files/libs/' + url + '.js', JSON.stringify(rules))\\n            refreshPage()\\n            return 'toast://已恢复，如果不想同步远程仓库，可以设置更新频率为手动'\\n        }, url)\\n    }, QING_TITLE, updateInterval, newWindow, tabFold, disableCustom),\\n    col_type: 'scroll_button'\\n}, {\\n    title: '““””<font color=\\\"#666666\\\"><small>特别鸣谢，小程序提供者：\\\\n' +\\n        data.reduce((self, v) => v.author ? self.concat(v.author.split('&')) : self, [])\\n            .filter((v, i, arr) => v && arr.indexOf(v) == i).join('、'),\\n    url: 'hiker://empty',\\n    col_type: 'text_center_1'\\n})\\n\\nel.push({ col_type: 'line' }, {\\n    title: '““””' + '📝'.small() + '&nbsp 轻合集自定义 &nbsp'.bold().fontcolor('#757575') + (disableCustom ? '❌' : '⭕').small(),\\n    url: $([(disableCustom ? '启用' : '禁用') + '合集自定义', '清除自定义数据'], 1).select(() => {\\n        if (input == '清除自定义数据') {\\n            deleteFile('customData')\\n        } else if (input == '启用合集自定义') {\\n            saveFile('disableCustom', '')\\n        } else {\\n            saveFile('disableCustom', '1')\\n            input += '\\\\n小程序启用/禁用、重新排序等操作均不会体现在首页小程序列表中'\\n        }\\n        refreshPage(false)\\n        return 'toast://已' + input\\n    }),\\n    col_type: 'text_center_1',\\n    extra: { lineVisible: false }\\n});\\n['启用/禁用', '重新排序', '更改图标', '导入海阔'].forEach((v) => {\\n    el.push({\\n        title: v == editMode ? '““””' + v.bold().fontcolor('#12b668') : v,\\n        url: v == editMode ? 'hiker://empty' : $('#noLoading#').lazyRule((v) => {\\n            putMyVar('editMode', v)\\n            refreshPage(false)\\n            return 'hiker://empty'\\n        }, v),\\n        col_type: 'scroll_button'\\n    })\\n})\\nJSON.parse(readFile('customData') || '[]').forEach((v, i) => {\\n    let d = { title: v.title, img: data[i].icon }\\n    switch (editMode) {\\n        case '启用/禁用':\\n            d.title = (v.visible ? '🟢  ' : '🔴  ') + d.title\\n            d.url = $('#noLoading#').lazyRule((i) => {\\n                let rules = JSON.parse(readFile('customData') || '[]')\\n                rules[i].visible = !rules[i].visible\\n                saveFile('customData', JSON.stringify(rules))\\n                refreshPage(false)\\n                return 'hiker://empty'\\n            }, i)\\n            break\\n        case '重新排序':\\n            let sortFlag = parseInt(getMyVar('sortFlag', '-1'))\\n            d.title = (sortFlag == i ? '🔃  ' : '') + d.title\\n            if (sortFlag == -1)\\n                d.url = $('#noLoading#').lazyRule((i) => {\\n                    putMyVar('sortFlag', i.toString())\\n                    refreshPage(false)\\n                    return 'toast://选择要移动到的位置'\\n                }, i)\\n            else\\n                d.url = $('#noLoading#').lazyRule((oldIndex, newIndex) => {\\n                    let rules = JSON.parse(readFile('customData') || '[]')\\n                    rules.splice(newIndex, 0, rules.splice(oldIndex, 1)[0])\\n                    saveFile('customData', JSON.stringify(rules))\\n                    putMyVar('sortFlag', '-1')\\n                    refreshPage(false)\\n                    return 'hiker://empty'\\n                }, sortFlag, i)\\n            break\\n        case '更改图标':\\n            d.url = $(v.icon || '', '输入新图标地址或颜色代码：').input((i) => {\\n                let rules = JSON.parse(readFile('customData') || '[]')\\n                if (input)\\n                    rules[i].icon = input\\n                else\\n                    delete rules[i].icon\\n                saveFile('customData', JSON.stringify(rules))\\n                refreshPage(false)\\n                return 'hiker://empty'\\n            }, i)\\n            break\\n        case '导入海阔':\\n            d.url = 'rule://' + base64Encode(JSON.stringify(data[i]))\\n            break\\n    }\\n    el.push(d)\\n})\\nsetResult(el)\\n\"},{\"col_type\":\"movie_3\",\"name\":\"页面载入\",\"path\":\"frameLoad\",\"rule\":\"js:\\nconst QING_TITLE = getMyVar('myCollection')\\nfunction runCode(rule) {\\n    try {\\n        let [input, code] = rule.split('.js:')\\n        return code ? eval(code) : rule\\n    } catch (e) { return rule }\\n}\\nlet myCollection_el = [],\\n    { RULE, HASH, isIndex, pageTitle } = MY_PARAMS\\nRULE = isIndex ?\\n    $.require('hiker://page/dataLoad?rule=' + QING_TITLE)().find((v) => v.title == RULE.title) :\\n    Object.assign(JSON.parse(readFile(HASH)), RULE)\\n\\neval(JSON.parse(fetch('hiker://page/preFunc?rule=' + QING_TITLE)).rule)\\neval(JSON.parse(fetch('hiker://page/urlParse?rule=' + QING_TITLE)).rule)\\n\\nif (isIndex) {\\n    // 计数已打开小程序，防止独立页面时轻合集出发关闭导致页面规则缓存清理\\n    let openedIndex = parseInt(getMyVar('openedIndex', '0'))\\n    putMyVar('openedIndex', String(openedIndex + 1))\\n    addListener = function(param0, param1, param2) {\\n        param2 = CALLBACK_KEY;\\n        if (param0 == 'onClose') param1 += ';' + $.toString(() => {\\n            let openedIndex = parseInt(getMyVar('openedIndex', '0'))\\n            putMyVar('openedIndex', String(openedIndex - 1))\\n        })\\n        method_addListener.invoke(javaContext, param0, param1, param2)\\n    }\\n    addListener('onClose', '')\\n    if (MY_PAGE == 1) {\\n        // 加载ClassTab组件\\n        eval(JSON.parse(fetch('hiker://page/ClassTab?rule=' + QING_TITLE)).rule)\\n        tabHeader.load(myCollection_el)\\n        if (RULE.search_url) myCollection_el.push({\\n            title: \\\"搜索\\\",\\n            desc: \\\"搜你想要的...\\\",\\n            url: '\\\"hiker://search?s=\\\"+input',\\n            extra: {\\n                rules: $.toString((QING_TITLE, title) => {\\n                    let rules = $.require('hiker://page/dataLoad?rule=' + QING_TITLE)()\\n                    rules = [rules.find((v) => v.title == title)]\\n                    return JSON.stringify(rules)\\n                }, QING_TITLE, RULE.title),\\n                defaultValue: getMyVar('searchKey', ''),\\n                onChange: \\\"putMyVar('searchKey',input)\\\"\\n            },\\n            col_type: \\\"input\\\",\\n        })\\n    }\\n    // 处理MY_RULE\\n    MY_RULE.url = RULE.url\\n    MY_RULE.col_type = RULE.col_type\\n    MY_RULE.detail_col_type = RULE.detail_col_type\\n    MY_RULE.find_rule = RULE.find_rule\\n    MY_RULE.detail_find_rule = RULE.detail_find_rule\\n    MY_RULE.pageList = JSON.parse(RULE.pages || '[]')\\n    MY_RULE.pages = JSON.stringify(MY_RULE.pageList)\\n    MY_RULE.params = {}\\n} else {\\n    MY_RULE.url = MY_PARAMS.url\\n    MY_RULE.col_type = RULE.detail_col_type\\n    MY_RULE.find_rule = RULE.detail_find_rule\\n    MY_RULE.pageList = RULE.pageList\\n    MY_RULE.pages = RULE.pages\\n    MY_RULE.params = RULE.params\\n}\\nMY_RULE.ua = RULE.ua\\nMY_RULE.title = RULE.title\\nMY_RULE.preRule = RULE.preRule\\nMY_RULE.last_chapter_rule = RULE.last_chapter_rule\\n\\nif (!isIndex) {\\n    if (pageTitle) setPageTitle(pageTitle)\\n    setLastChapterRule(MY_RULE.last_chapter_rule)\\n    MY_PARAMS = MY_RULE.params\\n}\\n// 预处理并初始化config\\nif (isIndex && MY_PAGE == 1) eval(MY_RULE.preRule)\\nlet _cfg = getMyVar('initConfig', '{}')\\nif (_cfg && _cfg.length > 0) {\\n    config = JSON.parse(_cfg)\\n}\\n\\n// 缓存页面规则，避免每个extra重复携带，导致数据太大\\nlet MyRuleStr = JSON.stringify(MY_RULE),\\n    ruleHash = md5(MyRuleStr)\\nif (!fileExist(ruleHash)) {\\n    saveFile(ruleHash, MyRuleStr)\\n    // addListener可能被重写且在这里强退程序会导致缓存残留，缓存规则MD5，回首页再去删\\n    let _ruleHashCache = JSON.parse(readFile(\\\"_ruleHashCache\\\") || \\\"[]\\\")\\n    _ruleHashCache.push(ruleHash)\\n    saveFile(\\\"_ruleHashCache\\\", JSON.stringify(_ruleHashCache))\\n}\\n\\n// 正文解析\\nif (MY_RULE.find_rule.startsWith('js:')) {\\n    setResult = function(el, param1, param2, param3) {\\n        param1 = CALLBACK_KEY\\n        param2 = MY_RULE\\n        param3 = MY_TYPE\\n        if (Array.isArray(el.data)) el = el.data;\\n        Array.prototype.push.apply(myCollection_el, el.map((v) => {\\n            let MY__RULE = {};\\n            v.col_type = v.col_type || MY_RULE.col_type\\n\\n            if (!v.url || ['rule', 'pics', 'toast', 'input', 'copy', 'editFile', 'x5', 'x5WebView', 'x5Play', 'web', 'select', 'x5Rule', 'webRule', 'download'].find((vv) => v.url.startsWith(vv + '://')) || ['x5_webview_single', 'input'].find((vv) => v.col_type == vv)) {\\n                return v\\n            } else if (v.url.includes('@rule=')) {\\n                let [_, url, rule] = v.url.match(/^([\\\\s\\\\S]*?)@rule=([\\\\s\\\\S]*)$/)\\n                v.url = url\\n                MY__RULE.detail_find_rule = rule\\n                MY__RULE.detail_col_type = MY_RULE.col_type\\n            } else if (v.url.startsWith('hiker://page/')) {\\n                if (v.url.includes('rule=') || (v.extra || {}).rule)\\n                    return v\\n                let [_, path, flag, params] = v.url.match(/^hiker:\\\\/\\\\/page\\\\/(.+?)(#.*?)?(?:\\\\?(.*))?$/),\\n                    subPage = MY_RULE.pageList.find((v) => v.path == path),\\n                    subUrl = (params || '').split('&').find((v) => v.startsWith('url='))\\n                v.url = subUrl ? subUrl.slice(4).replace(/？？/g, '?').replace(/＆＆/g, '&') : (v.extra || {}).url || 'hiker://empty' + flag + '?' + (params || '')\\n                MY__RULE.detail_find_rule = subPage.rule\\n                MY__RULE.detail_col_type = subPage.col_type\\n                MY__RULE.params = v.extra || {}\\n            } else if (v.url.includes('@lazyRule=')) {\\n                let reIndex = v.url.indexOf('.js:')\\n                if (reIndex >= 0) v.url = v.url.slice(0, reIndex) + '.js:\\\\nif(MY_RULE)Object.assign(MY_RULE, JSON.parse(readFile(\\\"' + ruleHash + '\\\")));' + v.url.slice(reIndex + 4)\\n                return v\\n            } else if (isIndex) {\\n                if (!MY_RULE.detail_find_rule || /hiker:\\\\/\\\\/(?!empty.+$)/.test(v.url)) return v\\n            } else {\\n                return v\\n            }\\n            v.extra = {\\n                url: (function(url) {\\n                    url = url.split(';')\\n                    return url.shift() + ';' + paramHandle(url, MY_RULE.ua, MY_RULE.url)\\n                })(v.url),\\n                RULE: MY__RULE,\\n                HASH: ruleHash,\\n                pageTitle: isIndex && v.title\\n            }\\n            v.url = 'hiker://page/frameLoad?rule=' + QING_TITLE\\n            return v\\n        }))\\n        method_setResult.invoke(javaContext, myCollection_el, param1, param2, param3)\\n    }\\n    setHomeResult = setResult\\n    setSearchResult = setResult\\n\\n    eval(MY_RULE.find_rule.slice(3))\\n} else {\\n    let [_, findRule, detailFindRule] = MY_RULE.find_rule.match(/^([\\\\s\\\\S]*?)(?:==>([\\\\s\\\\S]*))?$/)\\n    findRule = findRule.split(';')\\n    parseDomForArray(getResCode(), findRule.shift()).forEach((data) => {\\n        let [title, img, desc, url] = findRule.map((v, i) => {\\n                try {\\n                    if (v == '*') return ''\\n                    else v = (i == 1 || i == 3) ?\\n                        parseDom(data, v) :\\n                        parseDomForHtml(data, v)\\n                    if (i != 3) v = runCode(v)\\n                    return v\\n                } catch (e) { return '' }\\n            }),\\n            res = {\\n                title: title, url: url,\\n                desc: desc, img: img,\\n                col_type: MY_RULE.col_type\\n            }\\n        if (res.url) {\\n            if (res.url.includes('@lazyRule=')) {\\n                let reIndex = res.url.indexOf('.js:')\\n                if (reIndex >= 0) res.url = res.url.slice(0, reIndex) + '.js:\\\\nif(MY_RULE)Object.assign(MY_RULE, JSON.parse(readFile(\\\"' + ruleHash + '\\\")));' + res.url.slice(reIndex + 4)\\n            } else if (detailFindRule) {\\n                res.extra = {\\n                    url: (function(url) {\\n                        url = url.split(';')\\n                        return url.shift() + ';' + paramHandle(url, MY_RULE.ua, MY_RULE.url.split(';')[2])\\n                    })(url),\\n                    RULE: { detail_find_rule: detailFindRule },\\n                    HASH: ruleHash,\\n                    pageTitle: isIndex && title\\n                }\\n                res.url = 'hiker://page/frameLoad?rule=' + QING_TITLE\\n            } else if (MY_RULE.detail_find_rule) {\\n                res.extra = {\\n                    url: (function(url) {\\n                        url = url.split(';')\\n                        return url.shift() + ';' + paramHandle(url, MY_RULE.ua, MY_RULE.url)\\n                    })(url),\\n                    RULE: {},\\n                    HASH: ruleHash,\\n                    pageTitle: isIndex && title\\n                }\\n                res.url = 'hiker://page/frameLoad?rule=' + QING_TITLE\\n            }\\n        }\\n        myCollection_el.push(res)\\n    })\\n    setResult(myCollection_el)\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"数据载入\",\"path\":\"dataLoad\",\"rule\":\"$.exports = function(showAll) {\\n    let url = getMyVar('remoteUrl'),\\n        data = []\\n    if (url.startsWith('hiker://') || url.startsWith('file://')) {\\n        // 如果为本地文件则不进行缓存\\n        try {\\n            let oriData = fetch(url)\\n            if (url.startsWith('hiker://page/'))\\n                oriData = JSON.parse(oriData).rule\\n            data = JSON.parse(oriData)\\n        } catch (e) {}\\n    } else {\\n        // 获取远程数据，检查间隔默认一天\\n        let interval = parseInt(readFile('updateInterval') || '1'),\\n            oldData = fetch('hiker://files/libs/' + md5(url) + '.js'),\\n            remoteData = fetchCache(url, 24 * interval)\\n        try { remoteData = JSON.parse(remoteData) } catch(e) {}\\n        if(!Array.isArray(remoteData)) remoteData = []\\n        if (remoteData.length < 3) {\\n            log('未获取到数据')\\n            if (oldData) writeFile('hiker://files/libs/' + md5(url) + '.js', oldData)\\n            data = JSON.parse(oldData || '[]')\\n        } else {\\n            log('已获取到数据')\\n            data = remoteData\\n        }\\n    }\\n    data = data.filter((v) => { return v.title != getMyVar('myCollection') && !(v.author || '').includes('轻合集生成器') })\\n    if (readFile('disableCustom')) return data\\n    else { // 写入自定义数据\\n        let customData = JSON.parse(readFile('customData') || '[]'),\\n            rewriteData = []\\n        customData = customData.reduce((self, v) => {\\n            let index = data.findIndex((vv) => v.title == vv.title)\\n            if (index >= 0) {\\n                self.push(v)\\n                let rule = data.splice(index, 1)[0]\\n                if (showAll || v.visible)\\n                    rewriteData.push(Object.assign(rule, v))\\n            }\\n            return self\\n        }, [])\\n        data.forEach((v) => customData.push({ title: v.title, visible: true }))\\n        saveFile('customData', JSON.stringify(customData))\\n        return rewriteData.concat(data)\\n    }\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"函数重写\",\"path\":\"preFunc\",\"rule\":\"// 防止require多次运行\\nlet rCache = {}\\nrequire = function(param0, param1, param2, param3, param4) {\\n    if (!param0 || rCache[param0] != null) {\\n        return\\n    }\\n    rCache[param0] = 1\\n    param2 = param2 || 0\\n    param3 = MY_TICKET\\n    param4 = eval\\n    return method_require.invoke(javaContext, param0, param1, param2, param3, param4)\\n}\\nrequireCache = function(param0, param1, param2, param3, param4, param5) {\\n    if (!param0 || rCache[param0] != null) {\\n        return\\n    }\\n    rCache[param0] = 1\\n    param3 = param3 || 0\\n    param4 = MY_TICKET\\n    param5 = eval\\n    return method_requireCache.invoke(javaContext, param0, param1, param2, param3, param4, param5)\\n}\\nrc = requireCache\\n\\n// 最新章节规则注入预处理代码\\nsetLastChapterRule = function(param0) {\\n    if (!param0) return\\n    if (param0.startsWith(\\\"js:\\\") && MY_RULE.preRule) {\\n        param0 = 'js:\\\\ntry{eval(JSON.parse(fetch(\\\"hiker://page/preFunc?rule=' + QING_TITLE + '\\\")).rule);\\\\\\n            eval(base64Decode(\\\"' + base64Encode(MY_RULE.preRule) + '\\\"));\\\\\\n            let _cfg = getMyVar(\\\"initConfig\\\", \\\"{}\\\");\\\\\\n            if (_cfg && _cfg.length>0) {config = JSON.parse(_cfg)}}catch(e){log(e.message)}\\\\n;' +\\n            param0.slice(3)\\n    }\\n    method_setLastChapterRule.invoke(javaContext, param0);\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"链接处理\",\"path\":\"urlParse\",\"rule\":\"// 首页链接替换分类\\nfunction indexUrl(param) {\\n    function runCode(rule) {\\n        try {\\n            let [input, code] = rule.split('.js:')\\n            return code ? eval(code) : rule\\n        } catch (e) { return rule }\\n    }\\n    let { RULE, pageNum, QING_TITLE } = JSON.parse(param.split('###')[1])\\n    RULE = JSON.parse(base64Decode(RULE))\\n    pageNum = parseInt(pageNum)\\n    let url = RULE.url,\\n        tabHeader = []\\n\\n    eval(JSON.parse(fetch('hiker://page/ClassTab?rule=' + QING_TITLE)).rule)\\n    url = tabHeader.setUrl(fyAll ? url.replace(/fyAll/g, '$${fyAll}') : url.replace(/fy(class|area|year|sort)/g, '$${fy$1}'))\\n    url = url.replace(/fypage(?:@(-?\\\\d+)@)?(?:\\\\*(\\\\d+)@)?/g, (_, start, space) => parseInt(start || 0) + 1 + (pageNum - 1) * parseInt(space || 1))\\n    url = /^([\\\\s\\\\S]*?)(?:\\\\[firstPage=([\\\\s\\\\S]*?)\\\\])?(?:(\\\\.js:[\\\\s\\\\S]*?))?$/.exec(url)\\n    if (pageNum == 1 && url[2]) url[1] = url[2]\\n    if (url[3] && !url[1].includes('.js:')) url[1] += url[3]\\n    return runCode(url[1])\\n}\\n// 链接参数处理\\nfunction paramHandle(urlParam, ua, urlTmp) {\\n    let charset, UserAgent\\n    try { // 链接的编码和ua应该是首先继承首页链接\\n        [, , charset, UserAgent] = urlTmp.split(';')\\n        UserAgent = UserAgent.match(/^{(.*)}$/)[1].split('&&').find((v) => v.startsWith('User-Agent@'))\\n    } catch (e) {}\\n    urlParam[0] = urlParam[0] || 'GET'\\n    urlParam[1] = urlParam[1] || charset || 'UTF-8'\\n    try {\\n        urlParam[2] = urlParam[2].match(/^{(.*)}$/)[1].split('&&')\\n    } catch (e) { urlParam[2] = [] }\\n    // 添加全局UA\\n    if (!urlParam[2].some((v) => v.startsWith('User-Agent@'))) {\\n        if (UserAgent) urlParam[2].push(UserAgent)\\n        else if (ua == 'pc')\\n            urlParam[2].push('User-Agent@' + PC_UA.replace(/;/g, '；；').replace(/\\\\?/, '？？'))\\n        else if (ua == 'mobile')\\n            urlParam[2].push('User-Agent@' + MOBILE_UA.replace(/;/g, '；；').replace(/\\\\?/, '？？'))\\n    }\\n    urlParam[2] = '{' + urlParam[2].join('&&') + '}'\\n    return urlParam.join(';')\\n}\\n\"},{\"name\":\"仓库工具\",\"path\":\"tools\",\"rule\":\"js:\\n$.exports.range = function(m, n) {\\n    return Math.floor(Math.random() * (m - n + 1) + n);\\n}\\n$.exports.color = function(text, color) {\\n    text += \\\"\\\";\\n    if (text.indexOf(\\\"““””\\\") === 0) {\\n        text.replace(\\\"““””\\\", \\\"\\\");\\n    }\\n    return \\\"““””<font color='\\\" + color + \\\"'>\\\" + text + \\\"</font>\\\";\\n}\\nfunction htmlTag(tag, text) {\\n    text += \\\"\\\";\\n    if (text.indexOf(\\\"““””\\\") === 0) {\\n        text.replace(\\\"““””\\\", \\\"\\\");\\n    }\\n    return \\\"““””\\\" + \\\"<\\\" + tag + \\\">\\\" + text + \\\"</\\\" + tag + \\\">\\\";\\n\\n}\\n\\nfunction getNowFormatDate() {\\n            let date = new Date();\\n            let seperator1 = \\\"-\\\";\\n            let seperator2 = \\\":\\\";\\n            let month = date.getMonth() + 1;\\n            let strDate = date.getDate();\\n            let strHours = date.getHours();\\n            let strMinutes = date.getMinutes();\\n            let strSeconds = date.getSeconds()+1;\\n            if (month >= 1 && month <= 9) {\\n                month = \\\"0\\\" + month\\n            }\\n            if (strDate >= 0 && strDate <= 9) {\\n                strDate = \\\"0\\\" + strDate\\n            }\\n            if (strHours >= 0 && strHours <= 9) {\\n                strHours = \\\"0\\\" + strHours\\n            }\\n            if (strMinutes >= 0 && strMinutes <= 9) {\\n                strMinutes = \\\"0\\\" + strMinutes\\n            }\\n            if (strSeconds >= 0 && strSeconds <= 9) {\\n                strSeconds = \\\"0\\\" + strSeconds\\n            }\\n            //let currentdate = date.getFullYear() + seperator1 + month + seperator1 + strDate + \\\" \\\" + strHours + seperator2 + strMinutes + seperator2 + strSeconds;\\n            let currentdate = (date.getFullYear()-2020)+''+ month +''+ strDate +''+ strHours+'' + strMinutes +''+ Math.ceil(strSeconds/7);\\n            return parseInt(currentdate)\\n        }\\n$.exports.getNowFormatDate = getNowFormatDate;\\n$.exports.htmlTag = htmlTag;\\n$.exports.small = function(text) {\\n    return htmlTag(\\\"small\\\", text);\\n}\\n$.exports.unique2 = function unique2(array){\\n    return Array.from(new Set(array));\\n}\\n$.exports.strDeal = function strDeal(str){\\n    str = str.split('');\\n    str = str.filter(e => (e >= 0 && e <= 9) || (e >= 'a' && e <= 'z') || (e >= 'A' && e <= 'Z') || (e >= '\\\\u4e00' && e <= '\\\\u9fa5'));\\n    str = str.join('');\\n    return str\\n}\"}],\"params\":\"{\\\"RULE\\\":{\\\"title\\\":\\\"随机装备.dz\\\"},\\\"isIndex\\\":true,\\\"url\\\":\\\"hiker://empty/#noHistory##noRecordHistory####{\\\\\\\"RULE\\\\\\\":\\\\\\\"eyJ0aXRsZSI6Iumaj+acuuijheWkhy5keiIsInVybCI6Imhpa2VyOi8vZW1wdHkiLCJjbGFzc19uYW1lIjoiIiwiY2xhc3NfdXJsIjoiIiwiYXJlYV9uYW1lIjoiIiwiYXJlYV91cmwiOiIiLCJ5ZWFyX25hbWUiOiIiLCJ5ZWFyX3VybCI6IiIsInNvcnRfbmFtZSI6IiIsInNvcnRfdXJsIjoi5ri45oiPIn0=\\\\\\\",\\\\\\\"pageNum\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"QING_TITLE\\\\\\\":\\\\\\\"道长dr合集\\\\\\\"}.js:eval(JSON.parse(fetch(\\\\\\\"hiker://page/urlParse？？rule=道长dr合集\\\\\\\")).rule)；；indexUrl(input);GET;UTF-8;{User-Agent@Mozilla/5.0 (Linux；； Android 10；； OXF-AN10 Build/HUAWEIOXF-AN10；； wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.93 Mobile Safari/537.36}\\\"}\",\"saved\":false,\"title\":\"道长dr合集\",\"version\":0,\"url\":\"hiker://empty/#noHistory##noRecordHistory####{\\\"RULE\\\":\\\"eyJ0aXRsZSI6Iumaj+acuuijheWkhy5keiIsInVybCI6Imhpa2VyOi8vZW1wdHkiLCJjbGFzc19uYW1lIjoiIiwiY2xhc3NfdXJsIjoiIiwiYXJlYV9uYW1lIjoiIiwiYXJlYV91cmwiOiIiLCJ5ZWFyX25hbWUiOiIiLCJ5ZWFyX3VybCI6IiIsInNvcnRfbmFtZSI6IiIsInNvcnRfdXJsIjoi5ri45oiPIn0=\\\",\\\"pageNum\\\":\\\"1\\\",\\\"QING_TITLE\\\":\\\"道长dr合集\\\"}.js:eval(JSON.parse(fetch(\\\"hiker://page/urlParse？？rule=道长dr合集\\\")).rule)；；indexUrl(input);GET;UTF-8;{User-Agent@Mozilla/5.0 (Linux；； Android 10；； OXF-AN10 Build/HUAWEIOXF-AN10；； wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/88.0.4324.93 Mobile Safari/537.36}\",\"col_type\":\"movie_3\",\"find_rule\":\"js:\\nconst QING_TITLE = getMyVar('myCollection')\\nfunction runCode(rule) {\\n    try {\\n        let [input, code] = rule.split('.js:')\\n        return code ? eval(code) : rule\\n    } catch (e) { return rule }\\n}\\nlet myCollection_el = [],\\n    { RULE, HASH, isIndex, pageTitle } = MY_PARAMS\\nRULE = isIndex ?\\n    $.require('hiker://page/dataLoad?rule=' + QING_TITLE)().find((v) => v.title == RULE.title) :\\n    Object.assign(JSON.parse(readFile(HASH)), RULE)\\n\\neval(JSON.parse(fetch('hiker://page/preFunc?rule=' + QING_TITLE)).rule)\\neval(JSON.parse(fetch('hiker://page/urlParse?rule=' + QING_TITLE)).rule)\\n\\nif (isIndex) {\\n    // 计数已打开小程序，防止独立页面时轻合集出发关闭导致页面规则缓存清理\\n    let openedIndex = parseInt(getMyVar('openedIndex', '0'))\\n    putMyVar('openedIndex', String(openedIndex + 1))\\n    addListener = function(param0, param1, param2) {\\n        param2 = CALLBACK_KEY;\\n        if (param0 == 'onClose') param1 += ';' + $.toString(() => {\\n            let openedIndex = parseInt(getMyVar('openedIndex', '0'))\\n            putMyVar('openedIndex', String(openedIndex - 1))\\n        })\\n        method_addListener.invoke(javaContext, param0, param1, param2)\\n    }\\n    addListener('onClose', '')\\n    if (MY_PAGE == 1) {\\n        // 加载ClassTab组件\\n        eval(JSON.parse(fetch('hiker://page/ClassTab?rule=' + QING_TITLE)).rule)\\n        tabHeader.load(myCollection_el)\\n        if (RULE.search_url) myCollection_el.push({\\n            title: \\\"搜索\\\",\\n            desc: \\\"搜你想要的...\\\",\\n            url: '\\\"hiker://search?s=\\\"+input',\\n            extra: {\\n                rules: $.toString((QING_TITLE, title) => {\\n                    let rules = $.require('hiker://page/dataLoad?rule=' + QING_TITLE)()\\n                    rules = [rules.find((v) => v.title == title)]\\n                    return JSON.stringify(rules)\\n                }, QING_TITLE, RULE.title),\\n                defaultValue: getMyVar('searchKey', ''),\\n                onChange: \\\"putMyVar('searchKey',input)\\\"\\n            },\\n            col_type: \\\"input\\\",\\n        })\\n    }\\n    // 处理MY_RULE\\n    MY_RULE.url = RULE.url\\n    MY_RULE.col_type = RULE.col_type\\n    MY_RULE.detail_col_type = RULE.detail_col_type\\n    MY_RULE.find_rule = RULE.find_rule\\n    MY_RULE.detail_find_rule = RULE.detail_find_rule\\n    MY_RULE.pageList = JSON.parse(RULE.pages || '[]')\\n    MY_RULE.pages = JSON.stringify(MY_RULE.pageList)\\n    MY_RULE.params = {}\\n} else {\\n    MY_RULE.url = MY_PARAMS.url\\n    MY_RULE.col_type = RULE.detail_col_type\\n    MY_RULE.find_rule = RULE.detail_find_rule\\n    MY_RULE.pageList = RULE.pageList\\n    MY_RULE.pages = RULE.pages\\n    MY_RULE.params = RULE.params\\n}\\nMY_RULE.ua = RULE.ua\\nMY_RULE.title = RULE.title\\nMY_RULE.preRule = RULE.preRule\\nMY_RULE.last_chapter_rule = RULE.last_chapter_rule\\n\\nif (!isIndex) {\\n    if (pageTitle) setPageTitle(pageTitle)\\n    setLastChapterRule(MY_RULE.last_chapter_rule)\\n    MY_PARAMS = MY_RULE.params\\n}\\n// 预处理并初始化config\\nif (isIndex && MY_PAGE == 1) eval(MY_RULE.preRule)\\nlet _cfg = getMyVar('initConfig', '{}')\\nif (_cfg && _cfg.length > 0) {\\n    config = JSON.parse(_cfg)\\n}\\n\\n// 缓存页面规则，避免每个extra重复携带，导致数据太大\\nlet MyRuleStr = JSON.stringify(MY_RULE),\\n    ruleHash = md5(MyRuleStr)\\nif (!fileExist(ruleHash)) {\\n    saveFile(ruleHash, MyRuleStr)\\n    // addListener可能被重写且在这里强退程序会导致缓存残留，缓存规则MD5，回首页再去删\\n    let _ruleHashCache = JSON.parse(readFile(\\\"_ruleHashCache\\\") || \\\"[]\\\")\\n    _ruleHashCache.push(ruleHash)\\n    saveFile(\\\"_ruleHashCache\\\", JSON.stringify(_ruleHashCache))\\n}\\n\\n// 正文解析\\nif (MY_RULE.find_rule.startsWith('js:')) {\\n    setResult = function(el, param1, param2, param3) {\\n        param1 = CALLBACK_KEY\\n        param2 = MY_RULE\\n        param3 = MY_TYPE\\n        if (Array.isArray(el.data)) el = el.data;\\n        Array.prototype.push.apply(myCollection_el, el.map((v) => {\\n            let MY__RULE = {};\\n            v.col_type = v.col_type || MY_RULE.col_type\\n\\n            if (!v.url || ['rule', 'pics', 'toast', 'input', 'copy', 'editFile', 'x5', 'x5WebView', 'x5Play', 'web', 'select', 'x5Rule', 'webRule', 'download'].find((vv) => v.url.startsWith(vv + '://')) || ['x5_webview_single', 'input'].find((vv) => v.col_type == vv)) {\\n                return v\\n            } else if (v.url.includes('@rule=')) {\\n                let [_, url, rule] = v.url.match(/^([\\\\s\\\\S]*?)@rule=([\\\\s\\\\S]*)$/)\\n                v.url = url\\n                MY__RULE.detail_find_rule = rule\\n                MY__RULE.detail_col_type = MY_RULE.col_type\\n            } else if (v.url.startsWith('hiker://page/')) {\\n                if (v.url.includes('rule=') || (v.extra || {}).rule)\\n                    return v\\n                let [_, path, flag, params] = v.url.match(/^hiker:\\\\/\\\\/page\\\\/(.+?)(#.*?)?(?:\\\\?(.*))?$/),\\n                    subPage = MY_RULE.pageList.find((v) => v.path == path),\\n                    subUrl = (params || '').split('&').find((v) => v.startsWith('url='))\\n                v.url = subUrl ? subUrl.slice(4).replace(/？？/g, '?').replace(/＆＆/g, '&') : (v.extra || {}).url || 'hiker://empty' + flag + '?' + (params || '')\\n                MY__RULE.detail_find_rule = subPage.rule\\n                MY__RULE.detail_col_type = subPage.col_type\\n                MY__RULE.params = v.extra || {}\\n            } else if (v.url.includes('@lazyRule=')) {\\n                let reIndex = v.url.indexOf('.js:')\\n                if (reIndex >= 0) v.url = v.url.slice(0, reIndex) + '.js:\\\\nif(MY_RULE)Object.assign(MY_RULE, JSON.parse(readFile(\\\"' + ruleHash + '\\\")));' + v.url.slice(reIndex + 4)\\n                return v\\n            } else if (isIndex) {\\n                if (!MY_RULE.detail_find_rule || /hiker:\\\\/\\\\/(?!empty.+$)/.test(v.url)) return v\\n            } else {\\n                return v\\n            }\\n            v.extra = {\\n                url: (function(url) {\\n                    url = url.split(';')\\n                    return url.shift() + ';' + paramHandle(url, MY_RULE.ua, MY_RULE.url)\\n                })(v.url),\\n                RULE: MY__RULE,\\n                HASH: ruleHash,\\n                pageTitle: isIndex && v.title\\n            }\\n            v.url = 'hiker://page/frameLoad?rule=' + QING_TITLE\\n            return v\\n        }))\\n        method_setResult.invoke(javaContext, myCollection_el, param1, param2, param3)\\n    }\\n    setHomeResult = setResult\\n    setSearchResult = setResult\\n\\n    eval(MY_RULE.find_rule.slice(3))\\n} else {\\n    let [_, findRule, detailFindRule] = MY_RULE.find_rule.match(/^([\\\\s\\\\S]*?)(?:==>([\\\\s\\\\S]*))?$/)\\n    findRule = findRule.split(';')\\n    parseDomForArray(getResCode(), findRule.shift()).forEach((data) => {\\n        let [title, img, desc, url] = findRule.map((v, i) => {\\n                try {\\n                    if (v == '*') return ''\\n                    else v = (i == 1 || i == 3) ?\\n                        parseDom(data, v) :\\n                        parseDomForHtml(data, v)\\n                    if (i != 3) v = runCode(v)\\n                    return v\\n                } catch (e) { return '' }\\n            }),\\n            res = {\\n                title: title, url: url,\\n                desc: desc, img: img,\\n                col_type: MY_RULE.col_type\\n            }\\n        if (res.url) {\\n            if (res.url.includes('@lazyRule=')) {\\n                let reIndex = res.url.indexOf('.js:')\\n                if (reIndex >= 0) res.url = res.url.slice(0, reIndex) + '.js:\\\\nif(MY_RULE)Object.assign(MY_RULE, JSON.parse(readFile(\\\"' + ruleHash + '\\\")));' + res.url.slice(reIndex + 4)\\n            } else if (detailFindRule) {\\n                res.extra = {\\n                    url: (function(url) {\\n                        url = url.split(';')\\n                        return url.shift() + ';' + paramHandle(url, MY_RULE.ua, MY_RULE.url.split(';')[2])\\n                    })(url),\\n                    RULE: { detail_find_rule: detailFindRule },\\n                    HASH: ruleHash,\\n                    pageTitle: isIndex && title\\n                }\\n                res.url = 'hiker://page/frameLoad?rule=' + QING_TITLE\\n            } else if (MY_RULE.detail_find_rule) {\\n                res.extra = {\\n                    url: (function(url) {\\n                        url = url.split(';')\\n                        return url.shift() + ';' + paramHandle(url, MY_RULE.ua, MY_RULE.url)\\n                    })(url),\\n                    RULE: {},\\n                    HASH: ruleHash,\\n                    pageTitle: isIndex && title\\n                }\\n                res.url = 'hiker://page/frameLoad?rule=' + QING_TITLE\\n            }\\n        }\\n        myCollection_el.push(res)\\n    })\\n    setResult(myCollection_el)\\n}\\n\",\"group\":\"①轻合集\",\"ua\":\"auto\",\"preRule\":\"putMyVar('myCollection', MY_RULE.title);\\nputMyVar('remoteUrl', 'http://hiker.nokia.press/hikerule/rulelist.json?id=2812&auth=89444565-f0fe-59e1-84b0-465dddc9ca67');\",\"pages\":\"[{\\\"col_type\\\":\\\"text_1\\\",\\\"name\\\":\\\"ClassTab\\\",\\\"path\\\":\\\"ClassTab\\\",\\\"rule\\\":\\\"const ClassTab = function(classArray, params) {\\\\n    Object.assign(this, params)\\\\n    this.arr = classArray.map(v => this.init(v))\\\\n    this.sign = '$' + QING_TITLE + '_' + (this.name || '') + '_'\\\\n    this.color = this.color || '#12b668'\\\\n    this.boundary = this.boundary || 'blank_block'\\\\n}\\\\nClassTab.prototype = {\\\\n    constructor: ClassTab,\\\\n    load(el) {\\\\n        let folded = this.fold && getVar('fold_' + this.sign, '')\\\\n        if (this.arr.length > 1 && this.fold) el.push({\\\\n            title: '““””' + (folded ? '▶' : '▼').fontcolor('#049eff'),\\\\n            url: $('#noLoading#').lazyRule((sign, folded) => {\\\\n                putVar('fold_' + sign, { '': 'T', 'T': '' } [folded])\\\\n                refreshPage(false)\\\\n                return 'hiker://empty'\\\\n            }, this.sign, folded),\\\\n            col_type: 'scroll_button'\\\\n        })\\\\n        let arr = folded ? [this.arr[0]] : this.arr\\\\n        arr.forEach((v) => {\\\\n            let { id, class_name, class_url } = v,\\\\n            selected = JSON.stringify(this.getClass(id))\\\\n            class_name.forEach((name, i) => {\\\\n                let url = class_url[i],\\\\n                    now = JSON.stringify({ name: name, url: url })\\\\n                el.push({\\\\n                    title: selected == now ? '““””' + name.fontcolor(this.color).bold() : name,\\\\n                    url: selected == now ? 'hiker://empty' : $('#noLoading#').lazyRule((sign, id, now) => {\\\\n                        putVar(sign + id, now)\\\\n                        refreshPage(false)\\\\n                        return 'hiker://empty'\\\\n                    }, this.sign, id, now),\\\\n                    col_type: 'scroll_button'\\\\n                })\\\\n            })\\\\n            el.push({ col_type: this.boundary })\\\\n        })\\\\n    },\\\\n    init(classObject) {\\\\n        if (typeof classObject.class_name == 'string')\\\\n            classObject.class_name = classObject.class_name.split('&')\\\\n        if (typeof classObject.class_url == 'string')\\\\n            classObject.class_url = classObject.class_url.split('&').map((v) => v.trim())\\\\n        return classObject\\\\n    },\\\\n    push(classObject) {\\\\n        this.arr.push(this.init(classObject))\\\\n    },\\\\n    getClass(id) {\\\\n        let defaultClass = this.arr.find(item => item.id == id)\\\\n        defaultClass = JSON.stringify(defaultClass ? {\\\\n            name: defaultClass.class_name[0],\\\\n            url: defaultClass.class_url[0]\\\\n        } : { name:  'cannot find id: ' + id + ' in classTab: ' + this.sign, url: ''})\\\\n        return JSON.parse(getVar(this.sign + id, defaultClass))\\\\n    },\\\\n    setUrl(url) {\\\\n        return url.replace(/\\\\\\\\$\\\\\\\\{([^}]*)\\\\\\\\}/g, (_, id) => this.getClass(id).url)\\\\n    }\\\\n}\\\\n// 生成头部分类\\\\nconst fyAll = RULE.url.includes('fyAll')\\\\nlet tabHeader = []\\\\nif (RULE.class_name) tabHeader.push({\\\\n    id: fyAll ? 'fyAll' : 'fyclass',\\\\n    class_name: RULE.class_name,\\\\n    class_url: RULE.class_url\\\\n})\\\\nif (RULE.area_name) tabHeader.push({\\\\n    id: fyAll ? 'fyAll' : 'fyarea',\\\\n    class_name: RULE.area_name,\\\\n    class_url: RULE.area_url\\\\n})\\\\nif (RULE.year_name) tabHeader.push({\\\\n    id: fyAll ? 'fyAll' : 'fyyear',\\\\n    class_name: RULE.year_name,\\\\n    class_url: RULE.year_url\\\\n})\\\\nif (RULE.sort_name) tabHeader.push({\\\\n    id: fyAll ? 'fyAll' : 'fysort',\\\\n    class_name: RULE.sort_name,\\\\n    class_url: RULE.sort_url\\\\n})\\\\ntabHeader = new ClassTab(tabHeader, { name: RULE.title, fold: readFile('tabFold'), })\\\\n\\\"},{\\\"col_type\\\":\\\"icon_2_round\\\",\\\"name\\\":\\\"设置\\\",\\\"path\\\":\\\"Config\\\",\\\"rule\\\":\\\"js:\\\\naddListener('onClose', 'clearMyVar(\\\\\\\"sortFlag\\\\\\\");refreshPage()');\\\\nsetPageTitle('⚙ 轻合集设置 ⚙');\\\\nconst defaultDisTabModify = false; //默认禁用自定义分类关闭.就是开启自定义\\\\nconst QING_TITLE = getMyVar('myCollection');\\\\nlet data = $.require('hiker://page/dataLoad?rule=' + QING_TITLE)(true),\\\\n    el = [{\\\\n        title: '<b> 清除缓存，立即更新 <small> （基于远程仓库，不要频繁点击）',\\\\n        url: $('基于远程仓库，不要频繁点击，增加仓库压力\\\\\\\\n若为本地文件，则不会进行缓存，本功能也无效').confirm(() => {\\\\n            deleteCache(getMyVar('remoteUrl'))\\\\n            back(false)\\\\n            return 'toast://已更新'\\\\n        }),\\\\n        img: 'hiker://images/icon4',\\\\n        col_type: 'avatar'\\\\n    }],\\\\n    updateInterval = readFile('updateInterval') || '1',\\\\n    newWindow = readFile('newWindow'),\\\\n    tabFold = readFile('tabFold'),\\\\n    disTabModify = readFile('disTabModify'),\\\\n    disableCustom = readFile('disableCustom'),\\\\n    editMode = getMyVar('editMode', '启用/禁用');\\\\nif(disTabModify===''){\\\\n    saveFile('disTabModify', defaultDisTabModify+'');\\\\n    disTabModify = defaultDisTabModify;\\\\n}else if(/true|false/.test(disTabModify)){\\\\n    disTabModify = JSON.parse(disTabModify);\\\\n}\\\\nel.push({\\\\n    title: '  💡 更新频率: ' + (updateInterval == 0 ? '手动' : updateInterval + '天') + '  ',\\\\n    url: $(updateInterval, '输入更新间隔（天），为0则手动更新\\\\\\\\n本地文件链接无效').input(() => {\\\\n        saveFile('updateInterval', input)\\\\n        refreshPage()\\\\n        return 'hiker://empty'\\\\n    }),\\\\n    col_type: 'scroll_button'\\\\n}, {\\\\n    title: '  🖥 独立首页: ' + (newWindow ? '是' : '否') + '  ',\\\\n    url: $('#noLoading#').lazyRule((newWindow) => {\\\\n        saveFile('newWindow', newWindow ? '' : '1')\\\\n        refreshPage()\\\\n        return 'hiker://empty'\\\\n    }, newWindow),\\\\n    col_type: 'scroll_button'\\\\n}, {\\\\n    title: '  💠 分类折叠: ' + (tabFold ? '是' : '否') + '  ',\\\\n    url: $('#noLoading#').lazyRule((tabFold) => {\\\\n        saveFile('tabFold', tabFold ? '' : '1')\\\\n        refreshPage()\\\\n        return 'hiker://empty'\\\\n    }, tabFold),\\\\n    col_type: 'scroll_button'\\\\n}, {\\\\n    title: '  💠 分类自定义: ' + (disTabModify ? '否' : '是') + '  ',\\\\n    url: $('#noLoading#').lazyRule((disTabModify) => {\\\\n        saveFile('disTabModify', disTabModify ? 'false' : 'true');\\\\n        putMyVar('typeShow', '');\\\\n        refreshPage();\\\\n        return 'hiker://empty'\\\\n    }, disTabModify),\\\\n    col_type: 'scroll_button'\\\\n},{\\\\n    title: '  💼 备份恢复  ',\\\\n    url: $(['备份', '恢复'], 1).select((QING_TITLE, updateInterval, newWindow, tabFold, disableCustom) => {\\\\n        let url = getMyVar('remoteUrl')\\\\n        if (input == '备份') return $('hiker://files/tmp/' + QING_TITLE + '_backup.json', '输入备份路径')\\\\n            .input((url, updateInterval, newWindow, tabFold, disableCustom) => {\\\\n                let rules = request(url),\\\\n                    customData = readFile('customData')\\\\n                writeFile(input, JSON.stringify({\\\\n                    updateInterval: updateInterval,\\\\n                    newWindow: newWindow,\\\\n                    tabFold: tabFold,\\\\n                    disableCustom: disableCustom,\\\\n                    customData: customData,\\\\n                    rules: rules\\\\n                }))\\\\n                return 'toast://已备份'\\\\n            }, url, updateInterval, newWindow, tabFold, disableCustom)\\\\n        else return $('hiker://files/tmp/' + QING_TITLE + '_backup.json', '输入备份路径').input((url) => {\\\\n            let { updateInterval, newWindow, tabFold, disableCustom, customData, rules } = JSON.parse(request(input))\\\\n            saveFile('updateInterval', updateInterval)\\\\n            saveFile('newWindow', newWindow)\\\\n            saveFile('tabFold', tabFold)\\\\n            saveFile('disableCustom', disableCustom)\\\\n            saveFile('customData', customData)\\\\n            writeFile('hiker://files/libs/' + url + '.js', JSON.stringify(rules))\\\\n            refreshPage()\\\\n            return 'toast://已恢复，如果不想同步远程仓库，可以设置更新频率为手动'\\\\n        }, url)\\\\n    }, QING_TITLE, updateInterval, newWindow, tabFold, disableCustom),\\\\n    col_type: 'scroll_button'\\\\n}, {\\\\n    title: '““””<font color=\\\\\\\"#666666\\\\\\\"><small>特别鸣谢，小程序提供者：\\\\\\\\n' +\\\\n        data.reduce((self, v) => v.author ? self.concat(v.author.split('&')) : self, [])\\\\n            .filter((v, i, arr) => v && arr.indexOf(v) == i).join('、'),\\\\n    url: 'hiker://empty',\\\\n    col_type: 'text_center_1'\\\\n})\\\\n\\\\nel.push({ col_type: 'line' }, {\\\\n    title: '““””' + '📝'.small() + '&nbsp 轻合集自定义 &nbsp'.bold().fontcolor('#757575') + (disableCustom ? '❌' : '⭕').small(),\\\\n    url: $([(disableCustom ? '启用' : '禁用') + '合集自定义', '清除自定义数据'], 1).select(() => {\\\\n        if (input == '清除自定义数据') {\\\\n            deleteFile('customData')\\\\n        } else if (input == '启用合集自定义') {\\\\n            saveFile('disableCustom', '')\\\\n        } else {\\\\n            saveFile('disableCustom', '1')\\\\n            input += '\\\\\\\\n小程序启用/禁用、重新排序等操作均不会体现在首页小程序列表中'\\\\n        }\\\\n        refreshPage(false)\\\\n        return 'toast://已' + input\\\\n    }),\\\\n    col_type: 'text_center_1',\\\\n    extra: { lineVisible: false }\\\\n});\\\\n['启用/禁用', '重新排序', '更改图标', '导入海阔'].forEach((v) => {\\\\n    el.push({\\\\n        title: v == editMode ? '““””' + v.bold().fontcolor('#12b668') : v,\\\\n        url: v == editMode ? 'hiker://empty' : $('#noLoading#').lazyRule((v) => {\\\\n            putMyVar('editMode', v)\\\\n            refreshPage(false)\\\\n            return 'hiker://empty'\\\\n        }, v),\\\\n        col_type: 'scroll_button'\\\\n    })\\\\n})\\\\nJSON.parse(readFile('customData') || '[]').forEach((v, i) => {\\\\n    let d = { title: v.title, img: data[i].icon }\\\\n    switch (editMode) {\\\\n        case '启用/禁用':\\\\n            d.title = (v.visible ? '🟢  ' : '🔴  ') + d.title\\\\n            d.url = $('#noLoading#').lazyRule((i) => {\\\\n                let rules = JSON.parse(readFile('customData') || '[]')\\\\n                rules[i].visible = !rules[i].visible\\\\n                saveFile('customData', JSON.stringify(rules))\\\\n                refreshPage(false)\\\\n                return 'hiker://empty'\\\\n            }, i)\\\\n            break\\\\n        case '重新排序':\\\\n            let sortFlag = parseInt(getMyVar('sortFlag', '-1'))\\\\n            d.title = (sortFlag == i ? '🔃  ' : '') + d.title\\\\n            if (sortFlag == -1)\\\\n                d.url = $('#noLoading#').lazyRule((i) => {\\\\n                    putMyVar('sortFlag', i.toString())\\\\n                    refreshPage(false)\\\\n                    return 'toast://选择要移动到的位置'\\\\n                }, i)\\\\n            else\\\\n                d.url = $('#noLoading#').lazyRule((oldIndex, newIndex) => {\\\\n                    let rules = JSON.parse(readFile('customData') || '[]')\\\\n                    rules.splice(newIndex, 0, rules.splice(oldIndex, 1)[0])\\\\n                    saveFile('customData', JSON.stringify(rules))\\\\n                    putMyVar('sortFlag', '-1')\\\\n                    refreshPage(false)\\\\n                    return 'hiker://empty'\\\\n                }, sortFlag, i)\\\\n            break\\\\n        case '更改图标':\\\\n            d.url = $(v.icon || '', '输入新图标地址或颜色代码：').input((i) => {\\\\n                let rules = JSON.parse(readFile('customData') || '[]')\\\\n                if (input)\\\\n                    rules[i].icon = input\\\\n                else\\\\n                    delete rules[i].icon\\\\n                saveFile('customData', JSON.stringify(rules))\\\\n                refreshPage(false)\\\\n                return 'hiker://empty'\\\\n            }, i)\\\\n            break\\\\n        case '导入海阔':\\\\n            d.url = 'rule://' + base64Encode(JSON.stringify(data[i]))\\\\n            break\\\\n    }\\\\n    el.push(d)\\\\n})\\\\nsetResult(el)\\\\n\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"页面载入\\\",\\\"path\\\":\\\"frameLoad\\\",\\\"rule\\\":\\\"js:\\\\nconst QING_TITLE = getMyVar('myCollection')\\\\nfunction runCode(rule) {\\\\n    try {\\\\n        let [input, code] = rule.split('.js:')\\\\n        return code ? eval(code) : rule\\\\n    } catch (e) { return rule }\\\\n}\\\\nlet myCollection_el = [],\\\\n    { RULE, HASH, isIndex, pageTitle } = MY_PARAMS\\\\nRULE = isIndex ?\\\\n    $.require('hiker://page/dataLoad?rule=' + QING_TITLE)().find((v) => v.title == RULE.title) :\\\\n    Object.assign(JSON.parse(readFile(HASH)), RULE)\\\\n\\\\neval(JSON.parse(fetch('hiker://page/preFunc?rule=' + QING_TITLE)).rule)\\\\neval(JSON.parse(fetch('hiker://page/urlParse?rule=' + QING_TITLE)).rule)\\\\n\\\\nif (isIndex) {\\\\n    // 计数已打开小程序，防止独立页面时轻合集出发关闭导致页面规则缓存清理\\\\n    let openedIndex = parseInt(getMyVar('openedIndex', '0'))\\\\n    putMyVar('openedIndex', String(openedIndex + 1))\\\\n    addListener = function(param0, param1, param2) {\\\\n        param2 = CALLBACK_KEY;\\\\n        if (param0 == 'onClose') param1 += ';' + $.toString(() => {\\\\n            let openedIndex = parseInt(getMyVar('openedIndex', '0'))\\\\n            putMyVar('openedIndex', String(openedIndex - 1))\\\\n        })\\\\n        method_addListener.invoke(javaContext, param0, param1, param2)\\\\n    }\\\\n    addListener('onClose', '')\\\\n    if (MY_PAGE == 1) {\\\\n        // 加载ClassTab组件\\\\n        eval(JSON.parse(fetch('hiker://page/ClassTab?rule=' + QING_TITLE)).rule)\\\\n        tabHeader.load(myCollection_el)\\\\n        if (RULE.search_url) myCollection_el.push({\\\\n            title: \\\\\\\"搜索\\\\\\\",\\\\n            desc: \\\\\\\"搜你想要的...\\\\\\\",\\\\n            url: '\\\\\\\"hiker://search?s=\\\\\\\"+input',\\\\n            extra: {\\\\n                rules: $.toString((QING_TITLE, title) => {\\\\n                    let rules = $.require('hiker://page/dataLoad?rule=' + QING_TITLE)()\\\\n                    rules = [rules.find((v) => v.title == title)]\\\\n                    return JSON.stringify(rules)\\\\n                }, QING_TITLE, RULE.title),\\\\n                defaultValue: getMyVar('searchKey', ''),\\\\n                onChange: \\\\\\\"putMyVar('searchKey',input)\\\\\\\"\\\\n            },\\\\n            col_type: \\\\\\\"input\\\\\\\",\\\\n        })\\\\n    }\\\\n    // 处理MY_RULE\\\\n    MY_RULE.url = RULE.url\\\\n    MY_RULE.col_type = RULE.col_type\\\\n    MY_RULE.detail_col_type = RULE.detail_col_type\\\\n    MY_RULE.find_rule = RULE.find_rule\\\\n    MY_RULE.detail_find_rule = RULE.detail_find_rule\\\\n    MY_RULE.pageList = JSON.parse(RULE.pages || '[]')\\\\n    MY_RULE.pages = JSON.stringify(MY_RULE.pageList)\\\\n    MY_RULE.params = {}\\\\n} else {\\\\n    MY_RULE.url = MY_PARAMS.url\\\\n    MY_RULE.col_type = RULE.detail_col_type\\\\n    MY_RULE.find_rule = RULE.detail_find_rule\\\\n    MY_RULE.pageList = RULE.pageList\\\\n    MY_RULE.pages = RULE.pages\\\\n    MY_RULE.params = RULE.params\\\\n}\\\\nMY_RULE.ua = RULE.ua\\\\nMY_RULE.title = RULE.title\\\\nMY_RULE.preRule = RULE.preRule\\\\nMY_RULE.last_chapter_rule = RULE.last_chapter_rule\\\\n\\\\nif (!isIndex) {\\\\n    if (pageTitle) setPageTitle(pageTitle)\\\\n    setLastChapterRule(MY_RULE.last_chapter_rule)\\\\n    MY_PARAMS = MY_RULE.params\\\\n}\\\\n// 预处理并初始化config\\\\nif (isIndex && MY_PAGE == 1) eval(MY_RULE.preRule)\\\\nlet _cfg = getMyVar('initConfig', '{}')\\\\nif (_cfg && _cfg.length > 0) {\\\\n    config = JSON.parse(_cfg)\\\\n}\\\\n\\\\n// 缓存页面规则，避免每个extra重复携带，导致数据太大\\\\nlet MyRuleStr = JSON.stringify(MY_RULE),\\\\n    ruleHash = md5(MyRuleStr)\\\\nif (!fileExist(ruleHash)) {\\\\n    saveFile(ruleHash, MyRuleStr)\\\\n    // addListener可能被重写且在这里强退程序会导致缓存残留，缓存规则MD5，回首页再去删\\\\n    let _ruleHashCache = JSON.parse(readFile(\\\\\\\"_ruleHashCache\\\\\\\") || \\\\\\\"[]\\\\\\\")\\\\n    _ruleHashCache.push(ruleHash)\\\\n    saveFile(\\\\\\\"_ruleHashCache\\\\\\\", JSON.stringify(_ruleHashCache))\\\\n}\\\\n\\\\n// 正文解析\\\\nif (MY_RULE.find_rule.startsWith('js:')) {\\\\n    setResult = function(el, param1, param2, param3) {\\\\n        param1 = CALLBACK_KEY\\\\n        param2 = MY_RULE\\\\n        param3 = MY_TYPE\\\\n        if (Array.isArray(el.data)) el = el.data;\\\\n        Array.prototype.push.apply(myCollection_el, el.map((v) => {\\\\n            let MY__RULE = {};\\\\n            v.col_type = v.col_type || MY_RULE.col_type\\\\n\\\\n            if (!v.url || ['rule', 'pics', 'toast', 'input', 'copy', 'editFile', 'x5', 'x5WebView', 'x5Play', 'web', 'select', 'x5Rule', 'webRule', 'download'].find((vv) => v.url.startsWith(vv + '://')) || ['x5_webview_single', 'input'].find((vv) => v.col_type == vv)) {\\\\n                return v\\\\n            } else if (v.url.includes('@rule=')) {\\\\n                let [_, url, rule] = v.url.match(/^([\\\\\\\\s\\\\\\\\S]*?)@rule=([\\\\\\\\s\\\\\\\\S]*)$/)\\\\n                v.url = url\\\\n                MY__RULE.detail_find_rule = rule\\\\n                MY__RULE.detail_col_type = MY_RULE.col_type\\\\n            } else if (v.url.startsWith('hiker://page/')) {\\\\n                if (v.url.includes('rule=') || (v.extra || {}).rule)\\\\n                    return v\\\\n                let [_, path, flag, params] = v.url.match(/^hiker:\\\\\\\\/\\\\\\\\/page\\\\\\\\/(.+?)(#.*?)?(?:\\\\\\\\?(.*))?$/),\\\\n                    subPage = MY_RULE.pageList.find((v) => v.path == path),\\\\n                    subUrl = (params || '').split('&').find((v) => v.startsWith('url='))\\\\n                v.url = subUrl ? subUrl.slice(4).replace(/？？/g, '?').replace(/＆＆/g, '&') : (v.extra || {}).url || 'hiker://empty' + flag + '?' + (params || '')\\\\n                MY__RULE.detail_find_rule = subPage.rule\\\\n                MY__RULE.detail_col_type = subPage.col_type\\\\n                MY__RULE.params = v.extra || {}\\\\n            } else if (v.url.includes('@lazyRule=')) {\\\\n                let reIndex = v.url.indexOf('.js:')\\\\n                if (reIndex >= 0) v.url = v.url.slice(0, reIndex) + '.js:\\\\\\\\nif(MY_RULE)Object.assign(MY_RULE, JSON.parse(readFile(\\\\\\\"' + ruleHash + '\\\\\\\")));' + v.url.slice(reIndex + 4)\\\\n                return v\\\\n            } else if (isIndex) {\\\\n                if (!MY_RULE.detail_find_rule || /hiker:\\\\\\\\/\\\\\\\\/(?!empty.+$)/.test(v.url)) return v\\\\n            } else {\\\\n                return v\\\\n            }\\\\n            v.extra = {\\\\n                url: (function(url) {\\\\n                    url = url.split(';')\\\\n                    return url.shift() + ';' + paramHandle(url, MY_RULE.ua, MY_RULE.url)\\\\n                })(v.url),\\\\n                RULE: MY__RULE,\\\\n                HASH: ruleHash,\\\\n                pageTitle: isIndex && v.title\\\\n            }\\\\n            v.url = 'hiker://page/frameLoad?rule=' + QING_TITLE\\\\n            return v\\\\n        }))\\\\n        method_setResult.invoke(javaContext, myCollection_el, param1, param2, param3)\\\\n    }\\\\n    setHomeResult = setResult\\\\n    setSearchResult = setResult\\\\n\\\\n    eval(MY_RULE.find_rule.slice(3))\\\\n} else {\\\\n    let [_, findRule, detailFindRule] = MY_RULE.find_rule.match(/^([\\\\\\\\s\\\\\\\\S]*?)(?:==>([\\\\\\\\s\\\\\\\\S]*))?$/)\\\\n    findRule = findRule.split(';')\\\\n    parseDomForArray(getResCode(), findRule.shift()).forEach((data) => {\\\\n        let [title, img, desc, url] = findRule.map((v, i) => {\\\\n                try {\\\\n                    if (v == '*') return ''\\\\n                    else v = (i == 1 || i == 3) ?\\\\n                        parseDom(data, v) :\\\\n                        parseDomForHtml(data, v)\\\\n                    if (i != 3) v = runCode(v)\\\\n                    return v\\\\n                } catch (e) { return '' }\\\\n            }),\\\\n            res = {\\\\n                title: title, url: url,\\\\n                desc: desc, img: img,\\\\n                col_type: MY_RULE.col_type\\\\n            }\\\\n        if (res.url) {\\\\n            if (res.url.includes('@lazyRule=')) {\\\\n                let reIndex = res.url.indexOf('.js:')\\\\n                if (reIndex >= 0) res.url = res.url.slice(0, reIndex) + '.js:\\\\\\\\nif(MY_RULE)Object.assign(MY_RULE, JSON.parse(readFile(\\\\\\\"' + ruleHash + '\\\\\\\")));' + res.url.slice(reIndex + 4)\\\\n            } else if (detailFindRule) {\\\\n                res.extra = {\\\\n                    url: (function(url) {\\\\n                        url = url.split(';')\\\\n                        return url.shift() + ';' + paramHandle(url, MY_RULE.ua, MY_RULE.url.split(';')[2])\\\\n                    })(url),\\\\n                    RULE: { detail_find_rule: detailFindRule },\\\\n                    HASH: ruleHash,\\\\n                    pageTitle: isIndex && title\\\\n                }\\\\n                res.url = 'hiker://page/frameLoad?rule=' + QING_TITLE\\\\n            } else if (MY_RULE.detail_find_rule) {\\\\n                res.extra = {\\\\n                    url: (function(url) {\\\\n                        url = url.split(';')\\\\n                        return url.shift() + ';' + paramHandle(url, MY_RULE.ua, MY_RULE.url)\\\\n                    })(url),\\\\n                    RULE: {},\\\\n                    HASH: ruleHash,\\\\n                    pageTitle: isIndex && title\\\\n                }\\\\n                res.url = 'hiker://page/frameLoad?rule=' + QING_TITLE\\\\n            }\\\\n        }\\\\n        myCollection_el.push(res)\\\\n    })\\\\n    setResult(myCollection_el)\\\\n}\\\\n\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"数据载入\\\",\\\"path\\\":\\\"dataLoad\\\",\\\"rule\\\":\\\"$.exports = function(showAll) {\\\\n    let url = getMyVar('remoteUrl'),\\\\n        data = []\\\\n    if (url.startsWith('hiker://') || url.startsWith('file://')) {\\\\n        // 如果为本地文件则不进行缓存\\\\n        try {\\\\n            let oriData = fetch(url)\\\\n            if (url.startsWith('hiker://page/'))\\\\n                oriData = JSON.parse(oriData).rule\\\\n            data = JSON.parse(oriData)\\\\n        } catch (e) {}\\\\n    } else {\\\\n        // 获取远程数据，检查间隔默认一天\\\\n        let interval = parseInt(readFile('updateInterval') || '1'),\\\\n            oldData = fetch('hiker://files/libs/' + md5(url) + '.js'),\\\\n            remoteData = fetchCache(url, 24 * interval)\\\\n        try { remoteData = JSON.parse(remoteData) } catch(e) {}\\\\n        if(!Array.isArray(remoteData)) remoteData = []\\\\n        if (remoteData.length < 3) {\\\\n            log('未获取到数据')\\\\n            if (oldData) writeFile('hiker://files/libs/' + md5(url) + '.js', oldData)\\\\n            data = JSON.parse(oldData || '[]')\\\\n        } else {\\\\n            log('已获取到数据')\\\\n            data = remoteData\\\\n        }\\\\n    }\\\\n    data = data.filter((v) => { return v.title != getMyVar('myCollection') && !(v.author || '').includes('轻合集生成器') })\\\\n    if (readFile('disableCustom')) return data\\\\n    else { // 写入自定义数据\\\\n        let customData = JSON.parse(readFile('customData') || '[]'),\\\\n            rewriteData = []\\\\n        customData = customData.reduce((self, v) => {\\\\n            let index = data.findIndex((vv) => v.title == vv.title)\\\\n            if (index >= 0) {\\\\n                self.push(v)\\\\n                let rule = data.splice(index, 1)[0]\\\\n                if (showAll || v.visible)\\\\n                    rewriteData.push(Object.assign(rule, v))\\\\n            }\\\\n            return self\\\\n        }, [])\\\\n        data.forEach((v) => customData.push({ title: v.title, visible: true }))\\\\n        saveFile('customData', JSON.stringify(customData))\\\\n        return rewriteData.concat(data)\\\\n    }\\\\n}\\\\n\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"函数重写\\\",\\\"path\\\":\\\"preFunc\\\",\\\"rule\\\":\\\"// 防止require多次运行\\\\nlet rCache = {}\\\\nrequire = function(param0, param1, param2, param3, param4) {\\\\n    if (!param0 || rCache[param0] != null) {\\\\n        return\\\\n    }\\\\n    rCache[param0] = 1\\\\n    param2 = param2 || 0\\\\n    param3 = MY_TICKET\\\\n    param4 = eval\\\\n    return method_require.invoke(javaContext, param0, param1, param2, param3, param4)\\\\n}\\\\nrequireCache = function(param0, param1, param2, param3, param4, param5) {\\\\n    if (!param0 || rCache[param0] != null) {\\\\n        return\\\\n    }\\\\n    rCache[param0] = 1\\\\n    param3 = param3 || 0\\\\n    param4 = MY_TICKET\\\\n    param5 = eval\\\\n    return method_requireCache.invoke(javaContext, param0, param1, param2, param3, param4, param5)\\\\n}\\\\nrc = requireCache\\\\n\\\\n// 最新章节规则注入预处理代码\\\\nsetLastChapterRule = function(param0) {\\\\n    if (!param0) return\\\\n    if (param0.startsWith(\\\\\\\"js:\\\\\\\") && MY_RULE.preRule) {\\\\n        param0 = 'js:\\\\\\\\ntry{eval(JSON.parse(fetch(\\\\\\\"hiker://page/preFunc?rule=' + QING_TITLE + '\\\\\\\")).rule);\\\\\\\\\\\\n            eval(base64Decode(\\\\\\\"' + base64Encode(MY_RULE.preRule) + '\\\\\\\"));\\\\\\\\\\\\n            let _cfg = getMyVar(\\\\\\\"initConfig\\\\\\\", \\\\\\\"{}\\\\\\\");\\\\\\\\\\\\n            if (_cfg && _cfg.length>0) {config = JSON.parse(_cfg)}}catch(e){log(e.message)}\\\\\\\\n;' +\\\\n            param0.slice(3)\\\\n    }\\\\n    method_setLastChapterRule.invoke(javaContext, param0);\\\\n}\\\\n\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"链接处理\\\",\\\"path\\\":\\\"urlParse\\\",\\\"rule\\\":\\\"// 首页链接替换分类\\\\nfunction indexUrl(param) {\\\\n    function runCode(rule) {\\\\n        try {\\\\n            let [input, code] = rule.split('.js:')\\\\n            return code ? eval(code) : rule\\\\n        } catch (e) { return rule }\\\\n    }\\\\n    let { RULE, pageNum, QING_TITLE } = JSON.parse(param.split('###')[1])\\\\n    RULE = JSON.parse(base64Decode(RULE))\\\\n    pageNum = parseInt(pageNum)\\\\n    let url = RULE.url,\\\\n        tabHeader = []\\\\n\\\\n    eval(JSON.parse(fetch('hiker://page/ClassTab?rule=' + QING_TITLE)).rule)\\\\n    url = tabHeader.setUrl(fyAll ? url.replace(/fyAll/g, '$${fyAll}') : url.replace(/fy(class|area|year|sort)/g, '$${fy$1}'))\\\\n    url = url.replace(/fypage(?:@(-?\\\\\\\\d+)@)?(?:\\\\\\\\*(\\\\\\\\d+)@)?/g, (_, start, space) => parseInt(start || 0) + 1 + (pageNum - 1) * parseInt(space || 1))\\\\n    url = /^([\\\\\\\\s\\\\\\\\S]*?)(?:\\\\\\\\[firstPage=([\\\\\\\\s\\\\\\\\S]*?)\\\\\\\\])?(?:(\\\\\\\\.js:[\\\\\\\\s\\\\\\\\S]*?))?$/.exec(url)\\\\n    if (pageNum == 1 && url[2]) url[1] = url[2]\\\\n    if (url[3] && !url[1].includes('.js:')) url[1] += url[3]\\\\n    return runCode(url[1])\\\\n}\\\\n// 链接参数处理\\\\nfunction paramHandle(urlParam, ua, urlTmp) {\\\\n    let charset, UserAgent\\\\n    try { // 链接的编码和ua应该是首先继承首页链接\\\\n        [, , charset, UserAgent] = urlTmp.split(';')\\\\n        UserAgent = UserAgent.match(/^{(.*)}$/)[1].split('&&').find((v) => v.startsWith('User-Agent@'))\\\\n    } catch (e) {}\\\\n    urlParam[0] = urlParam[0] || 'GET'\\\\n    urlParam[1] = urlParam[1] || charset || 'UTF-8'\\\\n    try {\\\\n        urlParam[2] = urlParam[2].match(/^{(.*)}$/)[1].split('&&')\\\\n    } catch (e) { urlParam[2] = [] }\\\\n    // 添加全局UA\\\\n    if (!urlParam[2].some((v) => v.startsWith('User-Agent@'))) {\\\\n        if (UserAgent) urlParam[2].push(UserAgent)\\\\n        else if (ua == 'pc')\\\\n            urlParam[2].push('User-Agent@' + PC_UA.replace(/;/g, '；；').replace(/\\\\\\\\?/, '？？'))\\\\n        else if (ua == 'mobile')\\\\n            urlParam[2].push('User-Agent@' + MOBILE_UA.replace(/;/g, '；；').replace(/\\\\\\\\?/, '？？'))\\\\n    }\\\\n    urlParam[2] = '{' + urlParam[2].join('&&') + '}'\\\\n    return urlParam.join(';')\\\\n}\\\\n\\\"},{\\\"name\\\":\\\"仓库工具\\\",\\\"path\\\":\\\"tools\\\",\\\"rule\\\":\\\"js:\\\\n$.exports.range = function(m, n) {\\\\n    return Math.floor(Math.random() * (m - n + 1) + n);\\\\n}\\\\n$.exports.color = function(text, color) {\\\\n    text += \\\\\\\"\\\\\\\";\\\\n    if (text.indexOf(\\\\\\\"““””\\\\\\\") === 0) {\\\\n        text.replace(\\\\\\\"““””\\\\\\\", \\\\\\\"\\\\\\\");\\\\n    }\\\\n    return \\\\\\\"““””<font color='\\\\\\\" + color + \\\\\\\"'>\\\\\\\" + text + \\\\\\\"</font>\\\\\\\";\\\\n}\\\\nfunction htmlTag(tag, text) {\\\\n    text += \\\\\\\"\\\\\\\";\\\\n    if (text.indexOf(\\\\\\\"““””\\\\\\\") === 0) {\\\\n        text.replace(\\\\\\\"““””\\\\\\\", \\\\\\\"\\\\\\\");\\\\n    }\\\\n    return \\\\\\\"““””\\\\\\\" + \\\\\\\"<\\\\\\\" + tag + \\\\\\\">\\\\\\\" + text + \\\\\\\"</\\\\\\\" + tag + \\\\\\\">\\\\\\\";\\\\n\\\\n}\\\\n\\\\nfunction getNowFormatDate() {\\\\n            let date = new Date();\\\\n            let seperator1 = \\\\\\\"-\\\\\\\";\\\\n            let seperator2 = \\\\\\\":\\\\\\\";\\\\n            let month = date.getMonth() + 1;\\\\n            let strDate = date.getDate();\\\\n            let strHours = date.getHours();\\\\n            let strMinutes = date.getMinutes();\\\\n            let strSeconds = date.getSeconds()+1;\\\\n            if (month >= 1 && month <= 9) {\\\\n                month = \\\\\\\"0\\\\\\\" + month\\\\n            }\\\\n            if (strDate >= 0 && strDate <= 9) {\\\\n                strDate = \\\\\\\"0\\\\\\\" + strDate\\\\n            }\\\\n            if (strHours >= 0 && strHours <= 9) {\\\\n                strHours = \\\\\\\"0\\\\\\\" + strHours\\\\n            }\\\\n            if (strMinutes >= 0 && strMinutes <= 9) {\\\\n                strMinutes = \\\\\\\"0\\\\\\\" + strMinutes\\\\n            }\\\\n            if (strSeconds >= 0 && strSeconds <= 9) {\\\\n                strSeconds = \\\\\\\"0\\\\\\\" + strSeconds\\\\n            }\\\\n            //let currentdate = date.getFullYear() + seperator1 + month + seperator1 + strDate + \\\\\\\" \\\\\\\" + strHours + seperator2 + strMinutes + seperator2 + strSeconds;\\\\n            let currentdate = (date.getFullYear()-2020)+''+ month +''+ strDate +''+ strHours+'' + strMinutes +''+ Math.ceil(strSeconds/7);\\\\n            return parseInt(currentdate)\\\\n        }\\\\n$.exports.getNowFormatDate = getNowFormatDate;\\\\n$.exports.htmlTag = htmlTag;\\\\n$.exports.small = function(text) {\\\\n    return htmlTag(\\\\\\\"small\\\\\\\", text);\\\\n}\\\\n$.exports.unique2 = function unique2(array){\\\\n    return Array.from(new Set(array));\\\\n}\\\\n$.exports.strDeal = function strDeal(str){\\\\n    str = str.split('');\\\\n    str = str.filter(e => (e >= 0 && e <= 9) || (e >= 'a' && e <= 'z') || (e >= 'A' && e <= 'Z') || (e >= '\\\\\\\\u4e00' && e <= '\\\\\\\\u9fa5'));\\\\n    str = str.join('');\\\\n    return str\\\\n}\\\"}]\",\"proxy\":\"\"}","picUrl":"https://lanmeiguojiang.com/tubiao/ke/145.png","title":"随机装备.dz"}