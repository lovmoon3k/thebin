using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class WarpTo : MonoBehaviour
{
    public LocalPlayerData PlayerData;
    public float WarpSpeed;
    public GameObject[] WarpPoints;
    public GameObject LocalPlayer;
    public GameObject TargetPos;
    public Vector3 LocalPlayerPos;
    private PlayerMovementSP PlayerMovement;
    public bool isWarping;
    public bool isAlinged;
    public bool isAlingedDone;
    // Start is called before the first frame update
    void Start()
    {

        // Get WarpPoints of Scene
        WarpPoints = GameObject.FindGameObjectsWithTag("WarpPoint");

        //if(isLocalPlayer){}
        LocalPlayer = GameObject.FindGameObjectWithTag("Player");
    }

    private void FixedUpdate()
    {
        LocalPlayerPos.x = PlayerData.x_pos;
        LocalPlayerPos.y = PlayerData.y_pos;
        LocalPlayerPos.z = PlayerData.z_pos;
        if (isAlinged)
        {
            float AlignSpeed = PlayerMovement.AlignSpeed;
            Quaternion lookRotation = Quaternion.LookRotation((TargetPos.transform.position - LocalPlayer.transform.position).normalized);
            LocalPlayer.transform.rotation = Quaternion.Slerp(LocalPlayer.transform.rotation, lookRotation, AlignSpeed * Time.deltaTime);
            isAlingedDone = true;
        }
        if (isWarping && isAlingedDone)
        {
            float step = WarpSpeed * Time.deltaTime;
            LocalPlayer.transform.position = Vector3.MoveTowards(LocalPlayer.transform.position, TargetPos.transform.position, step);
            WarpSpeed += 50;
            if (LocalPlayer.transform.position == TargetPos.transform.position)
            {
                isWarping = false;
                isAlinged = false;
                isAlingedDone = true;
            }
        }
    }

    public void WarpPlayerToPoint()
    {
        PlayerMovement = LocalPlayer.GetComponent<PlayerMovementSP>();
        isAlinged = true;

        // Move Player to TargetPosition
        isWarping = true;
    }

    // Bookmark System #Soon
    public void CreateWarpPoint()
    {

    }

}
