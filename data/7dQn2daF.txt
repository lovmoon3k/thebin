#include <algorithm>
#include <iostream>
#include <vector>
#include <string>
#include <numeric>
#include <set>
#include <utility>
#include <map>
#include <optional>

using namespace std;

template <typename Iterator>
class IteratorRange {
public:
    IteratorRange(const Iterator begin, const Iterator end) : first(begin), last(end) {}

    Iterator begin() const {
        return first;
    }

    Iterator end() const {
        return last;
    }

private:
    const Iterator first, last;
};


optional<string> FindPopularName(const map<string, int>& Names) {

    if (Names.empty()) {
        return nullopt;
    }
    else {
        auto pr = max_element(Names.begin(), Names.end(), [](const auto& x, const auto& y) {
            return x.second < y.second;
            });
        if (pr->second != 1) {

            return pr->first;
        }
        return Names.begin()->first;
    }
}

vector<int> PrefixSum(vector<int>& sorted_by_income) {
    vector<int> ans(sorted_by_income.size() + 1, 0);
    for (int i = 1; i < sorted_by_income.size() + 1; ++i) {
        ans[i] = ans[i - 1] + sorted_by_income[i - 1];
    }
    return ans;
}

struct StatsData {
    optional<string> NameMan;
    optional<string> NameWomen;
    multiset<int> sorted_by_age;
    vector<int> prefix_sum_by_sorted_by_income;
};

StatsData ReadPeople(istream& input) {
    int count;
    input >> count;

    map<string, int> NameWomenToCount;
    map<string, int> NameManToCount;
    multiset<int> sorted_by_age;
    vector<int> sorted_by_income;


    for (int i = 0; i < count; ++i) {
        char gender;
        string name;
        int age, income;
        bool is_male;

        input >> name >> age >> income >> gender;

        sorted_by_age.insert(age);
        sorted_by_income.push_back(income);

        is_male = (gender == 'M');
        if (is_male) {
            ++NameManToCount[name];
        }
        else {
            ++NameWomenToCount[name];
        }

    }

    optional<string> NameMan = FindPopularName(NameManToCount);
    optional<string> NameWomen = FindPopularName(NameWomenToCount);

    sort(sorted_by_income.rbegin(), sorted_by_income.rend());

    vector<int> prefix_sum_by_sorted_by_income = PrefixSum(sorted_by_income);

    return { NameMan, NameWomen, sorted_by_age, prefix_sum_by_sorted_by_income };
}


int main() {

    auto [NameMan, NameWomen, sorted_by_age, prefix_sum_by_sorted_by_income] = ReadPeople(cin);


    for (string command; cin >> command; ) {

        if (command == "AGE") {

            int adult_age;
            cin >> adult_age;

            auto adult_begin = sorted_by_age.lower_bound(adult_age);

            cout << "There are " << distance(adult_begin, end(sorted_by_age))
                << " adult people for maturity age " << adult_age << '\n';
        }

        else if (command == "WEALTHY") {
            int count;
            cin >> count;

            cout << "Top-" << count << " people have total income " << prefix_sum_by_sorted_by_income[count] << '\n';
        }

        else if (command == "POPULAR_NAME") {
            char gender;
            cin >> gender;

            optional<string> most_popular_name = (gender == 'M') ? NameMan: NameWomen;

            if (most_popular_name) {
                cout << "Most popular name among people of gender " << gender << " is "
                    << *most_popular_name << '\n';
            }
            else {
                cout << "No people of gender " << gender;
            }

        }
    }
}