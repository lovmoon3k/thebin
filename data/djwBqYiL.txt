    double diff = stop - start;
    double intDiff;
    double fractDiff = std::modf(diff, &intDiff); //разделяет целую и дробные части
    if (intDiff != 0)
    {
        int numOfDigDiff = numOfDigits((int)intDiff); //число цифр в числе
        start = floor(start / (pow(10, numOfDigDiff-1) / 2.0)) * (pow(10, numOfDigDiff-1) / 2.0); //floor(x) - ближайшее целое, меньшее, чем х
        double newDiff = stop - start;
        numOfDigDiff = numOfDigits((int)newDiff);
        newDiff = ceil(newDiff /  (pow(10, numOfDigDiff-1) / 2.0)) * (pow(10, numOfDigDiff-1) / 2.0); //ceil(x) - ближайшее целое, большее, чем х
        stop = start + newDiff;
    } else {
        int numOfZeroesDiff = numOfZeroesInFract(fractDiff);
        start = floor(start * (pow(10, numOfZeroesDiff+1) / 2.0)) / (pow(10, numOfZeroesDiff+1) / 2.0);
        double newDiff = stop - start;
        numOfZeroesDiff = numOfZeroesInFract(newDiff);
        newDiff = ceil(newDiff *  (pow(10, numOfZeroesDiff+1) / 2.0)) / (pow(10, numOfZeroesDiff+1) / 2.0);
        stop = start + newDiff;
    }