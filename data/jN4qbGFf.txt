Example of how to make a rand function.

-----------------------------------------------------
In computer programming computers follow logic.
this means an actual "random" number is theoretically impossible.

there are substitutes on linux like /dev/rand but these still follow some psudeo style logic

Therefore there are _ requirements in a psudeo random number generator
 1. store a value and change  it based upon its self or another static variable
 2. usually refrain from addition and subtraction because of the 32bit systems memory size limit (uint32_t)
 3. tested and spread out generation patern
-----------------------------------------------------
  Example 1. xor with  unsigned data (> 0)
static unsigned int x = 0, y = 0, z = 0, w = 0;
static unsigned int rand_cmwc(void)
{
    //seed our generator if we ever get a 0... just basic precautions
    if(x == 0 || y == 0 || z == 0 || w == 0)
    {
        x = time(NULL);
        y = (getpid() ^ 69) / time(NULL) + 1337;
        z = clock();
        w = z ^ y;
    }

    register unsigned int t = x;  // manipulate the old variable in T so we cant get the same answer ROFL
    t ^= t << 11;
    t ^= t >> 8;
    x = y; // reset old variable
    y = z; // shift z
    z = w; // zhift w
    w ^= w >> 19;  // bit shift w 
    w ^= t; // old variable after we manupulate it plus another old variable aka W 
    
    // ret = w = (x & << 11 & >> 8)); x is an old value then replace x with our olther old values
    
    return w;
}
-----------------------------------------------------
	Example 2. (strict size 32bits....) xor with  unsigned data (> 0)
#include <stdint.h>
static uint32_t x = 0, y = 0, z = 0, w = 0;
static uint32_t rand_cmwc(void)
{
    
	//seed our generator if we ever get a 0... just basic precautions
    if(x == 0 || y == 0 || z == 0 || w == 0)
    {
        x = time(NULL);
        y = (getpid() ^ 69) / time(NULL) + 1337;
        z = clock();
        w = z ^ y;
    }

    register uint32_t t = x;  // manipulate the old variable in T so we cant get the same answer ROFL
    t ^= t << 11;
    t ^= t >> 8;
    x = y; // reset old variable
    y = z; // shift z
    z = w; // zhift w
    w ^= w >> 19;  // bit shift w 
    w ^= t; // old variable after we manupulate it plus another old variable aka W 
    
    // ret = w = (x & << 11 & >> 8)); x is an old value then replace x with our olther old values
    
    return w;
}
