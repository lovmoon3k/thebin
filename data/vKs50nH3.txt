// Bounce Expression
amp = .1;
freq = 2.0;
decay = 2.0;
n = 0;
if (numKeys > 0){
n = nearestKey(time).index;
if (key(n).time > time){
n--;
}}
if (n == 0){ t = 0;
}else{
t = time - key(n).time;
}
if (n > 0 && t < 1){
v = velocityAtTime(key(n).time - thisComp.frameDuration/10);
value + v*amp*Math.sin(freq*t*2*Math.PI)/Math.exp(decay*t);
}else{value}


// Squash and Stretch Scale Expression
maxDev = 13; // max deviation in pixels
spd = 30; //speed of oscillation
decay = 1.0; //how fast it slows down
t = time - inPoint;
x = scale[0] + maxDev*Math.sin(spd*t)/Math.exp(decay*t);
y = scale[0]*scale[1]/x;
[x,y]


// Looping Wiggle
freq = 1;
amp = 110;
loopTime = 3;
t = time % loopTime;
wiggle1 = wiggle(freq, amp, 1, 0.5, t);
wiggle2 = wiggle(freq, amp, 1, 0.5, t - loopTime);
linear(t, 0, loopTime, wiggle1, wiggle2)


// Move Object X Pixels per Second
veloc = 150; //Move object 150 pixel on x axis per second
x = position[0] + (time - inPoint) *veloc;
y = position[1];
[x,y]


// Constant Rotation Per Second
veloc = 360; //360 Degree Rotation per Second
r = rotation + (time - inPoint) *veloc;
[r]


// Motion Trail Expression
// Apply to position
delay = 5; //number of frames to delay
d = delay*thisComp.frameDuration*(index - 1);
thisComp.layer(1).position.valueAtTime(time - d)
// Apply to Opacity
opacityFactor = .75;
Math.pow(opacityFactor,index - 1)*100


// Blink Expression
blinkSpeed=15;
n= Math.sin(time*blinkSpeed);
if(n<0) 0 else 100;


