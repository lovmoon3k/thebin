		[Fact]
        public async Task GetBookById_1()
        {
            // arrange
            var idToGet = 1;
            
            var bookToReturn = GetBookData().First(a => a.Id == idToGet);
            _bookServiceMock.Setup(a => a.GetBookById(idToGet))
                .ReturnsAsync(bookToReturn);

            var controller = new BooksController(_bookServiceMock.Object, null);
            
            // act
            var result = await controller.GetBookById(idToGet);
            
            // assert
            Assert.IsType<ActionResult<Book>>(result);
            var viewResult = Assert.IsAssignableFrom<OkObjectResult>(result.Result);
            var model = Assert.IsAssignableFrom<Book?>(viewResult.Value);
            Assert.NotNull(model);
            Assert.Equal(idToGet, model.Id);
            Assert.Equal(bookToReturn.Title, model.Title);
            Assert.Equal(bookToReturn.Author, model.Author);
        }

        [Fact]
        public async Task GetBookById_BookNull()
        {
            // arrange
            var idToGet = 5;

            Book? bookToReturn = null;
            _bookServiceMock.Setup(a => a.GetBookById(idToGet))
                .ReturnsAsync(bookToReturn);

            var controller = new BooksController(_bookServiceMock.Object, null);
            
            // act
            var result = await controller.GetBookById(idToGet);
            
            // assert
            Assert.IsType<ActionResult<Book>>(result);
            var viewResult = Assert.IsAssignableFrom<NotFoundObjectResult>(result.Result);
            var model = Assert.IsAssignableFrom<string>(viewResult.Value);
            Assert.False(string.IsNullOrWhiteSpace(model));
            Assert.Equal("The requested book is not found", model);
        }