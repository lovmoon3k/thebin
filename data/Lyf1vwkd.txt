海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥你还没有书哦～～点我进入设置@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"gmtModified\":0,\"id\":0,\"last_chapter_rule\":\"\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"text_1\",\"name\":\"源目录\",\"path\":\"source\",\"rule\":\"js:\\nvar d = [];\\nvar m = MY_PARAMS.rules\\nvar baseurl = m.bookSourceUrl\\nif (m.ruleExplore.bookList) {\\n    var rule = m.ruleExplore\\n} else {\\n    var rule = m.ruleSearch\\n}\\nd.push({\\n    title: \\\"搜索\\\",\\n    desc: \\\"请输入搜索关键词\\\",\\n    url: $.toString(() => {\\n        putMyVar(\\\"kw\\\", input);\\n        return \\\"hiker://page/search?p=fypage&kw=\\\" + input\\n    }),\\n    col_type: \\\"input\\\",\\n    extra: {\\n        \\\"u\\\": baseurl + m.searchUrl,\\n        \\\"rules\\\": m,\\n        defaultValue: getMyVar(\\\"kw\\\", \\\"\\\"),\\n        bookSourceName: m.bookSourceName\\n    }\\n})\\nif (m.enabledExplore&&m.exploreUrl) {\\n    JSON.parse(m.exploreUrl).forEach(item => {\\n        d.push({\\n            title: item.title,\\n            col_type: item.style.layout_flexBasisPercent == 1 ? \\\"text_center_1\\\" : \\\"text_3\\\",\\n            url: item.url == \\\"\\\" ? \\\"hiker://empty\\\" : \\\"hiker://page/books?p=fypage\\\",\\n            extra: {\\n                \\\"all\\\": m,\\n                \\\"rules\\\": rule,\\n                \\\"u\\\": baseurl + item.url\\n            }\\n        })\\n    })\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"主页\",\"path\":\"home\",\"rule\":\"var d = [];\\nif (fileExist(\\\"hiker://files/yuedu/list.json\\\") && JSON.parse(fetch(\\\"hiker://files/yuedu/list.json\\\")).urls.length != 0) {\\n    d.push({\\n        title: \\\"⚙️设置\\\",\\n        url: \\\"hiker://page/config\\\",\\n        col_type: \\\"scroll_button\\\"\\n    });\\n    let data = JSON.parse(fetch(\\\"hiker://files/yuedu/list.json\\\"))\\n    data.urls.forEach(item => {\\n        d.push({\\n            title: item.name,\\n            url: $().lazyRule((i) => {\\n                putMyVar(\\\"tab\\\", i)\\n                refreshPage()\\n                return \\\"toast://切换成功\\\"\\n            }, item.name),\\n            col_type: \\\"scroll_button\\\"\\n        })\\n    })\\n    d.push({\\n        title: \\\"搜索\\\",\\n        url: $.toString(() => {\\n            putMyVar(\\\"kw\\\", input);\\n            return \\\"hiker://page/ju?p=fypage&kw=\\\" + input\\n        }),\\n        col_type: \\\"input\\\",\\n        desc: \\\"聚合搜索，请输入关键词\\\",\\n        pic_url: \\\"\\\",\\n        extra: {\\n            defaultValue: getMyVar(\\\"kw\\\", \\\"\\\")\\n        }\\n    });\\n    let list = JSON.parse(fetch(\\\"hiker://files/yuedu/\\\" + md5(getMyVar(\\\"tab\\\", data.urls[0].name)) + \\\".json\\\"))\\n    list.forEach(item => {\\n        let s = JSON.stringify(item)\\n        if (s.includes(\\\"<js>\\\") || s.includes(\\\"@js:\\\") || s.includes(\\\"$.\\\") || s.includes(\\\"🔞\\\")) {\\n            var url = \\\"toast://当前书源暂不支持\\\"\\n            return\\n        } else {\\n            var url = \\\"hiker://page/source?p=fypage\\\"\\n        }\\n        d.push({\\n            title: item.bookSourceName + `(${item.bookSourceGroup})`,\\n            col_type: \\\"text_2\\\",\\n            url: url,\\n            extra: {\\n                \\\"rules\\\": item\\n            }\\n        })\\n    })\\n} else {\\n    setResult([{\\n        title: \\\"你还没有书哦～～点我进入设置\\\",\\n        url: \\\"hiker://page/config\\\",\\n        col_type: \\\"text_center_1\\\"\\n    }])\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_1_vertical_pic\",\"name\":\"列表\",\"path\":\"books\",\"rule\":\"js:\\nvar d = [];\\ntry {\\n    var m = MY_PARAMS.rules\\n    // 阅读=>视界\\n    var url = MY_PARAMS.u.replace(\\\"{{page}}\\\", MY_PAGE)\\n    var listrule = \\\"body&&\\\" + m.bookList.replace(/\\\\![0-9]/g, \\\"\\\").replace(\\\" \\\", \\\"&&\\\").split(\\\"||\\\")[0]\\n    if (m.author) {\\n        var author = m.author.replace(\\\"@\\\", \\\"&&\\\").replace(\\\"text\\\", \\\"Text\\\").replace(/\\\\.[0-9]/g, function(a) {\\n            return a.replace(\\\".\\\", \\\",\\\")\\n        })\\n    } else {\\n        var author = false\\n    }\\n    if (m.coverUrl) {\\n        var cover = m.coverUrl.replace(\\\"@\\\", \\\"&&\\\").replace(/\\\\.[0-9]/g, function(a) {\\n            return a.replace(\\\".\\\", \\\",\\\")\\n        })\\n    } else {\\n        var cover = false\\n    }\\n    var name = m.name.replace(\\\"@\\\", \\\"&&\\\").replace(\\\"text\\\", \\\"Text\\\").replace(/\\\\.[0-9]/g, function(a) {\\n        return a.replace(\\\".\\\", \\\",\\\")\\n    })\\n    var bookurl = m.bookUrl.replace(\\\"@\\\", \\\"&&\\\").replace(/\\\\.[0-9]/g, function(a) {\\n        return a.replace(\\\".\\\", \\\",\\\")\\n    })\\n    if (m.intro) {\\n        var intro = m.intro.replace(\\\"@\\\", \\\"&&\\\").replace(\\\"text\\\", \\\"Text\\\").replace(/\\\\.[0-9]/g, function(a) {\\n            return a.replace(\\\".\\\", \\\",\\\")\\n        })\\n    } else {\\n        var intro = false\\n    }\\n    MY_URL = url;\\n    var res = request(url)\\n    let list = pdfa(res, listrule)\\n    if (list.length > 0) {\\n        list.forEach(item => {\\n            d.push({\\n                col_type: (cover ? \\\"movie_1_vertical_pic\\\" : \\\"text_1\\\"),\\n                title: parseDomForHtml(item, name),\\n                img: (cover ? parseDom(item, cover) + \\\"@Referer=\\\" : \\\"hiker://empty\\\"),\\n                url: \\\"hiker://page/menu?url=\\\" + parseDom(item, bookurl) + \\\"#autoCache##immersiveTheme#\\\",\\n                desc: (author ? parseDomForHtml(item, author) : \\\"\\\") + \\\"\\\\n\\\" + (intro ? parseDomForHtml(item, intro) : \\\"\\\"),\\n                extra: {\\n                    \\\"bookName\\\": parseDomForHtml(item, name),\\n                    \\\"cover\\\": (cover ? parseDom(item, cover) + \\\"@Referer=\\\" : \\\"hiker://empty\\\"),\\n                    \\\"Toc\\\": MY_PARAMS.all.ruleToc,\\n                    \\\"content\\\": MY_PARAMS.all.ruleContent\\n                }\\n            })\\n        })\\n    } else {\\n        d.push({\\n            title: \\\"列表加载失败：\\\" + listrule,\\n            col_type: \\\"text_center_1\\\",\\n            url: \\\"hiker://empty\\\"\\n        })\\n    }\\n} catch (e) {\\n    d.push({\\n        title: \\\"加载失败：\\\" + e.message,\\n        col_type: \\\"text_center_1\\\",\\n        url: \\\"hiker://empty\\\"\\n    })\\n}\\nsetResult(d);\"},{\"col_type\":\"text_center_1\",\"name\":\"设置\",\"path\":\"config\",\"rule\":\"js:\\nvar d = [];\\ntry {\\n    if (!fileExist(\\\"hiker://files/yuedu/list.json\\\")) {\\n        writeFile(\\\"hiker://files/yuedu/list.json\\\", '{\\\"urls\\\":[]}')\\n    }\\n    d.push({\\n        title: \\\"添加订阅\\\",\\n        url: $(\\\"\\\", \\\"订阅名称\\\").input(() => {\\n            return $(\\\"\\\", \\\"订阅链接\\\").input((name) => {\\n                let list = JSON.parse(fetch(\\\"hiker://files/yuedu/list.json\\\"))\\n                list.urls.push({\\n                    name: name,\\n                    url: input\\n                })\\n                writeFile(\\\"hiker://files/yuedu/list.json\\\", JSON.stringify(list))\\n                try {\\n                    var t = fetch(input)\\n                    JSON.parse(t)\\n                    writeFile(\\\"hiker://files/yuedu/\\\" + md5(name) + \\\".json\\\", t)\\n                    return \\\"toast://导入成功\\\"\\n                } catch (e) {\\n                    return \\\"toast://导入失败\\\"\\n                }\\n                refreshPage()\\n            }, input)\\n        })\\n    })\\n    let list = JSON.parse(fetch(\\\"hiker://files/yuedu/list.json\\\"))\\n    list.urls.forEach((item, i) => {\\n        d.push({\\n            title: item.name,\\n            desc: item.url,\\n            url: $([\\\"删除\\\", \\\"编辑名称\\\", \\\"编辑地址\\\", \\\"更新\\\"]).select((lis, i) => {\\n                var list = lis\\n                if (input == \\\"删除\\\") {\\n                    return $(\\\"确认删除？\\\").confirm((list, i) => {\\n                        deleteFile(\\\"hiker://files/yuedu/\\\" + md5(list.urls[i].name) + \\\".json\\\")\\n                        list.urls.splice(i, 1)\\n                        writeFile(\\\"hiker://files/yuedu/list.json\\\", JSON.stringify(list))                        \\n                        refreshPage()\\n                    }, list, i)\\n                } else if (input == \\\"编辑名称\\\") {\\n                    return $(\\\"\\\").input((list, i) => {\\n                        list.urls[i].name = input\\n                        writeFile(\\\"hiker://files/yuedu/list.json\\\", JSON.stringify(list))\\n                        refreshPage()\\n                    }, list, i)\\n                } else if (input == \\\"编辑地址\\\") {\\n                    return $(\\\"\\\").input((list, i) => {\\n                        list.urls[i].url = input\\n                        writeFile(\\\"hiker://files/yuedu/list.json\\\", JSON.stringify(list))\\n                        refreshPage()\\n                    }, list, i)\\n                } else {\\n                    try {\\n                        var t = fetch(list.urls[i].url)\\n                        JSON.parse(t)\\n                        writeFile(\\\"hiker://files/yuedu/\\\" + md5(list.urls[i].name) + \\\".json\\\", t)\\n                        refreshPage()\\n                        toast(\\\"更新成功\\\")\\n                    } catch (e) {\\n                        toast(\\\"更新失败\\\")\\n                    }\\n                }\\n            }, list, i),\\n            col_type: \\\"text_1\\\"\\n        })\\n    })\\n} catch (e) {\\n    d.push({\\n        title: \\\"错误：\\\" + e.message,\\n        col_type: \\\"text_center_1\\\",\\n        url: \\\"hiker://empty\\\"\\n    })\\n}\\nsetResult(d);\"},{\"col_type\":\"text_1\",\"name\":\"目录\",\"path\":\"menu\",\"rule\":\"js:\\nvar d = [];\\nvar res = getResCode()\\nlet Toc = MY_PARAMS.Toc\\nlet {\\n    getArray,\\n    getText,\\n    getUrl0\\n} = $.require(\\\"hiker://page/converter\\\");\\ngetArray(res, Toc.chapterList).forEach(item => {\\n    //log(item);    \\n    var title = getText(item, Toc.chapterName)\\n    if (title != \\\"\\\") {\\n        d.push({\\n            title: title,\\n            url: \\\"hiker://page/content\\\",\\n            extra: {\\n                title: title,\\n                content: MY_PARAMS.content,\\n                url: getUrl0(item, Toc.chapterList, Toc.chapterUrl) + \\\"#autoPage##readTheme#\\\"\\n            }\\n        })\\n    }\\n})\\nvar cp = d.map(function(item) {\\n    return {\\n        \\\"title\\\": item.title,\\n        \\\"url\\\": item.extra.url.replace(\\\"#autoPage##readTheme#\\\", \\\"\\\")\\n    }\\n})\\nd.unshift({\\n    title: \\\"下载\\\",\\n    url: \\\"hiker://page/download.view#noRecordHistory##noRefresh##noHistory#?rule=本地资源管理\\\",\\n    col_type: \\\"text_center_1\\\",\\n    extra: {\\n        chapterList: cp,\\n        defaultView: \\\"1\\\",\\n        info: {\\n            bookName: MY_PARAMS.bookName,\\n            bookTopPic: MY_PARAMS.cover,\\n            ruleName: \\\"悦读\\\",\\n            parseCode: $.toString((MY_PARAMS) => {\\n                var res = request(input);\\n                var rule = MY_PARAMS.content;\\n                let r = rule.content.replace(\\\"@\\\", \\\"&&\\\").replace(\\\"text\\\", \\\"Text\\\").replace(/\\\\.[0-9]/g, function(a) {\\n                    return a.replace(\\\".\\\", \\\",\\\")\\n                });\\n                let r1 = r.split(\\\"&&\\\");\\n                let r2 = r1.slice(0, r1.length - 1).join(\\\"&&\\\");\\n                let arr = pdfa(res, \\\"body&&\\\" + r2);\\n                //log(arr);\\n                var tt = \\\"\\\"\\n                for (let it of arr) {\\n                    it = it.replace(new RegExp(\\\"\\\\n\\\", \\\"g\\\"), \\\"--br--\\\");\\n                    //log(it);\\n                    var t = pdfh(it, \\\"Text\\\");\\n                    t = t.replace(new RegExp(\\\"--br--\\\", \\\"g\\\"), \\\"<br>\\\");\\n                    if (t == \\\"\\\") {\\n                        continue\\n                    }\\n                    let t2 = t.split(\\\"<br>\\\");\\n                    for (let it2 of t2) {\\n                        if (it2 == \\\"\\\" || it2.length == 1) {\\n                            continue\\n                        }\\n                        if (!it2.startsWith(\\\"　\\\") && !it2.startsWith(\\\"&nbsp;&nbsp;\\\")) {\\n                            it2 = \\\"&nbsp;&nbsp;&nbsp;&nbsp;\\\" + it2.trim();\\n                        }\\n                        if (rule.replaceRegex) {\\n                            it2 = it2.replace(new RegExp(rule.replaceRegex.replace(\\\"##\\\", \\\"\\\"), \\\"g\\\"), \\\"\\\")\\n                        }\\n                        if (it2 == \\\"\\\") {\\n                            continue\\n                        }\\n                        tt += it2 + \\\"\\\\n\\\"\\n                    }\\n                }\\n                return tt\\n            }, MY_PARAMS),\\n            type: \\\"novel\\\"\\n        }\\n    }\\n})\\nd.unshift({\\n    title: MY_PARAMS.bookName,\\n    img: MY_PARAMS.cover,\\n    url: MY_URL,\\n    col_type: \\\"movie_1_vertical_pic_blur\\\"\\n})\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"内容\",\"path\":\"content\",\"rule\":\"js:\\nvar d = [];\\nvar res = getResCode()\\nvar rule = MY_PARAMS.content\\nlet r = rule.content.replace(\\\"@\\\", \\\"&&\\\").replace(\\\"text\\\", \\\"Text\\\").replace(/\\\\.[0-9]/g, function(a) {\\n    return a.replace(\\\".\\\", \\\",\\\")\\n});\\nlet r1 = r.split(\\\"&&\\\");\\nlet r2 = r1.slice(0, r1.length - 1).join(\\\"&&\\\");\\nlet arr = pdfa(res, \\\"body&&\\\" + r2);\\n//log(arr);\\nfor (let it of arr) {\\n    it = it.replace(new RegExp(\\\"\\\\n\\\", \\\"g\\\"), \\\"--br--\\\");\\n    //log(it);\\n    var t = pdfh(it, \\\"Text\\\");\\n    t = t.replace(new RegExp(\\\"--br--\\\", \\\"g\\\"), \\\"<br>\\\");\\n    if (t == \\\"\\\") {\\n        continue\\n    }\\n    let t2 = t.split(\\\"<br>\\\");\\n    for (let it2 of t2) {\\n        if (it2 == \\\"\\\" || it2.length == 1) {\\n            continue\\n        }\\n        if (!it2.startsWith(\\\"　\\\") && !it2.startsWith(\\\"&nbsp;&nbsp;\\\")) {\\n            it2 = \\\"&nbsp;&nbsp;&nbsp;&nbsp;\\\" + it2.trim();\\n        }\\n        if (rule.replaceRegex) {\\n            it2 = it2.replace(new RegExp(rule.replaceRegex.replace(\\\"##\\\", \\\"\\\"), \\\"g\\\"), \\\"\\\")\\n        }\\n        if (it2 == \\\"\\\" || it2 == \\\"&nbsp;&nbsp;&nbsp;&nbsp;\\\") {\\n            continue\\n        }\\n        d.push({\\n            title: it2,\\n            url: \\\"\\\",\\n            col_type: \\\"rich_text\\\",\\n            desc: \\\"\\\",\\n            pic_url: \\\"\\\"\\n        });\\n    }\\n}\\nd.unshift({\\n    title: \\\"<big>\\\" + MY_PARAMS.title + \\\"</big>\\\",\\n    col_type: \\\"rich_text\\\"\\n})\\nsetResult(d);\"},{\"col_type\":\"movie_1_vertical_pic\",\"name\":\"搜索\",\"path\":\"search\",\"rule\":\"js:\\nlet {\\n    search\\n} = $.require(\\\"hiker://page/ss\\\");\\nlet d = [];\\nlet kw = getParam(\\\"kw\\\");\\nlet s = kw;\\nsetPageTitle(\\\"搜索\\\" + kw + \\\" \\\" + MY_PARAMS.bookSourceName);\\nlet matchMust = getItem(\\\"mm\\\", \\\"0\\\");\\nlet tip = \\\"精确匹配：\\\" + (matchMust == \\\"1\\\" ? \\\"是\\\" : \\\"否\\\");\\nif (MY_PAGE == 1) {\\n    d.push({\\n        title: tip,\\n        url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n            setItem(\\\"mm\\\", getItem(\\\"mm\\\", \\\"0\\\") == \\\"0\\\" ? \\\"1\\\" : \\\"0\\\");\\n            refreshPage();\\n            return \\\"toast://OK\\\";\\n        }),\\n        col_type: \\\"text_1\\\",\\n    });\\n}\\nlet d2 = search(MY_PARAMS.rules, kw, MY_PAGE);\\nfor (let it of d2) {\\n    if (matchMust == \\\"0\\\" || (it.title && it.title.indexOf(kw) >= 0)) {\\n        it.title = it.title.includes(\\\"““””\\\") ? it.title : \\\"““””\\\" + it.title.replace(new RegExp(\\\"<em>|</em>\\\", \\\"g\\\"), \\\"\\\").replace(new RegExp(s, \\\"g\\\"), \\\"<strong><span style=\\\\\\\"color: #1E90FF\\\\\\\">\\\" + s + \\\"</span></strong>\\\")\\n        d.push(it);\\n    }\\n}\\n\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"转换\",\"path\":\"converter\",\"rule\":\"$.exports = {\\n    getArray: (html, rule) => {\\n        let r1 = rule.split(\\\"!\\\")[0].split(\\\"||\\\");\\n        let arr = pdfa(html, \\\"body&&\\\" + r1[0].replace(\\\" \\\", \\\"&&\\\").replace(\\\"@\\\", \\\"&&\\\"));\\n        if (r1.length > 1) {\\n            let r2 = r1[1].split(\\\":\\\");\\n            let r3 = [];\\n            for (let it of r2) {\\n                try {\\n                    let i = parseInt(it);\\n                    if (isNaN(i)) {\\n                        continue;\\n                    }\\n                    r3.push(i);\\n                } catch (e) {}\\n            }\\n            let arr2 = [];\\n            for (let i = 0; i < arr.length; i++) {\\n                if (r3.indexOf(i) < 0) {\\n                    arr2.push(arr[i]);\\n                }\\n            }\\n            return arr2;\\n        }\\n        log(\\\"获取失败，失败定位：\\\" + r1[0].replace(\\\" \\\", \\\"&&\\\").replace(\\\"@\\\", \\\"&&\\\"))\\n        return arr;\\n    },\\n    getText: (html, rule) => {\\n        var ru = rule.replace(\\\"@\\\", \\\"&&\\\").replace(\\\"text\\\", \\\"Text\\\").replace(/\\\\.[0-9]/g, function(a) {\\n            return a.replace(\\\".\\\", \\\",\\\")\\n        }).split(\\\"##\\\")\\n        if (ru.length == 1) {\\n            var r = pdfh(html, ru[0])\\n        } else {\\n            var r = pdfh(html, ru[0]).replace(new RegExp(ru[1], \\\"g\\\"), \\\"\\\")\\n        }\\n        if (r == \\\"\\\") {\\n            log(\\\"返回为空，可能是定位失败：\\\" + rule.replace(\\\"@\\\", \\\"&&\\\").replace(\\\"text\\\", \\\"Text\\\").replace(/\\\\.[0-9]/g, function(a) {\\n                return a.replace(\\\".\\\", \\\",\\\")\\n            }).split(\\\"##\\\")[0])\\n        }\\n        return r\\n    },\\n    getUrl0: (html, parentRule, rule) => {\\n        if (parentRule != null) {\\n            parentRule = parentRule.split(\\\"!\\\")[0];\\n        }\\n        let p = parentRule != null && parentRule[parentRule.length - 1] == \\\"a\\\" ? \\\"a&&\\\" : \\\"\\\";\\n        let r = pd(html, p + rule.replace(\\\"@\\\", \\\"&&\\\").replace(\\\"text\\\", \\\"Text\\\").replace(/\\\\.[0-9]/g, function(a) {\\n            return a.replace(\\\".\\\", \\\",\\\");\\n        }).split(\\\"##\\\")[0].split(\\\"##\\\")[0]);\\n        if (r == \\\"\\\") {\\n            log(\\\"返回为空，可能是定位失败：\\\" + p + rule.replace(\\\"@\\\", \\\"&&\\\").replace(\\\"text\\\", \\\"Text\\\").replace(/\\\\.[0-9]/g, function(a) {\\n                return a.replace(\\\".\\\", \\\",\\\");\\n            }).split(\\\"##\\\")[0])\\n        }\\n        return r\\n    }\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"聚搜\",\"path\":\"ju\",\"rule\":\"js:\\nvar d = [];\\nlet {\\n    search,\\n    listRules\\n} = $.require(\\\"hiker://page/ss\\\");\\nlet {\\n    all,\\n    use,\\n    data\\n} = listRules(MY_PAGE);\\ndata = data || [];\\nlet s = getParam(\\\"kw\\\");\\nsetPageTitle(\\\"搜索\\\" + s);\\nlet matchMust = getItem(\\\"mm\\\", \\\"0\\\");\\nlet tip = \\\"搜索源：\\\" + use + \\\"/\\\" + all + \\\"  精确匹配：\\\" + (matchMust == \\\"1\\\" ? \\\"是\\\" : \\\"否\\\");\\nif (MY_PAGE == 1) {\\n    d.push({\\n        title: tip,\\n        url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n            setItem(\\\"mm\\\", getItem(\\\"mm\\\", \\\"0\\\") == \\\"0\\\" ? \\\"1\\\" : \\\"0\\\");\\n            refreshPage();\\n            return \\\"toast://OK\\\";\\n        }),\\n        col_type: \\\"text_1\\\",\\n        extra: {\\n            id: \\\"yuedu-s-h\\\"\\n        }\\n    });\\n} else if (data.length > 0) {\\n    updateItem(\\\"yuedu-s-h\\\", {\\n        title: tip\\n    });\\n}\\nlet p = MY_PAGE;\\nlet pageid = \\\"yuedu-page\\\" + MY_PAGE;\\nif (data.length > 0) {\\n    d.push({\\n        title: \\\"加载第\\\" + MY_PAGE + \\\"页中，进度：1/\\\" + data.length,\\n        url: \\\"hiker://empty\\\",\\n        col_type: \\\"text_center_1\\\",\\n        desc: \\\"\\\",\\n        pic_url: \\\"\\\",\\n        extra: {\\n            id: pageid\\n        }\\n    });\\n}\\nsetResult(d);\\nif (data.length > 0) {\\n    //多线程加载\\n    let tasks = data.map(it => {\\n        return {\\n            func: function(rule) {\\n                return search(rule, s, 1);\\n            },\\n            param: it,\\n            id: \\\"rule@\\\" + it.name\\n        }\\n    });\\n\\n    batchExecute(tasks, {\\n        func: function(param, id, error, result) {\\n            //log(\\\"listener: \\\" + (result || []).length)\\n            param.i = param.i + 1;\\n            if (result) {\\n                try {\\n                    for (let it of result) {\\n                        param.j = param.j + 1;\\n                        if (matchMust == \\\"1\\\") {\\n                            if (!it.title || !it.title.includes(s)) {\\n                                continue;\\n                            }\\n                        }\\n                        let extra = it.extra || {};\\n                        extra.id = \\\"__app\\\" + MY_PAGE + \\\"@\\\" + param.j;\\n                        extra.bookName = it.title\\n                        extra.cover = it.pic_url || it.img\\n                        addItemBefore(pageid, {\\n                            title: it.title.includes(\\\"““””\\\") ? it.title : \\\"““””\\\" + it.title.replace(new RegExp(\\\"<em>|</em>\\\", \\\"g\\\"), \\\"\\\").replace(new RegExp(s, \\\"g\\\"), \\\"<strong><span style=\\\\\\\"color: #1E90FF\\\\\\\">\\\" + s + \\\"</span></strong>\\\"),\\n                            desc: it.desc,\\n                            url: it.url,\\n                            pic_url: it.pic_url || it.img,\\n                            col_type: it.pic_url || it.img ? 'movie_1_vertical_pic' : \\\"text_1\\\",\\n                            extra: extra\\n                        })\\n                    }\\n                } catch (e) {}\\n\\n            }\\n            if (param.i >= param.all) {\\n                deleteItem(pageid)\\n            } else {\\n                updateItem({\\n                    title: \\\"加载第\\\" + MY_PAGE + \\\"页中，进度：\\\" + (param.i + 1) + \\\"/\\\" + param.all,\\n                    url: \\\"hiker://empty\\\",\\n                    col_type: \\\"text_center_1\\\",\\n                    desc: \\\"\\\",\\n                    pic_url: \\\"\\\",\\n                    extra: {\\n                        id: pageid\\n                    }\\n                })\\n            }\\n        },\\n        param: {\\n            all: data.length,\\n            i: 0,\\n            j: -1\\n        }\\n    });\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"搜索辅助\",\"path\":\"ss\",\"rule\":\"$.exports = {\\n    search: (rule, kw, page) => {\\n        let d = [];\\n        let m = rule.ruleSearch\\n        // 阅读=>视界\\n        let u = rule.bookSourceUrl + rule.searchUrl;\\n        let url = u.replace(\\\"{{page}}\\\", page).replace(\\\"{{key}}\\\", kw)\\n        let listrule = \\\"body&&\\\" + m.bookList.replace(/![0-9]/g, \\\"\\\").replace(\\\" \\\", \\\"&&\\\").split(\\\"||\\\")[0]\\n        let author = m.author.replace(\\\"@\\\", \\\"&&\\\").replace(\\\"text\\\", \\\"Text\\\").replace(/\\\\.[0-9]/g, function(a) {\\n            return a.replace(\\\".\\\", \\\",\\\")\\n        })\\n        let cover = m.coverUrl.replace(\\\"@\\\", \\\"&&\\\").replace(/\\\\.[0-9]/g, function(a) {\\n            return a.replace(\\\".\\\", \\\",\\\")\\n        })\\n        let name = m.name.replace(\\\"@\\\", \\\"&&\\\").replace(\\\"text\\\", \\\"Text\\\").replace(/\\\\.[0-9]/g, function(a) {\\n            return a.replace(\\\".\\\", \\\",\\\")\\n        })\\n        let bookurl = m.bookUrl.replace(\\\"@\\\", \\\"&&\\\").replace(/\\\\.[0-9]/g, function(a) {\\n            return a.replace(\\\".\\\", \\\",\\\")\\n        })\\n        let intro = m.intro.replace(\\\"@\\\", \\\"&&\\\").replace(\\\"text\\\", \\\"Text\\\").replace(/\\\\.[0-9]/g, function(a) {\\n            return a.replace(\\\".\\\", \\\",\\\")\\n        });\\n        //setPageTitle(\\\"搜索\\\" + getParam(\\\"kw\\\") + \\\" \\\" + MY_PARAMS.bookSourceName);\\n        //MY_URL = url;\\n        let res = request(url)\\n        let list = pdfa(res, listrule)\\n        list.forEach(item => {\\n            d.push({\\n                title: parseDomForHtml(item, name),\\n                img: parseDom(item, cover, url),\\n                url: \\\"hiker://page/menu?url=\\\" + parseDom(item, bookurl, url) + \\\"#autoCache##immersiveTheme#\\\",\\n                desc: rule.bookSourceName + \\\"\\\\n\\\" + parseDomForHtml(item, author) + \\\"\\\\n\\\" + parseDomForHtml(item, intro),\\n                extra: {\\n                    \\\"Toc\\\": rule.ruleToc,\\n                    \\\"content\\\": rule.ruleContent,\\n                    \\\"bookName\\\": parseDomForHtml(item, name),\\n                    \\\"cover\\\": parseDom(item, cover, url)\\n                }\\n            })\\n        });\\n        return d;\\n    },\\n    listRules: (page, rule) => {\\n        try {\\n            //并发数量\\n            let size = 10;\\n            let data1 = JSON.parse(fetch(\\\"hiker://files/yuedu/list.json\\\"))\\n            let list = JSON.parse(fetch(\\\"hiker://files/yuedu/\\\" + md5(getMyVar(\\\"tab\\\", data1.urls[0].name)) + \\\".json\\\"))\\n            let rules = [];\\n            list.forEach(item => {\\n                let s = JSON.stringify(item)\\n                if (s.includes(\\\"<js>\\\") || s.includes(\\\"@js:\\\") || s.includes(\\\"$.\\\") || s.includes(\\\"🔞\\\")) {\\n                    return\\n                } else {\\n                    rules.push(item);\\n                }\\n            });\\n            if (!page && !rule) {\\n                return rules.map(it => it.name);\\n            }\\n            if (rule != null) {\\n                return rules.filter(i => i.name == rule);\\n            }\\n            let start = (page - 1) * size;\\n            if (rules.length < start + 1) {\\n                return [];\\n            }\\n            let len = size;\\n            if (rules.length < page * size) {\\n                len = rules.length - start\\n            }\\n            let all = rules.length;\\n            let use = (page - 1) * size + len;\\n            return {\\n                all: all,\\n                use: use,\\n                data: rules.slice(start, start + len)\\n            };\\n        } catch (e) {\\n            return {\\n                all: 0,\\n                use: 0,\\n                data: []\\n            }\\n        }\\n    }\\n}\"}],\"saved\":false,\"title\":\"悦读\",\"version\":0,\"url\":\"hiker://page/config\",\"col_type\":\"text_center_1\",\"find_rule\":\"js:\\nvar d = [];\\ntry {\\n    if (!fileExist(\\\"hiker://files/yuedu/list.json\\\")) {\\n        writeFile(\\\"hiker://files/yuedu/list.json\\\", '{\\\"urls\\\":[]}')\\n    }\\n    d.push({\\n        title: \\\"添加订阅\\\",\\n        url: $(\\\"\\\", \\\"订阅名称\\\").input(() => {\\n            return $(\\\"\\\", \\\"订阅链接\\\").input((name) => {\\n                let list = JSON.parse(fetch(\\\"hiker://files/yuedu/list.json\\\"))\\n                list.urls.push({\\n                    name: name,\\n                    url: input\\n                })\\n                writeFile(\\\"hiker://files/yuedu/list.json\\\", JSON.stringify(list))\\n                try {\\n                    var t = fetch(input)\\n                    JSON.parse(t)\\n                    writeFile(\\\"hiker://files/yuedu/\\\" + md5(name) + \\\".json\\\", t)\\n                    return \\\"toast://导入成功\\\"\\n                } catch (e) {\\n                    return \\\"toast://导入失败\\\"\\n                }\\n                refreshPage()\\n            }, input)\\n        })\\n    })\\n    let list = JSON.parse(fetch(\\\"hiker://files/yuedu/list.json\\\"))\\n    list.urls.forEach((item, i) => {\\n        d.push({\\n            title: item.name,\\n            desc: item.url,\\n            url: $([\\\"删除\\\", \\\"编辑名称\\\", \\\"编辑地址\\\", \\\"更新\\\"]).select((lis, i) => {\\n                var list = lis\\n                if (input == \\\"删除\\\") {\\n                    return $(\\\"确认删除？\\\").confirm((list, i) => {\\n                        deleteFile(\\\"hiker://files/yuedu/\\\" + md5(list.urls[i].name) + \\\".json\\\")\\n                        list.urls.splice(i, 1)\\n                        writeFile(\\\"hiker://files/yuedu/list.json\\\", JSON.stringify(list))                        \\n                        refreshPage()\\n                    }, list, i)\\n                } else if (input == \\\"编辑名称\\\") {\\n                    return $(\\\"\\\").input((list, i) => {\\n                        list.urls[i].name = input\\n                        writeFile(\\\"hiker://files/yuedu/list.json\\\", JSON.stringify(list))\\n                        refreshPage()\\n                    }, list, i)\\n                } else if (input == \\\"编辑地址\\\") {\\n                    return $(\\\"\\\").input((list, i) => {\\n                        list.urls[i].url = input\\n                        writeFile(\\\"hiker://files/yuedu/list.json\\\", JSON.stringify(list))\\n                        refreshPage()\\n                    }, list, i)\\n                } else {\\n                    try {\\n                        var t = fetch(list.urls[i].url)\\n                        JSON.parse(t)\\n                        writeFile(\\\"hiker://files/yuedu/\\\" + md5(list.urls[i].name) + \\\".json\\\", t)\\n                        refreshPage()\\n                        toast(\\\"更新成功\\\")\\n                    } catch (e) {\\n                        toast(\\\"更新失败\\\")\\n                    }\\n                }\\n            }, list, i),\\n            col_type: \\\"text_1\\\"\\n        })\\n    })\\n} catch (e) {\\n    d.push({\\n        title: \\\"错误：\\\" + e.message,\\n        col_type: \\\"text_center_1\\\",\\n        url: \\\"hiker://empty\\\"\\n    })\\n}\\nsetResult(d);\",\"group\":\"⑧阅读\",\"ua\":\"mobile\",\"preRule\":\"\",\"pages\":\"[{\\\"col_type\\\":\\\"text_1\\\",\\\"name\\\":\\\"源目录\\\",\\\"path\\\":\\\"source\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nvar m = MY_PARAMS.rules\\\\nvar baseurl = m.bookSourceUrl\\\\nif (m.ruleExplore.bookList) {\\\\n    var rule = m.ruleExplore\\\\n} else {\\\\n    var rule = m.ruleSearch\\\\n}\\\\nd.push({\\\\n    title: \\\\\\\"搜索\\\\\\\",\\\\n    desc: \\\\\\\"请输入搜索关键词\\\\\\\",\\\\n    url: $.toString(() => {\\\\n        putMyVar(\\\\\\\"kw\\\\\\\", input);\\\\n        return \\\\\\\"hiker://page/search?p=fypage&kw=\\\\\\\" + input\\\\n    }),\\\\n    col_type: \\\\\\\"input\\\\\\\",\\\\n    extra: {\\\\n        \\\\\\\"u\\\\\\\": baseurl + m.searchUrl,\\\\n        \\\\\\\"rules\\\\\\\": m,\\\\n        defaultValue: getMyVar(\\\\\\\"kw\\\\\\\", \\\\\\\"\\\\\\\"),\\\\n        bookSourceName: m.bookSourceName\\\\n    }\\\\n})\\\\nif (m.enabledExplore&&m.exploreUrl) {\\\\n    JSON.parse(m.exploreUrl).forEach(item => {\\\\n        d.push({\\\\n            title: item.title,\\\\n            col_type: item.style.layout_flexBasisPercent == 1 ? \\\\\\\"text_center_1\\\\\\\" : \\\\\\\"text_3\\\\\\\",\\\\n            url: item.url == \\\\\\\"\\\\\\\" ? \\\\\\\"hiker://empty\\\\\\\" : \\\\\\\"hiker://page/books?p=fypage\\\\\\\",\\\\n            extra: {\\\\n                \\\\\\\"all\\\\\\\": m,\\\\n                \\\\\\\"rules\\\\\\\": rule,\\\\n                \\\\\\\"u\\\\\\\": baseurl + item.url\\\\n            }\\\\n        })\\\\n    })\\\\n}\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"主页\\\",\\\"path\\\":\\\"home\\\",\\\"rule\\\":\\\"var d = [];\\\\nif (fileExist(\\\\\\\"hiker://files/yuedu/list.json\\\\\\\") && JSON.parse(fetch(\\\\\\\"hiker://files/yuedu/list.json\\\\\\\")).urls.length != 0) {\\\\n    d.push({\\\\n        title: \\\\\\\"⚙️设置\\\\\\\",\\\\n        url: \\\\\\\"hiker://page/config\\\\\\\",\\\\n        col_type: \\\\\\\"scroll_button\\\\\\\"\\\\n    });\\\\n    let data = JSON.parse(fetch(\\\\\\\"hiker://files/yuedu/list.json\\\\\\\"))\\\\n    data.urls.forEach(item => {\\\\n        d.push({\\\\n            title: item.name,\\\\n            url: $().lazyRule((i) => {\\\\n                putMyVar(\\\\\\\"tab\\\\\\\", i)\\\\n                refreshPage()\\\\n                return \\\\\\\"toast://切换成功\\\\\\\"\\\\n            }, item.name),\\\\n            col_type: \\\\\\\"scroll_button\\\\\\\"\\\\n        })\\\\n    })\\\\n    d.push({\\\\n        title: \\\\\\\"搜索\\\\\\\",\\\\n        url: $.toString(() => {\\\\n            putMyVar(\\\\\\\"kw\\\\\\\", input);\\\\n            return \\\\\\\"hiker://page/ju?p=fypage&kw=\\\\\\\" + input\\\\n        }),\\\\n        col_type: \\\\\\\"input\\\\\\\",\\\\n        desc: \\\\\\\"聚合搜索，请输入关键词\\\\\\\",\\\\n        pic_url: \\\\\\\"\\\\\\\",\\\\n        extra: {\\\\n            defaultValue: getMyVar(\\\\\\\"kw\\\\\\\", \\\\\\\"\\\\\\\")\\\\n        }\\\\n    });\\\\n    let list = JSON.parse(fetch(\\\\\\\"hiker://files/yuedu/\\\\\\\" + md5(getMyVar(\\\\\\\"tab\\\\\\\", data.urls[0].name)) + \\\\\\\".json\\\\\\\"))\\\\n    list.forEach(item => {\\\\n        let s = JSON.stringify(item)\\\\n        if (s.includes(\\\\\\\"<js>\\\\\\\") || s.includes(\\\\\\\"@js:\\\\\\\") || s.includes(\\\\\\\"$.\\\\\\\") || s.includes(\\\\\\\"🔞\\\\\\\")) {\\\\n            var url = \\\\\\\"toast://当前书源暂不支持\\\\\\\"\\\\n            return\\\\n        } else {\\\\n            var url = \\\\\\\"hiker://page/source?p=fypage\\\\\\\"\\\\n        }\\\\n        d.push({\\\\n            title: item.bookSourceName + `(${item.bookSourceGroup})`,\\\\n            col_type: \\\\\\\"text_2\\\\\\\",\\\\n            url: url,\\\\n            extra: {\\\\n                \\\\\\\"rules\\\\\\\": item\\\\n            }\\\\n        })\\\\n    })\\\\n} else {\\\\n    setResult([{\\\\n        title: \\\\\\\"你还没有书哦～～点我进入设置\\\\\\\",\\\\n        url: \\\\\\\"hiker://page/config\\\\\\\",\\\\n        col_type: \\\\\\\"text_center_1\\\\\\\"\\\\n    }])\\\\n}\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_1_vertical_pic\\\",\\\"name\\\":\\\"列表\\\",\\\"path\\\":\\\"books\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\ntry {\\\\n    var m = MY_PARAMS.rules\\\\n    // 阅读=>视界\\\\n    var url = MY_PARAMS.u.replace(\\\\\\\"{{page}}\\\\\\\", MY_PAGE)\\\\n    var listrule = \\\\\\\"body&&\\\\\\\" + m.bookList.replace(/\\\\\\\\![0-9]/g, \\\\\\\"\\\\\\\").replace(\\\\\\\" \\\\\\\", \\\\\\\"&&\\\\\\\").split(\\\\\\\"||\\\\\\\")[0]\\\\n    if (m.author) {\\\\n        var author = m.author.replace(\\\\\\\"@\\\\\\\", \\\\\\\"&&\\\\\\\").replace(\\\\\\\"text\\\\\\\", \\\\\\\"Text\\\\\\\").replace(/\\\\\\\\.[0-9]/g, function(a) {\\\\n            return a.replace(\\\\\\\".\\\\\\\", \\\\\\\",\\\\\\\")\\\\n        })\\\\n    } else {\\\\n        var author = false\\\\n    }\\\\n    if (m.coverUrl) {\\\\n        var cover = m.coverUrl.replace(\\\\\\\"@\\\\\\\", \\\\\\\"&&\\\\\\\").replace(/\\\\\\\\.[0-9]/g, function(a) {\\\\n            return a.replace(\\\\\\\".\\\\\\\", \\\\\\\",\\\\\\\")\\\\n        })\\\\n    } else {\\\\n        var cover = false\\\\n    }\\\\n    var name = m.name.replace(\\\\\\\"@\\\\\\\", \\\\\\\"&&\\\\\\\").replace(\\\\\\\"text\\\\\\\", \\\\\\\"Text\\\\\\\").replace(/\\\\\\\\.[0-9]/g, function(a) {\\\\n        return a.replace(\\\\\\\".\\\\\\\", \\\\\\\",\\\\\\\")\\\\n    })\\\\n    var bookurl = m.bookUrl.replace(\\\\\\\"@\\\\\\\", \\\\\\\"&&\\\\\\\").replace(/\\\\\\\\.[0-9]/g, function(a) {\\\\n        return a.replace(\\\\\\\".\\\\\\\", \\\\\\\",\\\\\\\")\\\\n    })\\\\n    if (m.intro) {\\\\n        var intro = m.intro.replace(\\\\\\\"@\\\\\\\", \\\\\\\"&&\\\\\\\").replace(\\\\\\\"text\\\\\\\", \\\\\\\"Text\\\\\\\").replace(/\\\\\\\\.[0-9]/g, function(a) {\\\\n            return a.replace(\\\\\\\".\\\\\\\", \\\\\\\",\\\\\\\")\\\\n        })\\\\n    } else {\\\\n        var intro = false\\\\n    }\\\\n    MY_URL = url;\\\\n    var res = request(url)\\\\n    let list = pdfa(res, listrule)\\\\n    if (list.length > 0) {\\\\n        list.forEach(item => {\\\\n            d.push({\\\\n                col_type: (cover ? \\\\\\\"movie_1_vertical_pic\\\\\\\" : \\\\\\\"text_1\\\\\\\"),\\\\n                title: parseDomForHtml(item, name),\\\\n                img: (cover ? parseDom(item, cover) + \\\\\\\"@Referer=\\\\\\\" : \\\\\\\"hiker://empty\\\\\\\"),\\\\n                url: \\\\\\\"hiker://page/menu?url=\\\\\\\" + parseDom(item, bookurl) + \\\\\\\"#autoCache##immersiveTheme#\\\\\\\",\\\\n                desc: (author ? parseDomForHtml(item, author) : \\\\\\\"\\\\\\\") + \\\\\\\"\\\\\\\\n\\\\\\\" + (intro ? parseDomForHtml(item, intro) : \\\\\\\"\\\\\\\"),\\\\n                extra: {\\\\n                    \\\\\\\"bookName\\\\\\\": parseDomForHtml(item, name),\\\\n                    \\\\\\\"cover\\\\\\\": (cover ? parseDom(item, cover) + \\\\\\\"@Referer=\\\\\\\" : \\\\\\\"hiker://empty\\\\\\\"),\\\\n                    \\\\\\\"Toc\\\\\\\": MY_PARAMS.all.ruleToc,\\\\n                    \\\\\\\"content\\\\\\\": MY_PARAMS.all.ruleContent\\\\n                }\\\\n            })\\\\n        })\\\\n    } else {\\\\n        d.push({\\\\n            title: \\\\\\\"列表加载失败：\\\\\\\" + listrule,\\\\n            col_type: \\\\\\\"text_center_1\\\\\\\",\\\\n            url: \\\\\\\"hiker://empty\\\\\\\"\\\\n        })\\\\n    }\\\\n} catch (e) {\\\\n    d.push({\\\\n        title: \\\\\\\"加载失败：\\\\\\\" + e.message,\\\\n        col_type: \\\\\\\"text_center_1\\\\\\\",\\\\n        url: \\\\\\\"hiker://empty\\\\\\\"\\\\n    })\\\\n}\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"text_center_1\\\",\\\"name\\\":\\\"设置\\\",\\\"path\\\":\\\"config\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\ntry {\\\\n    if (!fileExist(\\\\\\\"hiker://files/yuedu/list.json\\\\\\\")) {\\\\n        writeFile(\\\\\\\"hiker://files/yuedu/list.json\\\\\\\", '{\\\\\\\"urls\\\\\\\":[]}')\\\\n    }\\\\n    d.push({\\\\n        title: \\\\\\\"添加订阅\\\\\\\",\\\\n        url: $(\\\\\\\"\\\\\\\", \\\\\\\"订阅名称\\\\\\\").input(() => {\\\\n            return $(\\\\\\\"\\\\\\\", \\\\\\\"订阅链接\\\\\\\").input((name) => {\\\\n                let list = JSON.parse(fetch(\\\\\\\"hiker://files/yuedu/list.json\\\\\\\"))\\\\n                list.urls.push({\\\\n                    name: name,\\\\n                    url: input\\\\n                })\\\\n                writeFile(\\\\\\\"hiker://files/yuedu/list.json\\\\\\\", JSON.stringify(list))\\\\n                try {\\\\n                    var t = fetch(input)\\\\n                    JSON.parse(t)\\\\n                    writeFile(\\\\\\\"hiker://files/yuedu/\\\\\\\" + md5(name) + \\\\\\\".json\\\\\\\", t)\\\\n                    return \\\\\\\"toast://导入成功\\\\\\\"\\\\n                } catch (e) {\\\\n                    return \\\\\\\"toast://导入失败\\\\\\\"\\\\n                }\\\\n                refreshPage()\\\\n            }, input)\\\\n        })\\\\n    })\\\\n    let list = JSON.parse(fetch(\\\\\\\"hiker://files/yuedu/list.json\\\\\\\"))\\\\n    list.urls.forEach((item, i) => {\\\\n        d.push({\\\\n            title: item.name,\\\\n            desc: item.url,\\\\n            url: $([\\\\\\\"删除\\\\\\\", \\\\\\\"编辑名称\\\\\\\", \\\\\\\"编辑地址\\\\\\\", \\\\\\\"更新\\\\\\\"]).select((lis, i) => {\\\\n                var list = lis\\\\n                if (input == \\\\\\\"删除\\\\\\\") {\\\\n                    return $(\\\\\\\"确认删除？\\\\\\\").confirm((list, i) => {\\\\n                        deleteFile(\\\\\\\"hiker://files/yuedu/\\\\\\\" + md5(list.urls[i].name) + \\\\\\\".json\\\\\\\")\\\\n                        list.urls.splice(i, 1)\\\\n                        writeFile(\\\\\\\"hiker://files/yuedu/list.json\\\\\\\", JSON.stringify(list))                        \\\\n                        refreshPage()\\\\n                    }, list, i)\\\\n                } else if (input == \\\\\\\"编辑名称\\\\\\\") {\\\\n                    return $(\\\\\\\"\\\\\\\").input((list, i) => {\\\\n                        list.urls[i].name = input\\\\n                        writeFile(\\\\\\\"hiker://files/yuedu/list.json\\\\\\\", JSON.stringify(list))\\\\n                        refreshPage()\\\\n                    }, list, i)\\\\n                } else if (input == \\\\\\\"编辑地址\\\\\\\") {\\\\n                    return $(\\\\\\\"\\\\\\\").input((list, i) => {\\\\n                        list.urls[i].url = input\\\\n                        writeFile(\\\\\\\"hiker://files/yuedu/list.json\\\\\\\", JSON.stringify(list))\\\\n                        refreshPage()\\\\n                    }, list, i)\\\\n                } else {\\\\n                    try {\\\\n                        var t = fetch(list.urls[i].url)\\\\n                        JSON.parse(t)\\\\n                        writeFile(\\\\\\\"hiker://files/yuedu/\\\\\\\" + md5(list.urls[i].name) + \\\\\\\".json\\\\\\\", t)\\\\n                        refreshPage()\\\\n                        toast(\\\\\\\"更新成功\\\\\\\")\\\\n                    } catch (e) {\\\\n                        toast(\\\\\\\"更新失败\\\\\\\")\\\\n                    }\\\\n                }\\\\n            }, list, i),\\\\n            col_type: \\\\\\\"text_1\\\\\\\"\\\\n        })\\\\n    })\\\\n} catch (e) {\\\\n    d.push({\\\\n        title: \\\\\\\"错误：\\\\\\\" + e.message,\\\\n        col_type: \\\\\\\"text_center_1\\\\\\\",\\\\n        url: \\\\\\\"hiker://empty\\\\\\\"\\\\n    })\\\\n}\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"text_1\\\",\\\"name\\\":\\\"目录\\\",\\\"path\\\":\\\"menu\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nvar res = getResCode()\\\\nlet Toc = MY_PARAMS.Toc\\\\nlet {\\\\n    getArray,\\\\n    getText,\\\\n    getUrl0\\\\n} = $.require(\\\\\\\"hiker://page/converter\\\\\\\");\\\\ngetArray(res, Toc.chapterList).forEach(item => {\\\\n    //log(item);    \\\\n    var title = getText(item, Toc.chapterName)\\\\n    if (title != \\\\\\\"\\\\\\\") {\\\\n        d.push({\\\\n            title: title,\\\\n            url: \\\\\\\"hiker://page/content\\\\\\\",\\\\n            extra: {\\\\n                title: title,\\\\n                content: MY_PARAMS.content,\\\\n                url: getUrl0(item, Toc.chapterList, Toc.chapterUrl) + \\\\\\\"#autoPage##readTheme#\\\\\\\"\\\\n            }\\\\n        })\\\\n    }\\\\n})\\\\nvar cp = d.map(function(item) {\\\\n    return {\\\\n        \\\\\\\"title\\\\\\\": item.title,\\\\n        \\\\\\\"url\\\\\\\": item.extra.url.replace(\\\\\\\"#autoPage##readTheme#\\\\\\\", \\\\\\\"\\\\\\\")\\\\n    }\\\\n})\\\\nd.unshift({\\\\n    title: \\\\\\\"下载\\\\\\\",\\\\n    url: \\\\\\\"hiker://page/download.view#noRecordHistory##noRefresh##noHistory#?rule=本地资源管理\\\\\\\",\\\\n    col_type: \\\\\\\"text_center_1\\\\\\\",\\\\n    extra: {\\\\n        chapterList: cp,\\\\n        defaultView: \\\\\\\"1\\\\\\\",\\\\n        info: {\\\\n            bookName: MY_PARAMS.bookName,\\\\n            bookTopPic: MY_PARAMS.cover,\\\\n            ruleName: \\\\\\\"悦读\\\\\\\",\\\\n            parseCode: $.toString((MY_PARAMS) => {\\\\n                var res = request(input);\\\\n                var rule = MY_PARAMS.content;\\\\n                let r = rule.content.replace(\\\\\\\"@\\\\\\\", \\\\\\\"&&\\\\\\\").replace(\\\\\\\"text\\\\\\\", \\\\\\\"Text\\\\\\\").replace(/\\\\\\\\.[0-9]/g, function(a) {\\\\n                    return a.replace(\\\\\\\".\\\\\\\", \\\\\\\",\\\\\\\")\\\\n                });\\\\n                let r1 = r.split(\\\\\\\"&&\\\\\\\");\\\\n                let r2 = r1.slice(0, r1.length - 1).join(\\\\\\\"&&\\\\\\\");\\\\n                let arr = pdfa(res, \\\\\\\"body&&\\\\\\\" + r2);\\\\n                //log(arr);\\\\n                var tt = \\\\\\\"\\\\\\\"\\\\n                for (let it of arr) {\\\\n                    it = it.replace(new RegExp(\\\\\\\"\\\\\\\\n\\\\\\\", \\\\\\\"g\\\\\\\"), \\\\\\\"--br--\\\\\\\");\\\\n                    //log(it);\\\\n                    var t = pdfh(it, \\\\\\\"Text\\\\\\\");\\\\n                    t = t.replace(new RegExp(\\\\\\\"--br--\\\\\\\", \\\\\\\"g\\\\\\\"), \\\\\\\"<br>\\\\\\\");\\\\n                    if (t == \\\\\\\"\\\\\\\") {\\\\n                        continue\\\\n                    }\\\\n                    let t2 = t.split(\\\\\\\"<br>\\\\\\\");\\\\n                    for (let it2 of t2) {\\\\n                        if (it2 == \\\\\\\"\\\\\\\" || it2.length == 1) {\\\\n                            continue\\\\n                        }\\\\n                        if (!it2.startsWith(\\\\\\\"　\\\\\\\") && !it2.startsWith(\\\\\\\"&nbsp;&nbsp;\\\\\\\")) {\\\\n                            it2 = \\\\\\\"&nbsp;&nbsp;&nbsp;&nbsp;\\\\\\\" + it2.trim();\\\\n                        }\\\\n                        if (rule.replaceRegex) {\\\\n                            it2 = it2.replace(new RegExp(rule.replaceRegex.replace(\\\\\\\"##\\\\\\\", \\\\\\\"\\\\\\\"), \\\\\\\"g\\\\\\\"), \\\\\\\"\\\\\\\")\\\\n                        }\\\\n                        if (it2 == \\\\\\\"\\\\\\\") {\\\\n                            continue\\\\n                        }\\\\n                        tt += it2 + \\\\\\\"\\\\\\\\n\\\\\\\"\\\\n                    }\\\\n                }\\\\n                return tt\\\\n            }, MY_PARAMS),\\\\n            type: \\\\\\\"novel\\\\\\\"\\\\n        }\\\\n    }\\\\n})\\\\nd.unshift({\\\\n    title: MY_PARAMS.bookName,\\\\n    img: MY_PARAMS.cover,\\\\n    url: MY_URL,\\\\n    col_type: \\\\\\\"movie_1_vertical_pic_blur\\\\\\\"\\\\n})\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"内容\\\",\\\"path\\\":\\\"content\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nvar res = getResCode()\\\\nvar rule = MY_PARAMS.content\\\\nlet r = rule.content.replace(\\\\\\\"@\\\\\\\", \\\\\\\"&&\\\\\\\").replace(\\\\\\\"text\\\\\\\", \\\\\\\"Text\\\\\\\").replace(/\\\\\\\\.[0-9]/g, function(a) {\\\\n    return a.replace(\\\\\\\".\\\\\\\", \\\\\\\",\\\\\\\")\\\\n});\\\\nlet r1 = r.split(\\\\\\\"&&\\\\\\\");\\\\nlet r2 = r1.slice(0, r1.length - 1).join(\\\\\\\"&&\\\\\\\");\\\\nlet arr = pdfa(res, \\\\\\\"body&&\\\\\\\" + r2);\\\\n//log(arr);\\\\nfor (let it of arr) {\\\\n    it = it.replace(new RegExp(\\\\\\\"\\\\\\\\n\\\\\\\", \\\\\\\"g\\\\\\\"), \\\\\\\"--br--\\\\\\\");\\\\n    //log(it);\\\\n    var t = pdfh(it, \\\\\\\"Text\\\\\\\");\\\\n    t = t.replace(new RegExp(\\\\\\\"--br--\\\\\\\", \\\\\\\"g\\\\\\\"), \\\\\\\"<br>\\\\\\\");\\\\n    if (t == \\\\\\\"\\\\\\\") {\\\\n        continue\\\\n    }\\\\n    let t2 = t.split(\\\\\\\"<br>\\\\\\\");\\\\n    for (let it2 of t2) {\\\\n        if (it2 == \\\\\\\"\\\\\\\" || it2.length == 1) {\\\\n            continue\\\\n        }\\\\n        if (!it2.startsWith(\\\\\\\"　\\\\\\\") && !it2.startsWith(\\\\\\\"&nbsp;&nbsp;\\\\\\\")) {\\\\n            it2 = \\\\\\\"&nbsp;&nbsp;&nbsp;&nbsp;\\\\\\\" + it2.trim();\\\\n        }\\\\n        if (rule.replaceRegex) {\\\\n            it2 = it2.replace(new RegExp(rule.replaceRegex.replace(\\\\\\\"##\\\\\\\", \\\\\\\"\\\\\\\"), \\\\\\\"g\\\\\\\"), \\\\\\\"\\\\\\\")\\\\n        }\\\\n        if (it2 == \\\\\\\"\\\\\\\" || it2 == \\\\\\\"&nbsp;&nbsp;&nbsp;&nbsp;\\\\\\\") {\\\\n            continue\\\\n        }\\\\n        d.push({\\\\n            title: it2,\\\\n            url: \\\\\\\"\\\\\\\",\\\\n            col_type: \\\\\\\"rich_text\\\\\\\",\\\\n            desc: \\\\\\\"\\\\\\\",\\\\n            pic_url: \\\\\\\"\\\\\\\"\\\\n        });\\\\n    }\\\\n}\\\\nd.unshift({\\\\n    title: \\\\\\\"<big>\\\\\\\" + MY_PARAMS.title + \\\\\\\"</big>\\\\\\\",\\\\n    col_type: \\\\\\\"rich_text\\\\\\\"\\\\n})\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_1_vertical_pic\\\",\\\"name\\\":\\\"搜索\\\",\\\"path\\\":\\\"search\\\",\\\"rule\\\":\\\"js:\\\\nlet {\\\\n    search\\\\n} = $.require(\\\\\\\"hiker://page/ss\\\\\\\");\\\\nlet d = [];\\\\nlet kw = getParam(\\\\\\\"kw\\\\\\\");\\\\nlet s = kw;\\\\nsetPageTitle(\\\\\\\"搜索\\\\\\\" + kw + \\\\\\\" \\\\\\\" + MY_PARAMS.bookSourceName);\\\\nlet matchMust = getItem(\\\\\\\"mm\\\\\\\", \\\\\\\"0\\\\\\\");\\\\nlet tip = \\\\\\\"精确匹配：\\\\\\\" + (matchMust == \\\\\\\"1\\\\\\\" ? \\\\\\\"是\\\\\\\" : \\\\\\\"否\\\\\\\");\\\\nif (MY_PAGE == 1) {\\\\n    d.push({\\\\n        title: tip,\\\\n        url: $(\\\\\\\"#noLoading#\\\\\\\").lazyRule(() => {\\\\n            setItem(\\\\\\\"mm\\\\\\\", getItem(\\\\\\\"mm\\\\\\\", \\\\\\\"0\\\\\\\") == \\\\\\\"0\\\\\\\" ? \\\\\\\"1\\\\\\\" : \\\\\\\"0\\\\\\\");\\\\n            refreshPage();\\\\n            return \\\\\\\"toast://OK\\\\\\\";\\\\n        }),\\\\n        col_type: \\\\\\\"text_1\\\\\\\",\\\\n    });\\\\n}\\\\nlet d2 = search(MY_PARAMS.rules, kw, MY_PAGE);\\\\nfor (let it of d2) {\\\\n    if (matchMust == \\\\\\\"0\\\\\\\" || (it.title && it.title.indexOf(kw) >= 0)) {\\\\n        it.title = it.title.includes(\\\\\\\"““””\\\\\\\") ? it.title : \\\\\\\"““””\\\\\\\" + it.title.replace(new RegExp(\\\\\\\"<em>|</em>\\\\\\\", \\\\\\\"g\\\\\\\"), \\\\\\\"\\\\\\\").replace(new RegExp(s, \\\\\\\"g\\\\\\\"), \\\\\\\"<strong><span style=\\\\\\\\\\\\\\\"color: #1E90FF\\\\\\\\\\\\\\\">\\\\\\\" + s + \\\\\\\"</span></strong>\\\\\\\")\\\\n        d.push(it);\\\\n    }\\\\n}\\\\n\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"转换\\\",\\\"path\\\":\\\"converter\\\",\\\"rule\\\":\\\"$.exports = {\\\\n    getArray: (html, rule) => {\\\\n        let r1 = rule.split(\\\\\\\"!\\\\\\\")[0].split(\\\\\\\"||\\\\\\\");\\\\n        let arr = pdfa(html, \\\\\\\"body&&\\\\\\\" + r1[0].replace(\\\\\\\" \\\\\\\", \\\\\\\"&&\\\\\\\").replace(\\\\\\\"@\\\\\\\", \\\\\\\"&&\\\\\\\"));\\\\n        if (r1.length > 1) {\\\\n            let r2 = r1[1].split(\\\\\\\":\\\\\\\");\\\\n            let r3 = [];\\\\n            for (let it of r2) {\\\\n                try {\\\\n                    let i = parseInt(it);\\\\n                    if (isNaN(i)) {\\\\n                        continue;\\\\n                    }\\\\n                    r3.push(i);\\\\n                } catch (e) {}\\\\n            }\\\\n            let arr2 = [];\\\\n            for (let i = 0; i < arr.length; i++) {\\\\n                if (r3.indexOf(i) < 0) {\\\\n                    arr2.push(arr[i]);\\\\n                }\\\\n            }\\\\n            return arr2;\\\\n        }\\\\n        log(\\\\\\\"获取失败，失败定位：\\\\\\\" + r1[0].replace(\\\\\\\" \\\\\\\", \\\\\\\"&&\\\\\\\").replace(\\\\\\\"@\\\\\\\", \\\\\\\"&&\\\\\\\"))\\\\n        return arr;\\\\n    },\\\\n    getText: (html, rule) => {\\\\n        var ru = rule.replace(\\\\\\\"@\\\\\\\", \\\\\\\"&&\\\\\\\").replace(\\\\\\\"text\\\\\\\", \\\\\\\"Text\\\\\\\").replace(/\\\\\\\\.[0-9]/g, function(a) {\\\\n            return a.replace(\\\\\\\".\\\\\\\", \\\\\\\",\\\\\\\")\\\\n        }).split(\\\\\\\"##\\\\\\\")\\\\n        if (ru.length == 1) {\\\\n            var r = pdfh(html, ru[0])\\\\n        } else {\\\\n            var r = pdfh(html, ru[0]).replace(new RegExp(ru[1], \\\\\\\"g\\\\\\\"), \\\\\\\"\\\\\\\")\\\\n        }\\\\n        if (r == \\\\\\\"\\\\\\\") {\\\\n            log(\\\\\\\"返回为空，可能是定位失败：\\\\\\\" + rule.replace(\\\\\\\"@\\\\\\\", \\\\\\\"&&\\\\\\\").replace(\\\\\\\"text\\\\\\\", \\\\\\\"Text\\\\\\\").replace(/\\\\\\\\.[0-9]/g, function(a) {\\\\n                return a.replace(\\\\\\\".\\\\\\\", \\\\\\\",\\\\\\\")\\\\n            }).split(\\\\\\\"##\\\\\\\")[0])\\\\n        }\\\\n        return r\\\\n    },\\\\n    getUrl0: (html, parentRule, rule) => {\\\\n        if (parentRule != null) {\\\\n            parentRule = parentRule.split(\\\\\\\"!\\\\\\\")[0];\\\\n        }\\\\n        let p = parentRule != null && parentRule[parentRule.length - 1] == \\\\\\\"a\\\\\\\" ? \\\\\\\"a&&\\\\\\\" : \\\\\\\"\\\\\\\";\\\\n        let r = pd(html, p + rule.replace(\\\\\\\"@\\\\\\\", \\\\\\\"&&\\\\\\\").replace(\\\\\\\"text\\\\\\\", \\\\\\\"Text\\\\\\\").replace(/\\\\\\\\.[0-9]/g, function(a) {\\\\n            return a.replace(\\\\\\\".\\\\\\\", \\\\\\\",\\\\\\\");\\\\n        }).split(\\\\\\\"##\\\\\\\")[0].split(\\\\\\\"##\\\\\\\")[0]);\\\\n        if (r == \\\\\\\"\\\\\\\") {\\\\n            log(\\\\\\\"返回为空，可能是定位失败：\\\\\\\" + p + rule.replace(\\\\\\\"@\\\\\\\", \\\\\\\"&&\\\\\\\").replace(\\\\\\\"text\\\\\\\", \\\\\\\"Text\\\\\\\").replace(/\\\\\\\\.[0-9]/g, function(a) {\\\\n                return a.replace(\\\\\\\".\\\\\\\", \\\\\\\",\\\\\\\");\\\\n            }).split(\\\\\\\"##\\\\\\\")[0])\\\\n        }\\\\n        return r\\\\n    }\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"聚搜\\\",\\\"path\\\":\\\"ju\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nlet {\\\\n    search,\\\\n    listRules\\\\n} = $.require(\\\\\\\"hiker://page/ss\\\\\\\");\\\\nlet {\\\\n    all,\\\\n    use,\\\\n    data\\\\n} = listRules(MY_PAGE);\\\\ndata = data || [];\\\\nlet s = getParam(\\\\\\\"kw\\\\\\\");\\\\nsetPageTitle(\\\\\\\"搜索\\\\\\\" + s);\\\\nlet matchMust = getItem(\\\\\\\"mm\\\\\\\", \\\\\\\"0\\\\\\\");\\\\nlet tip = \\\\\\\"搜索源：\\\\\\\" + use + \\\\\\\"/\\\\\\\" + all + \\\\\\\"  精确匹配：\\\\\\\" + (matchMust == \\\\\\\"1\\\\\\\" ? \\\\\\\"是\\\\\\\" : \\\\\\\"否\\\\\\\");\\\\nif (MY_PAGE == 1) {\\\\n    d.push({\\\\n        title: tip,\\\\n        url: $(\\\\\\\"#noLoading#\\\\\\\").lazyRule(() => {\\\\n            setItem(\\\\\\\"mm\\\\\\\", getItem(\\\\\\\"mm\\\\\\\", \\\\\\\"0\\\\\\\") == \\\\\\\"0\\\\\\\" ? \\\\\\\"1\\\\\\\" : \\\\\\\"0\\\\\\\");\\\\n            refreshPage();\\\\n            return \\\\\\\"toast://OK\\\\\\\";\\\\n        }),\\\\n        col_type: \\\\\\\"text_1\\\\\\\",\\\\n        extra: {\\\\n            id: \\\\\\\"yuedu-s-h\\\\\\\"\\\\n        }\\\\n    });\\\\n} else if (data.length > 0) {\\\\n    updateItem(\\\\\\\"yuedu-s-h\\\\\\\", {\\\\n        title: tip\\\\n    });\\\\n}\\\\nlet p = MY_PAGE;\\\\nlet pageid = \\\\\\\"yuedu-page\\\\\\\" + MY_PAGE;\\\\nif (data.length > 0) {\\\\n    d.push({\\\\n        title: \\\\\\\"加载第\\\\\\\" + MY_PAGE + \\\\\\\"页中，进度：1/\\\\\\\" + data.length,\\\\n        url: \\\\\\\"hiker://empty\\\\\\\",\\\\n        col_type: \\\\\\\"text_center_1\\\\\\\",\\\\n        desc: \\\\\\\"\\\\\\\",\\\\n        pic_url: \\\\\\\"\\\\\\\",\\\\n        extra: {\\\\n            id: pageid\\\\n        }\\\\n    });\\\\n}\\\\nsetResult(d);\\\\nif (data.length > 0) {\\\\n    //多线程加载\\\\n    let tasks = data.map(it => {\\\\n        return {\\\\n            func: function(rule) {\\\\n                return search(rule, s, 1);\\\\n            },\\\\n            param: it,\\\\n            id: \\\\\\\"rule@\\\\\\\" + it.name\\\\n        }\\\\n    });\\\\n\\\\n    batchExecute(tasks, {\\\\n        func: function(param, id, error, result) {\\\\n            //log(\\\\\\\"listener: \\\\\\\" + (result || []).length)\\\\n            param.i = param.i + 1;\\\\n            if (result) {\\\\n                try {\\\\n                    for (let it of result) {\\\\n                        param.j = param.j + 1;\\\\n                        if (matchMust == \\\\\\\"1\\\\\\\") {\\\\n                            if (!it.title || !it.title.includes(s)) {\\\\n                                continue;\\\\n                            }\\\\n                        }\\\\n                        let extra = it.extra || {};\\\\n                        extra.id = \\\\\\\"__app\\\\\\\" + MY_PAGE + \\\\\\\"@\\\\\\\" + param.j;\\\\n                        extra.bookName = it.title\\\\n                        extra.cover = it.pic_url || it.img\\\\n                        addItemBefore(pageid, {\\\\n                            title: it.title.includes(\\\\\\\"““””\\\\\\\") ? it.title : \\\\\\\"““””\\\\\\\" + it.title.replace(new RegExp(\\\\\\\"<em>|</em>\\\\\\\", \\\\\\\"g\\\\\\\"), \\\\\\\"\\\\\\\").replace(new RegExp(s, \\\\\\\"g\\\\\\\"), \\\\\\\"<strong><span style=\\\\\\\\\\\\\\\"color: #1E90FF\\\\\\\\\\\\\\\">\\\\\\\" + s + \\\\\\\"</span></strong>\\\\\\\"),\\\\n                            desc: it.desc,\\\\n                            url: it.url,\\\\n                            pic_url: it.pic_url || it.img,\\\\n                            col_type: it.pic_url || it.img ? 'movie_1_vertical_pic' : \\\\\\\"text_1\\\\\\\",\\\\n                            extra: extra\\\\n                        })\\\\n                    }\\\\n                } catch (e) {}\\\\n\\\\n            }\\\\n            if (param.i >= param.all) {\\\\n                deleteItem(pageid)\\\\n            } else {\\\\n                updateItem({\\\\n                    title: \\\\\\\"加载第\\\\\\\" + MY_PAGE + \\\\\\\"页中，进度：\\\\\\\" + (param.i + 1) + \\\\\\\"/\\\\\\\" + param.all,\\\\n                    url: \\\\\\\"hiker://empty\\\\\\\",\\\\n                    col_type: \\\\\\\"text_center_1\\\\\\\",\\\\n                    desc: \\\\\\\"\\\\\\\",\\\\n                    pic_url: \\\\\\\"\\\\\\\",\\\\n                    extra: {\\\\n                        id: pageid\\\\n                    }\\\\n                })\\\\n            }\\\\n        },\\\\n        param: {\\\\n            all: data.length,\\\\n            i: 0,\\\\n            j: -1\\\\n        }\\\\n    });\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"搜索辅助\\\",\\\"path\\\":\\\"ss\\\",\\\"rule\\\":\\\"$.exports = {\\\\n    search: (rule, kw, page) => {\\\\n        let d = [];\\\\n        let m = rule.ruleSearch\\\\n        // 阅读=>视界\\\\n        let u = rule.bookSourceUrl + rule.searchUrl;\\\\n        let url = u.replace(\\\\\\\"{{page}}\\\\\\\", page).replace(\\\\\\\"{{key}}\\\\\\\", kw)\\\\n        let listrule = \\\\\\\"body&&\\\\\\\" + m.bookList.replace(/![0-9]/g, \\\\\\\"\\\\\\\").replace(\\\\\\\" \\\\\\\", \\\\\\\"&&\\\\\\\").split(\\\\\\\"||\\\\\\\")[0]\\\\n        let author = m.author.replace(\\\\\\\"@\\\\\\\", \\\\\\\"&&\\\\\\\").replace(\\\\\\\"text\\\\\\\", \\\\\\\"Text\\\\\\\").replace(/\\\\\\\\.[0-9]/g, function(a) {\\\\n            return a.replace(\\\\\\\".\\\\\\\", \\\\\\\",\\\\\\\")\\\\n        })\\\\n        let cover = m.coverUrl.replace(\\\\\\\"@\\\\\\\", \\\\\\\"&&\\\\\\\").replace(/\\\\\\\\.[0-9]/g, function(a) {\\\\n            return a.replace(\\\\\\\".\\\\\\\", \\\\\\\",\\\\\\\")\\\\n        })\\\\n        let name = m.name.replace(\\\\\\\"@\\\\\\\", \\\\\\\"&&\\\\\\\").replace(\\\\\\\"text\\\\\\\", \\\\\\\"Text\\\\\\\").replace(/\\\\\\\\.[0-9]/g, function(a) {\\\\n            return a.replace(\\\\\\\".\\\\\\\", \\\\\\\",\\\\\\\")\\\\n        })\\\\n        let bookurl = m.bookUrl.replace(\\\\\\\"@\\\\\\\", \\\\\\\"&&\\\\\\\").replace(/\\\\\\\\.[0-9]/g, function(a) {\\\\n            return a.replace(\\\\\\\".\\\\\\\", \\\\\\\",\\\\\\\")\\\\n        })\\\\n        let intro = m.intro.replace(\\\\\\\"@\\\\\\\", \\\\\\\"&&\\\\\\\").replace(\\\\\\\"text\\\\\\\", \\\\\\\"Text\\\\\\\").replace(/\\\\\\\\.[0-9]/g, function(a) {\\\\n            return a.replace(\\\\\\\".\\\\\\\", \\\\\\\",\\\\\\\")\\\\n        });\\\\n        //setPageTitle(\\\\\\\"搜索\\\\\\\" + getParam(\\\\\\\"kw\\\\\\\") + \\\\\\\" \\\\\\\" + MY_PARAMS.bookSourceName);\\\\n        //MY_URL = url;\\\\n        let res = request(url)\\\\n        let list = pdfa(res, listrule)\\\\n        list.forEach(item => {\\\\n            d.push({\\\\n                title: parseDomForHtml(item, name),\\\\n                img: parseDom(item, cover, url),\\\\n                url: \\\\\\\"hiker://page/menu?url=\\\\\\\" + parseDom(item, bookurl, url) + \\\\\\\"#autoCache##immersiveTheme#\\\\\\\",\\\\n                desc: rule.bookSourceName + \\\\\\\"\\\\\\\\n\\\\\\\" + parseDomForHtml(item, author) + \\\\\\\"\\\\\\\\n\\\\\\\" + parseDomForHtml(item, intro),\\\\n                extra: {\\\\n                    \\\\\\\"Toc\\\\\\\": rule.ruleToc,\\\\n                    \\\\\\\"content\\\\\\\": rule.ruleContent,\\\\n                    \\\\\\\"bookName\\\\\\\": parseDomForHtml(item, name),\\\\n                    \\\\\\\"cover\\\\\\\": parseDom(item, cover, url)\\\\n                }\\\\n            })\\\\n        });\\\\n        return d;\\\\n    },\\\\n    listRules: (page, rule) => {\\\\n        try {\\\\n            //并发数量\\\\n            let size = 10;\\\\n            let data1 = JSON.parse(fetch(\\\\\\\"hiker://files/yuedu/list.json\\\\\\\"))\\\\n            let list = JSON.parse(fetch(\\\\\\\"hiker://files/yuedu/\\\\\\\" + md5(getMyVar(\\\\\\\"tab\\\\\\\", data1.urls[0].name)) + \\\\\\\".json\\\\\\\"))\\\\n            let rules = [];\\\\n            list.forEach(item => {\\\\n                let s = JSON.stringify(item)\\\\n                if (s.includes(\\\\\\\"<js>\\\\\\\") || s.includes(\\\\\\\"@js:\\\\\\\") || s.includes(\\\\\\\"$.\\\\\\\") || s.includes(\\\\\\\"🔞\\\\\\\")) {\\\\n                    return\\\\n                } else {\\\\n                    rules.push(item);\\\\n                }\\\\n            });\\\\n            if (!page && !rule) {\\\\n                return rules.map(it => it.name);\\\\n            }\\\\n            if (rule != null) {\\\\n                return rules.filter(i => i.name == rule);\\\\n            }\\\\n            let start = (page - 1) * size;\\\\n            if (rules.length < start + 1) {\\\\n                return [];\\\\n            }\\\\n            let len = size;\\\\n            if (rules.length < page * size) {\\\\n                len = rules.length - start\\\\n            }\\\\n            let all = rules.length;\\\\n            let use = (page - 1) * size + len;\\\\n            return {\\\\n                all: all,\\\\n                use: use,\\\\n                data: rules.slice(start, start + len)\\\\n            };\\\\n        } catch (e) {\\\\n            return {\\\\n                all: 0,\\\\n                use: 0,\\\\n                data: []\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\"}]\",\"proxy\":\"\"}","title":"你还没有书哦～～点我进入设置"}