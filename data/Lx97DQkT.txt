  size_t sort_term_index = 0;
  for (const auto &term : m_search_config.sort_terms) {
    if (sort_term_index >= LWSearchResult::k_max_sort_terms) {
      break;
    }

    const bool reverse = term[0] == '-';
    const std::string key = term.substr(reverse ? 1 : 0);

    if (key == "title") {
      sortByString(reverse,
                   [this](const LWSearchResult &e) { return m_index_handler.getTitle(e); },
                   ent, m_service_config.min_items_per_thread, sort_term_index);
    }
    else if (key == "name") {
      sortByString(reverse,
                   [this](const LWSearchResult &e) { return m_index_handler.getFilename(e); },
                   ent, m_service_config.min_items_per_thread, sort_term_index);
    }
    else if (key == "updated") {
      sortByInteger(reverse,
                    [](const LWSearchResult &e) { return time_t(e.snaptime); },
                    ent, m_service_config.min_items_per_thread, sort_term_index);
    }
    else if (key == "time") {
      sortByInteger(reverse,
                    [this](const LWSearchResult &e) { return m_index_handler.getTimestamp(e).to_timet(); },
                    ent, m_service_config.min_items_per_thread, sort_term_index);
    }
    else if (key == "folder") {
      sortByBoolean(reverse,
                    [this](const LWSearchResult &e) { return m_index_handler.isFile(e); },
                    ent, m_service_config.min_items_per_thread, sort_term_index);
    }
    else if (key == "audio") {
      sortByBoolean(reverse,
                    [this](const LWSearchResult &e) { return !m_index_handler.isAudio(e); },
                    ent, m_service_config.min_items_per_thread, sort_term_index);
    }
    else if (key == "video") {
      sortByBoolean(reverse,
                    [this](const LWSearchResult &e) { return !m_index_handler.isVideo(e); },
                    ent, m_service_config.min_items_per_thread, sort_term_index);
    }
    else if (key == "image") {
      sortByBoolean(reverse,
                    [this](const LWSearchResult &e) { return !m_index_handler.isImage(e); },
                    ent, m_service_config.min_items_per_thread, sort_term_index);
    }
    else if (key == "message") {
      sortByBoolean(reverse,
                    [this](const LWSearchResult &e) { return !m_index_handler.isMessage(e); },
                    ent, m_service_config.min_items_per_thread, sort_term_index);
    }
    else if (key == "document") {
      sortByBoolean(reverse,
                    [this](const LWSearchResult &e) { return !m_index_handler.isDocument(e); },
                    ent, m_service_config.min_items_per_thread, sort_term_index);
    }
    // reverse sort on error makes no sense
    else if (key == "error") {
      sortByInteger(false,
                    [](const LWSearchResult &e) { return e.error(); },
                    ent, m_service_config.min_items_per_thread, sort_term_index);
    }
    else if (key == "size") {
      sortByInteger(reverse,
                    [this](const LWSearchResult &e) { return string2AnyInt<uint64_t>(m_index_handler.getMeta(e, k_size, k_zero).toString()); },
                    ent, m_service_config.min_items_per_thread, sort_term_index);
    }
    //
    // Meta data sorting
    //
    else {
      sortByString(reverse,
                   [this, &key](const LWSearchResult &e) { return m_index_handler.getMeta(e, LWString(key)); },
      ent, m_service_config.min_items_per_thread, sort_term_index);
    }

    sort_term_index++;
  }