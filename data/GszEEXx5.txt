#include <memoryapi.h>
#include <stdbool.h>
#include <stdlib.h>
#include <stdio.h>
#include <math.h>

typedef uintptr_t addr_t;

#define _addr(x) (addr_t)(&(x))

int main(void) {

    int start_addr;
    printf("\033[31mstart addr: %p\n\033[0m", &start_addr);

    bool bl = true;
    printf("\033[32mi addr: %p\n\033[0m", &bl);

    struct S {
        char bbb;
        int a;
        long b;
    } S;

    struct S s;
    s.a = 2003;
    s.bbb = 1;
    s.b = 2008;

    printf("\033[35ms(%db) addr: %p, s.a: %p, s.b: %p\n\033[0m", sizeof(s), &s, &s.a, &s.b);

    int b = 1488;
    printf("\033[33mb addr: %p\n\033[0m", &b);

    int *c = (int*)malloc(sizeof(int));
    *c = 114888;

    printf("\033[34mc addr: stack(%p) heap(%p)\n\033[0m", &c, c);

    printf("-----------------------------\n");

    addr_t addr;
    for (int i = -45; i < 20; i++) {

        if (i <= 0) {
            addr = _addr(start_addr) + i;
        } else {
            addr = (addr_t)c - 10 + i;
        }

        if (i == 1) {
            printf("...\n");
        }

        if (addr == _addr(start_addr)) {
            printf("\033[31m");
        } else if (addr == _addr(bl)) {
            printf("\033[32m");
        } else if (addr == _addr(b)) {
            printf("\033[33m");
        } else if (addr == _addr(c)) {
            printf("\033[34m");
        } else if (addr == _addr(s)) {
            printf("\033[35m");
        } else if (addr == (addr_t)c) {
            printf("\033[44m");
            //free(addr);
        }
        
        if (addr % 4 == 0)
            printf("\033[1m%d.", abs(i)/4);
        else
            printf("  ");
        printf("addr: %p = %d\033[0m\n", addr, *((int*)(addr)));
    }
    

    return EXIT_SUCCESS;
}