#pragma once

#include <istream>
#include <iostream>
#include <map>
#include <string>
#include <unordered_map>
#include <variant>
#include <vector>

namespace json {
    inline std::string none_str = "null";

    class ParsingError : public std::runtime_error {
    public:
        using runtime_error::runtime_error;
    };

    class Node;

    using Dict = std::map<std::string, Node>;
    using Array = std::vector<Node>;

    class Node {
    public:
        using Value = std::variant<std::nullptr_t, Array, Dict, bool, int, double, std::string>;

        Node();

        Node(std::nullptr_t);

        Node(Array value);

        Node(Dict value);

        Node(bool value);

        Node(int value);

        Node(double value);

        Node(std::string value);

        const std::vector<Node> &AsArray() const;

        const std::map<std::string, Node> &AsMap() const;

        bool AsBool() const;

        int AsInt() const;

        double AsDouble() const;

        const std::string &AsString() const;

        bool IsInt() const;

        bool IsDouble() const; //Возвращает true, если в Node хранится int либо double.

        bool IsPureDouble() const; //Возвращает true, если в Node хранится double.

        bool IsBool() const;

        bool IsString() const;

        bool IsNull() const;

        bool IsArray() const;

        bool IsMap() const;

        const Value& GetValue() const;

    private:
        Value value_;
    };

    class Document {
    public:
        explicit Document(Node root);

        const Node &GetRoot() const;

    private:
        Node root_;
    };

    Document Load(std::istream &input);

    // Шаблон, подходящий для вывода double и int
    template <typename Value>
    void PrintValue(const Value& value, std::ostream& out) {
        out << value;
    }
    // Перегрузка функции PrintValue для вывода значений null
    void PrintValue(std::nullptr_t, std::ostream& out);
    void PrintValue(const Array& array, std::ostream& out);
    void PrintValue(const Dict& dict, std::ostream& out);
    void PrintValue(const bool value, std::ostream& out);
    //void PrintValue(const std::string& str, std::ostream& out);
    void Print(const Node& node, std::ostream& out);
    void Print(const Document& doc, std::ostream& out);

    bool operator ==(const Node& lv, const Node& rv);
    bool operator !=(const Node& lv, const Node& rv);

    bool operator ==(const Document& lv, const Document& rv);
    bool operator !=(const Document& lv, const Document& rv);
}