package ru.groupstp.tourpass.logger.aspect.rate.limit.aop;

import com.google.common.collect.Maps;
import com.google.common.util.concurrent.RateLimiter;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.Signature;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.reflect.MethodSignature;
import org.springframework.stereotype.Component;
import org.springframework.transaction.support.TransactionTemplate;
import ru.groupstp.tourpass.logger.aspect.rate.limit.annotation.RateLimit;
import ru.groupstp.tourpass.logger.error.code.RateLimitServiceErrorEnum;
import ru.groupstp.tourpass.logger.exception.TourpassException;
import ru.groupstp.tourpass.logger.functional.ThrowableConsumer;
import ru.groupstp.tourpass.logger.functional.ThrowableRunnable;
import ru.groupstp.tourpass.logger.utils.TourpassUtils;
import ru.groupstp.tourpass.logger.utils.Utils;

import java.time.Duration;
import java.time.temporal.ChronoUnit;
import java.util.Map;
import java.util.concurrent.TimeUnit;

@Slf4j
@Aspect
@Component
@RequiredArgsConstructor
@SuppressWarnings("UnstableApiUsage")
public class RateLimitAspect {

    private final Map<String, RateLimiter> rateLimiters = Maps.newHashMap();
    private final TransactionTemplate transactionTemplate;

    @Around("@annotation(rateLimit)")
    public Object proceedWithRateLimit(ProceedingJoinPoint joinPoint, RateLimit rateLimit) throws Throwable {
        Signature signature = joinPoint.getSignature();

        String methodSignature = signature.toString();
        log.info("Method name: {}", methodSignature);

        RateLimiter rateLimiter = rateLimiters.get(methodSignature);
        var acquireTimeout = Duration.ofMillis(rateLimit.duration());
        var timeout = acquireTimeout.get(ChronoUnit.NANOS);

        if (Utils.isNull(rateLimiter)) {
            rateLimiter = RateLimiter.create(rateLimit.permitsPerSecond());
            rateLimiters.put(methodSignature, rateLimiter);
        }

        if (!rateLimiter.tryAcquire(timeout, TimeUnit.NANOSECONDS)) {
            throw new TourpassException(RateLimitServiceErrorEnum.IM_USED);
        }

        var timeSpent = rateLimiter.acquire();
        log.info("Spent time: {}", timeSpent);


        Class<?> returnType = ((MethodSignature) signature).getReturnType();

        if (rateLimit.withTransaction()) {
            if (returnType.equals(Void.TYPE)) {
                log.info("TourPassUtils.doWithoutResult()");
                ThrowableRunnable runnable = joinPoint::proceed;
                TourpassUtils.doWithoutResult(transactionTemplate, runnable);
                return null;
            } else {
                log.info("TourPassUtils.doWithResult()");
                ThrowableConsumer<Object> consumer = joinPoint::proceed;
                return TourpassUtils.doWithResult(transactionTemplate, consumer);
            }
        } else {
            log.info("without Transaction");
            return joinPoint.proceed();
        }
    }
}