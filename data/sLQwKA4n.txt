#include <iostream>
#include <vector>
#define int long long
using namespace std;
void dfs(vector<vector<int>>& graph, vector<int>& a, vector<int>& dp1, vector<int>& dp2, vector<bool>& used, int u){
    used[u]=true;
    int sum1=0;
    int sum2=0;
    for (int v:graph[u]){
        if (!used[v]){
            dfs(graph, a, dp1, dp2, used, v);
            sum1+=max(dp1[v], dp2[v]);
            sum2+=dp2[v];
        }
    }
    dp1[u]=max(sum1, sum2+a[u]);
    dp2[u]=sum1;
    //cout<<u<<" "<<dp1[u]<<" "<<dp2[u]<<"\n";

}
signed main(){
    int n;
    cin>>n;
    vector <int> a(n);
    for (int i=0; i<n; i++){
        cin>>a[i];
    }
    vector<vector<int>> graph(n);
    for (int i=0; i<n-1; i++){
        int x, y;
        cin>>x>>y;
        x--, y--;
        graph[x].push_back(y);
        graph[y].push_back(x);
    }
    vector <int> dp1(n);
    vector <int> dp2(n);
    vector <bool> used(n);
    dfs(graph, a, dp1, dp2, used, 0);
    cout<<max(dp1[0], dp2[0])<<"\n";
}
