import java.text.DecimalFormat;

public class ExamenBlanc_ResultatDiplome {

	static String STUDENTS [] = {"Virginie Stella", "Jonathan Maes" ,
			"Jules Piler" ,"ReMi SolLaMi" , "Mattheow O Casu" ,
			"Melissa Biensescheveux", "Jeremy Glauque" , "Julien Fourien",
			"Beumier Tudor" , "Jurassin Muraptor" , "Corentin Fairelesot"};
	final static int WEIGHTS [] = {6,3,4,2,2,1,4};
	static double RESULTS [] [] = {{9.5,10,11,10,10,10,10}, {12,12,12,14,10,13,12},
			{16,16,17,15,18,17,17},{19,20,19,20,18,18,19},{5,11,12,20,10,11,14},
			{14,14,14,15,13,15,14},{10,11,10,11,10,10.5,11},{18,17,19,15,14,16,20},
			{14,15,15,15.5,14,13,14.5},{16,14,10,2,18,15,14},{11,12,10,10,11,11.5,10}};
	final static String GRADES [] = {"avec fruit","Satisfaction", "Distinction" , "Grande Distinction",
			"La plus Grande Distinction"};
	final static double SEUIL_GRADES [] = {50,60,70,80,90};
	final static double SEUIL_REUSSITE = 10;
	final static String FORMAT_MOYENNE = "0.00";
	final static int RANK_MOYENNE = 30 ;
	
	public static void main(String[] args) {
		
		double Moyenne ;
		
		for (int i = 0; i < STUDENTS.length ; i++) {
			//utilisation d'une boucle for car on parcour un tableau
			if (CheckFails (RESULTS , SEUIL_REUSSITE, i) == false) {
			Moyenne = (double)Math.round(CalculMoyenne (WEIGHTS , RESULTS, i)*100)/100;//Math.round arrondie la moyenne (mais ne la mets pas au format "0.00") pour ne pas poser de conflit a la détermination des grades
			System.out.println(PlaceNumberToRank (STUDENTS [i],FormatReelDouble (Moyenne , FORMAT_MOYENNE),RANK_MOYENNE) + " % " + QuelGrades (Moyenne, GRADES ,SEUIL_GRADES));
			}//end if
		}//end for

	}//end main

	/**
	 * Fonction qui détermine le grade l'etudiant recoit si il en a un retourne une caine de caractere composé du grade en question ou vide
	 * @param Moyenne Moyenne de l'étudiant Deja arrondie pour l'affichage
	 * @param Grades tableau des differents grades que les étudiants peuvent recevoir
	 * @param ValMinGrades Tableau composé des moyenne minimum qu'un étudiants doit avoir pour atteindre les grades du tableau Grades (les index corespondent)
	 * 			ATTENTION LES VALEURS ET LES GRANDES DOIVENT ÊTRE ENCODE DU PLUS PETIT AU PLUS GRAND
	 * @return une chaine de caractere
	 */
	public static String QuelGrades (double Moyenne , String Grades [], double ValMinGrades []) {
		for (int i = Grades.length-1 ; i >= 0 ; i--) {
			//utilisation d'une boucle for car on parcour un tableau
			if (Moyenne >= ValMinGrades [i]) {
				return Grades [i];
			}//end if
		}//end for
		return "";
	}// end QuelGrades
	
	/**
	 * Fonction qui calcule et renvoie la moyenne d'un étudiants en pourcentage a partir d'un tableau a double entré qui reprend toutes les notes sur 20 de tous les étudiants
	 * @param Poids Tableau qui est composé des poids (importances) des differents cours
	 * @param Resultats Tbl des résultats sur 20 de tous les étudiants (1 étudiants par ligne)
	 * @param index Index de l'étudiant dont on calcul la moyenne
	 * @return un double 
	 */
	public static double CalculMoyenne (int Poids [], double Resultats [] [], int index) {
		int PoidsTotal = 0;
		double SommePondere = 0.0;
		
		for (int i = 0 ; i < Poids.length ; i++) {
			//utilisation d'une boucle for car on parcour un tableau
			PoidsTotal = PoidsTotal + Poids [i];
			SommePondere = SommePondere + (Resultats [index] [i] * Poids [i]);
		}//end for
		
		return 5 * (SommePondere/PoidsTotal);
	}//end calculMoyenne
	
	/**
	 * Fonction qui vérifie si un étudiant a des échecs ou non
	 * @param Resultats Tbl des résultats de tous les étudiants (1 étudiants par ligne)
	 * @param ResultsMin Resultats minimum que l'eleve doit avoir pour ne pas etre en échec
	 * @param index Index de l'étudiant dont on vérifie les échecs
	 * @return vrai si il a des échecs
	 */
	public static boolean CheckFails(double Resultats [] [] , double ResultsMin, int index) {
		
		for (int i = 0 ; i < Resultats[index].length ; i++) {
			//utilisation d'une boucle for car on parcour un tableau
			if (Resultats [index] [i] < ResultsMin) {
				return true;
			}//end if
		}//end for
		return false;
	}//end CheckFails

	/**
	 * Fonction qui fusionne un nombre a une chaine de caractere a un certain rank et qui renvoie une chaine de caractere avec le  nombre
	 * @param OriginalStr Chaine de caractere auquel ce grefera le nombre
	 * @param NumberToPlace nombre a placé apres (dans) la chaine de caractere
	 * @param rank La place a laquel doit ce trouvé le nombre
	 * @return
	 */
	static String PlaceNumberToRank (String OriginalStr, String NumberToPlace, int rank) {
		
		if (OriginalStr.length() > rank - NumberToPlace.length()) {
			OriginalStr = OriginalStr.substring(0, rank - 1 - NumberToPlace.length());
		}//end if
		OriginalStr = OriginalStr + " ".repeat(rank - OriginalStr.length() - NumberToPlace.length());
		return OriginalStr + NumberToPlace;
	}//end PlaceNumberToRank
	
	/**
	  * Fonction qui transforme un réel au format voulu et qui le reenve
	  * @param ValToPrint valeur réel à formater
	  * @param formatAff format voulu du réel ex : "#.##"
	  * @return retourne un reel double
	  */
	static String FormatReelDouble (double ValToPrint, String formatAff){
		 
		 DecimalFormat DfFormat1 = new DecimalFormat (formatAff);
		 return DfFormat1.format(ValToPrint);
		 
	 }//FormatReelDouble
}//end class
