func CompressGzip(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		// проверяем, что клиент поддерживает gzip-сжатие
		if !strings.Contains(r.Header.Get("Accept-Encoding"), "gzip") {
			// если gzip не поддерживается, передаём управление дальше без изменений
			log.Printf("CompressGzip::: Not using!")
			next.ServeHTTP(w, r)
			return
		}

		// создаём gzip.Writer поверх текущего w
		gz, err := gzip.NewWriterLevel(w, gzip.BestSpeed)
		if err != nil {
			io.WriteString(w, err.Error())
			return
		}
		defer gz.Close()
		log.Printf("CompressGzip::: post")
		w.Header().Set("Content-Encoding", "gzip")
		// передаём обработчику страницы переменную типа gzipWriter для вывода данных
		//next.ServeHTTP(gzipWriter{ResponseWriter: w, Writer: gz}, r)
		//next.ServeHTTP(gzipWriter{ResponseWriter: w, Writer: gz}, r.WithContext(ctx))
		next.ServeHTTP(gzipWriter{ResponseWriter: w, Writer: gz}, r.WithContext(r.Context()))
	})
}