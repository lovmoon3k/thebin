#include<bits/stdc++.h>
using namespace std;

struct node
{
    int val;
    node * left;
    node * right;
    pair<int, int> range;
    node(int x = 0)
    {
        val = x;
        left = right = NULL;
    }
};

typedef node * Node;

Node rootnode;
int N;

int mid(int l, int r) { return (l+r)>>1; }

Node build_st(vector<int> &a, int l, int r)
{
    if(l==r) return new node(a[l]);

    int m = mid(l, r);

    // post order traversal
    Node cur = new node();
    cur->left = build_st(a, l, m);
    cur->right = build_st(a, m+1, r);

    // type of seg-tree //
    cur->val = cur->left->val + cur->right->val;

    return cur;
}

void build_st(vector<int> &a)
{
    N = a.size();
    rootnode = build_st(a, 0, N-1);
}

int query(Node root, int lq, int rq, int ls, int rs)
{
    if(lq > rs || rq < ls) return 0;
    if(ls>=lq && rs<=rq) return root->val;
    int m = mid(ls, rs);
    return query(root->left, lq, rq, ls, m) + query(root->right, lq, rq, m+1,rs);
}

int query(int l, int r) { return query(rootnode, l, r, 0, N-1); }


void update(Node root, int dif, int idx, int ls, int rs)
{
    if(idx < ls || idx > rs) return;
    
    if(ls == rs && ls == idx)
    {
        root->val += dif;
        return;
    }

    int m = mid(ls, rs);
    update(root->left, dif, idx, ls, m);
    update(root->right, dif, idx, m+1, rs);

    root->val += dif;
}

void update(vector<int> &a, int idx, int val) { update(rootnode, val-a[idx], idx, 0, N-1); }