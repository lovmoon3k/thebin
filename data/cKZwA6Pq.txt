using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace EntornosMultijugador2023.Tema2.EjersSemaforos
{
    class E12Semaforos
    {
        volatile static int producto = 0;
        volatile static bool avisoProxy = false;
        volatile static bool avisoCliente = false;
        volatile static bool avisoServer = false;
        static Random r = new Random();

        static SemaphoreSlim semServer = new SemaphoreSlim(0);

        static SemaphoreSlim semProxy = new SemaphoreSlim(0);
        static SemaphoreSlim semProxy2 = new SemaphoreSlim(0);
        static SemaphoreSlim semProxy3 = new SemaphoreSlim(0);

        static SemaphoreSlim semCliente = new SemaphoreSlim(1);
        static SemaphoreSlim semCliente2 = new SemaphoreSlim(0);
        const int N_PRODUCTOS = 10;

        static void Servidor()
        {
            for (int i = 0; i < N_PRODUCTOS; i++)
            {
                semServer.Wait();
                if (avisoServer)
                {
                    producto++;
                    WriteLine("Servidor: " + producto);
                    avisoServer = false;
                    semProxy3.Release();
                }

            }
        }
        static void Proxy()
        {
            for (int i = 0; i < N_PRODUCTOS; i++)
            {
                semProxy.Wait();
                WriteLine("Proxy: " + producto);

                semProxy2.Wait();
                if (avisoProxy)
                {
                    producto++;
                    WriteLine("Proxy actualiza: " + producto);
                    avisoServer = true;
                    semServer.Release();

                    semProxy3.Wait();
                    WriteLine("Proxy: " + producto);
                    avisoCliente = true;

                }
                else //Para que no se quede esperando activamente en el wait, realmente ni deberÃ­a pasar por el server
                {
                    semServer.Release();
                }

                semCliente2.Release();
                semProxy2.Release();
            }
        }
        static void Cliente()
        {
            for (int i = 0; i < N_PRODUCTOS; i++)
            {
                semCliente.Wait();
                producto = r.Next();
                WriteLine("Cliente: " + producto);
                avisoProxy = randBool();
                semProxy.Release();
                semProxy2.Release();


                semCliente2.Wait();
                if (avisoCliente)
                {
                    WriteLine("Cliente: " + producto);
                    avisoCliente = false;
                }
                WriteLine("");
                semCliente.Release();
            }

            
        }
        static void Main()
        {
            Thread h1 = new Thread(Cliente);
            h1.Name = new string('\t', 0);
            h1.Start();

            Thread h2 = new Thread(Proxy);
            h2.Name = new string('\t', 2);
            h2.Start();

            Thread h3 = new Thread(Servidor);
            h3.Name = new string('\t', 4);
            h3.Start();
        }
        static void WriteLine(string s)
        {
            Thread.Sleep(r.Next(10));
            Console.WriteLine(Thread.CurrentThread.Name + s);
            Thread.Sleep(r.Next(10));
        }

        static bool randBool()
        {
            var random = r.Next(2);
            WriteLine("EL RANDOM DIO " + (random == 1));
            return random == 1;

        }

    }
}
