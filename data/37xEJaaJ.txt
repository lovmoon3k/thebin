#include <bits/stdc++.h>

using namespace std;

using graph = vector<vector<int>>;

void dfs(int u, const graph & g, vector <int> & path, vector <int> & path, vector <int>& cycle){
  if (color[u] == 2){
    return false;
  }
  path.push_back(u);
  color[u] = 1;
  for (int v : g[u]){
    if (color[v] == 1){
      int ind = path.size() - 1;
      while (path[ind] != v){
        cycle.push_back(path[ind]);
        --ind;
      }
      reverse(cycle.begin(), cycle.end());
      return true;
    }
    bool res = dfs(v, g, color, path, cycle);
    if (res){
      return true;
    }
  }
  color[u] = 2;
  path.pop_back();
  return false;
}

int main(){
  int n, m;
  cin >> n >> m;
  graph g(n);
  for (int i = 0; i < m; ++i){
    int u, v;
    cin >> u >> v;
    --u;
    --v;
    g[u].push_back(v);
    //Если хотим неориент
    //g[v].push_back(u);
  }
  vector <int> color(n, 0);
  vector <int> cycle;
  vector <int> path;
  bool has_cycle = dfs(0, g, color, path, cycle);
  dfs(0, g, color, path);
  cout << cycle;
  for (int elem : cycle){
    cout << elem + 1 << " ";
  }
  cout << endl;
}
