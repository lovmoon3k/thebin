// Given a parent process's page table, copy
// its memory into a child's page table.
// Copies both the page table and the
// physical memory.
// returns 0 on success, -1 on failure.
// frees any allocated pages on failure.
int
uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
{
  pte_t *pte;
  uint64 pa, i;
  uint flags;
  // char *mem;
  // no need to allocate mem here

  for(i = 0; i < sz; i += PGSIZE){
    if(i >= MAXVA){
      printf("virtual addr overflow\n");
      return -1;
    }

    if((pte = walk(old, i, 0)) == 0)
      panic("uvmcopy: pte should exist");
    if((*pte & PTE_V) == 0)
      panic("uvmcopy: page not present");
    pa = PTE2PA(*pte);
    flags = PTE_FLAGS(*pte);

    // if((mem = kalloc()) == 0)
    //   goto err;
    // memmove(mem, (char*)pa, PGSIZE);

    // make sure that the write flag is clear for both parent and child processes
    flags &= (~PTE_W);
    *pte &= (~PTE_W);
    // keep track of if a page is COW
    flags |= PTE_RSW;
    *pte |= PTE_RSW;

    // now the PTEs in the child process’ pagetable points to the parent's physical pages
    if(mappages(new, i, PGSIZE, pa, flags) != 0){
      // kfree(mem);
      printf("err in uvmcopy\n");
      goto err;
    }

    
    /*
     A physical page may be referred to by multiple processes’ page tables
     must not free until ref count goes to 0
    */

    // increase reference count
    add_ref((void*)pa);

  }
  return 0;

 err:
  uvmunmap(new, 0, i / PGSIZE, 1);
  return -1;
}