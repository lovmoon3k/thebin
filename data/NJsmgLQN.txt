#include <iostream>
#include <cmath>
#include <iomanip>

#define PI 3.141592653589793238462643383279

using namespace std;
int intersectionArea(double X1, double Y1, double R1, double X2, double Y2, double R2);

class Circle
{
    private:
        int x, y, r;
    public:
        Circle(int x, int y, int r);
        friend ostream& operator<<(ostream &out, const Circle &c);
        int getX() { return x; };
        int getY() { return y; };
        int getR() { return r; };
        void printPI() {cout<<PI<<endl;};
        double operator-(const Circle Â¶m)
        {
            int commonArea = intersectionArea(this->x, this->y, this->r, param.x, param.y, param.r);
            double firstArea = PI*this->r*this->r;
            double secondArea = PI*param.r*param.r;

            return abs((firstArea-commonArea)-(secondArea-commonArea));
        }

};
Circle::Circle(int x, int y, int r)
{
    this->x = x;
    this->y = y;
    if(r>=0)
        this->r = r;
    else
    {
        cout<<"Wrong input for radius :("<<endl;
        throw invalid_argument("Radius must be non negtive number");
    }
}
ostream& operator<<(ostream &out, const Circle &c)
{
    out<<"(x";
    c.x > 0 ? out<<-c.x<<") + " : out<<"+"<<abs(c.x)<<") + ";
    out<<"(y";
    c.y > 0 ? out<<-c.y<<") = " : out<<"+"<<abs(c.y)<<") = ";
    out<<c.r * c.r<<endl;
    return out;
}
int intersectionArea(double X1, double Y1, double R1, double X2, double Y2, double R2)
{
    double d, alpha, beta, a1, a2;
    int ans;

    d = sqrt((X2 - X1) * (X2 - X1) + (Y2 - Y1) * (Y2 - Y1));

    if (d > R1 + R2)
        ans = 0;

    else if (d <= (R1 - R2) && R1 >= R2)
        ans = floor(PI * R2 * R2);

    else if (d <= (R2 - R1) && R2 >= R1)
        ans = floor(PI * R1 * R1);

    else {
        alpha = acos((R1 * R1 + d * d - R2 * R2) / (2 * R1 * d)) * 2;
        beta = acos((R2 * R2 + d * d - R1 * R1) / (2 * R2 * d)) * 2;
        a1 = 0.5 * beta * R2 * R2 - 0.5 * R2 * R2 * sin(beta);
        a2 = 0.5 * alpha * R1 * R1 - 0.5 * R1 * R1 * sin(alpha);
        ans = floor(a1 + a2);
    }

    return ans;
}

int main()
{
    int t;
    cin>>t;
    for(int i = 0; i < t; i++)
    {
        int x1, y1, r1, x2, y2, r2;
        cin>>x1>>y1>>r1>>x2>>y2>>r2;
        Circle morning(x1, y1, r1);
        Circle evening(x2, y2, r2);
		cout<<fixed<<setprecision(2)<<morning-evening<<endl;
    }
    return 0;
}