Êµ∑ÈòîËßÜÁïåËßÑÂàôÂàÜ‰∫´ÔºåÂΩìÂâçÂàÜ‰∫´ÁöÑÊòØÔºö‰∫åÁ∫ßÈ°µÈù¢ËØ¶ÊÉÖÔø•page_detailÔø•üîçËÆæÁΩÆ(ËÅö5)@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"gmtModified\":0,\"id\":0,\"last_chapter_rule\":\"js:\\neval(fetch('hiker://files/rules/xyq/hikermovie.js'));hikchapter();\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[],\"saved\":false,\"title\":\"香情影视\",\"version\":0,\"url\":\"hiker://empty#noRecordHistory#;get;UTF-8;{User-Agent@Mozilla/5.0 (Linux；； Android 11；； Mi 10 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36}\",\"col_type\":\"icon_4_card\",\"find_rule\":\"js:(\\n() => {\\n    var d = [];\\n    var ssmd = getItem(\\\"ssmode\\\", \\\"1\\\");\\n    var ssxc = getItem(\\\"sscount\\\", \\\"5\\\");\\n    d.push({title: \\\"\\\\u641c\\\\u7d22\\\\u8bbe\\\\u7f6e\\\", col_type: \\\"text_center_1\\\"});\\n    d.push({title: \\\"\\\\u5f53\\\\u524d\\\\uff1a\\\" + \\\"(\\\" + (ssmd == 1 ? \\\"\\\\u805a\\\\u5408\\\\u7ed3\\\\u679c\\\" : \\\"\\\\u7ad9\\\\u70b9\\\\u5217\\\\u8868\\\") + \\\")\\\", url: $(\\\"hiker://empty\\\").lazyRule(() => {\\n        var md = getItem(\\\"ssmode\\\", \\\"1\\\");\\n        if (md == 1) {\\n            setItem(\\\"ssmode\\\", \\\"0\\\");\\n            back(true);\\n            return \\\"toast://\\\\u5207\\\\u6362\\\\u4e3a\\\\u641c\\\\u7d22\\\\u5f15\\\\u64ce\\\\u5217\\\\u8868\\\\u5355\\\\u9009\\\\u6a21\\\\u5f0f\\\\u6210\\\\u529f\\\\uff01\\\";\\n        } else {\\n            setItem(\\\"ssmode\\\", \\\"1\\\");\\n            back(true);\\n            return \\\"toast://\\\\u5207\\\\u6362\\\\u4e3a\\\\u805a\\\\u5408\\\\u641c\\\\u7d22\\\\u6a21\\\\u5f0f\\\\u6210\\\\u529f\\\\uff01\\\";\\n        }\\n    }\\n    ), col_type: \\\"text_2\\\"});\\n    d.push({title: \\\"\\\\u641c\\\\u7d22\\\\u8d85\\\\u65f6\\\" + getItem(\\\"xqystmout\\\", \\\"3000\\\") + \\\"\\\", url: \\\"input://\\\" + JSON.stringify({value: \\\"3000\\\", hint: \\\"\\\\u8bf7\\\\u8bbe\\\\u7f6e\\\\u8d85\\\\u65f6\\\\u65f6\\\\u95f4\\\\uff0c1000\\\\u4e3a1\\\\u79d2\\\\u3002\\\", js: $.toString(() => {\\n        var num = parseInt(input).toString();\\n        if (num == \\\"NaN\\\" || num < 100) {\\n            return \\\"toast://\\\\u8f93\\\\u5165\\\\u7684\\\\u503c\\\\u597d\\\\u50cf\\\\u4e0d\\\\u6b63\\\\u786e\\\\u3002\\\";\\n        } else {\\n            setItem(\\\"xqystmout\\\", num);\\n            refreshPage(true);\\n            return \\\"toast://\\\\u4fdd\\\\u5b58\\\\u8bbe\\\\u7f6e\\\\u641c\\\\u7d22\\\\u8d85\\\\u65f6\\\\u5b8c\\\\u6210\\\\uff01\\\";\\n        }\\n    }\\n    )}), col_type: \\\"text_2\\\"});\\n    d.push({title: \\\"\\\\u641c\\\\u7d22\\\\u7ebf\\\\u7a0b(\\\" + ssxc + \\\")\\\", url: \\\"input://\\\" + JSON.stringify({value: \\\"5\\\", hint: \\\"\\\\u8bf7\\\\u8f93\\\\u5165\\\\u4e00\\\\u4e2a\\\\u6574\\\\u6570\\\\u6570\\\\u5b57\\\\uff0c\\\\u63a8\\\\u8350\\\\u6700\\\\u5927\\\\u4e0d\\\\u8981\\\\u8d85\\\\u8fc715\\\\u3002\\\", js: $.toString(() => {\\n        var num = parseInt(input).toString();\\n        if (num == \\\"NaN\\\" || num < 1) {\\n            return \\\"toast://\\\\u8f93\\\\u5165\\\\u7684\\\\u503c\\\\u597d\\\\u50cf\\\\u4e0d\\\\u6b63\\\\u786e\\\\u3002\\\";\\n        } else {\\n            setItem(\\\"sscount\\\", num);\\n            refreshPage(true);\\n            return \\\"toast://\\\\u4fdd\\\\u5b58\\\\u8bbe\\\\u7f6e\\\\u641c\\\\u7d22\\\\u7ebf\\\\u7a0b\\\\u5b8c\\\\u6210\\\\uff01\\\";\\n        }\\n    }\\n    )}), col_type: \\\"text_2\\\"});\\n    d.push({title: \\\"\\\\u2193\\\\u89c4\\\\u5219\\\\u76f8\\\\u5173\\\\u66f4\\\\u65b0\\\\u2193\\\", col_type: \\\"text_center_1\\\"});\\n    d.push({title: \\\"\\\\u66f4\\\\u65b0\\\\u7f51\\\\u9875\\\\u63d2\\\\u4ef6\\\", url: \\\"confirm://\\\\u5df2\\\\u7ecf\\\\u4e0d\\\\u9700\\\\u8981\\\\u7f51\\\\u9875\\\\u63d2\\\\u4ef6\\\\u4e86\\\\uff0c\\\\u8bf7\\\\u81ea\\\\u884c\\\\u4ece\\\\u63d2\\\\u4ef6\\\\u5e93\\\\u5220\\\\u9664\\\\u3002\\\\uff1f.js:\\\" + $.toString(() => {\\n        return \\\"hiker://empty\\\";\\n    }\\n    ), desc: \\\"\\\\u5df2\\\\u7ecf\\\\u4e0d\\\\u9700\\\\u8981\\\\u7f51\\\\u9875\\\\u63d2\\\\u4ef6\\\\u4e86\\\\uff0c\\\\u53ef\\\\u4ee5\\\\u4ece\\\\u63d2\\\\u4ef6\\\\u5e93\\\\u5220\\\\u9664\\\\u4e86\\\\u3002\\\", col_type: \\\"text_center_1\\\"});\\n    d.push({title: \\\"\\\\u66f4\\\\u65b0\\\\u89c4\\\\u5219\\\\u6838\\\\u5fc3\\\\u6587\\\\u4ef6\\\", url: $(\\\"\\\").lazyRule(() => {\\n        var rulejs = fetch(\\\"https://agit.ai/lzk23559/CloudRule/raw/branch/master/hikermovie.js\\\", {});\\n        if (rulejs.search(/lazyRule/) == -1) {\\n            rulejs = fetch(\\\"https://codeberg.org/lzk23559/cloudrule/raw/branch/master/hikermovie.js\\\", {});\\n        }\\n        if (rulejs.search(/lazyRule/) != -1) {\\n            writeFile(\\\"hiker://files/rules/xyq/hikermovie.js\\\", rulejs);\\n        }\\n        var rulejson = fetch(\\\"https://agit.ai/lzk23559/CloudRule/raw/branch/master/hikermovie.json\\\", {});\\n        if (rulejson.search(/\\\\\\\"vodhref\\\\\\\"/) == -1) {\\n            rulejson = fetch(\\\"https://codeberg.org/lzk23559/cloudrule/raw/branch/master/hikermovie.json\\\", {});\\n        }\\n        if (rulejson.search(/\\\\\\\"vodhref\\\\\\\"/) != -1) {\\n            writeFile(\\\"hiker://files/rules/xyq/hikermovie.json\\\", rulejson);\\n        }\\n        if (rulejs.search(/lazyRule/) != -1 && rulejson.search(/\\\\\\\"vodhref\\\\\\\"/) != -1) {\\n            writeFile(\\\"hiker://files/rules/xyq/hikerupdate.txt\\\", new Date() + \\\"\\\");\\n            back(true);\\n            return \\\"toast://\\\\u66f4\\\\u65b0\\\\u6587\\\\u4ef6\\\\u6210\\\\u529f\\\\u3002\\\";\\n        } else {\\n            return \\\"toast://\\\\u66f4\\\\u65b0\\\\u5931\\\\u8d25\\\\u3002\\\";\\n        }\\n    }\\n    ), desc: \\\"\\\\u9999\\\\u60c5\\\\u5f71\\\\u89c6\\\\u6838\\\\u5fc3\\\\u6587\\\\u4ef6\\\\uff0c\\\\u70b9\\\\u51fb\\\\u53ef\\\\u53ca\\\\u65f6\\\\u540c\\\\u6b65\\\\u4e91\\\\u7aef\\\\u6587\\\\u4ef6\\\\uff0c\\\\u8bf4\\\\u4e0d\\\\u5b9a\\\\u6709\\\\u4e9b\\\\u95ee\\\\u9898\\\\u88ab\\\\u89e3\\\\u51b3\\\\u4e86\\\\u3002\\\", col_type: \\\"text_center_1\\\"});\\n    d.push({title: \\\"\\\\u2193TVBox\\\\u63a8\\\\u9001\\\\u8bbe\\\\u7f6e\\\\u2193\\\", col_type: \\\"text_center_1\\\"});\\n    d.push({title: (getItem(\\\"enabledpush\\\", \\\"\\\") == \\\"1\\\" ? \\\"\\\\u5df2\\\\u542f\\\\u7528\\\\u63a8\\\\u9001\\\\u221a\\\" : \\\"\\\\u5df2\\\\u5173\\\\u95ed\\\\u63a8\\\\u9001\\\\u2573\\\"), url: `hiker://empty@lazyRule=.js:getItem('enabledpush','0')=='1'?setItem('enabledpush','0'):setItem('enabledpush','1');getItem('enabledpush','0')=='0'?setItem('singlepush','0'):'';refreshPage();'toast://切换成功！'`, col_type: \\\"text_2\\\"});\\n    setResult(d);\\n}\\n)()\",\"group\":\"①轻合集\",\"ua\":\"mobile\",\"preRule\":\"//设置更新间隔时间,单位为整数天。\\nvar uptime = 2;\\nfunction uprulefile() {\\n    var rulejs = fetch('https://agit.ai/lzk23559/CloudRule/raw/branch/master/hikermovie.js', {});\\n    if (rulejs.search(/lazyRule/) == -1) {\\n        rulejs = fetch('https://codeberg.org/lzk23559/cloudrule/raw/branch/master/hikermovie.js', {});\\n    }\\n    if (rulejs.search(/lazyRule/) != -1) {\\n        writeFile(\\\"hiker://files/rules/xyq/hikermovie.js\\\", rulejs);\\n    }\\n    var rulejson = fetch('https://agit.ai/lzk23559/CloudRule/raw/branch/master/hikermovie.json', {});\\n    if (rulejson.search(/\\\\\\\"vodhref\\\\\\\"/) == -1) {\\n        rulejson = fetch('https://codeberg.org/lzk23559/cloudrule/raw/branch/master/hikermovie.json', {});\\n    }\\n    if (rulejson.search(/\\\\\\\"vodhref\\\\\\\"/) != -1) {\\n        writeFile(\\\"hiker://files/rules/xyq/hikermovie.json\\\", rulejson);\\n    }\\n    if (rulejs.search(/lazyRule/) != -1 && rulejson.search(/\\\\\\\"vodhref\\\\\\\"/) != -1) {\\n        writeFile(\\\"hiker://files/rules/xyq/hikerupdate.txt\\\", new Date() + '');\\n        confirm({title:'提示', content:'自动更新完成'});\\n    } else {\\n        confirm({title:'提示', content:'自动更新失败'});\\n    }\\n}\\n\\n\\n\\n//检测是否有写入时间与规则的js插件文件\\nif (fileExist(\\\"hiker://files/rules/xyq/hikerupdate.txt\\\") && fileExist(\\\"hiker://files/rules/xyq/hikermovie.js\\\") && fileExist(\\\"hiker://files/rules/xyq/hikermovie.json\\\")) {\\n    //计算时间间隔\\n    var start = new Date(fetch(\\\"hiker://files/rules/xyq/hikerupdate.txt\\\", {}));\\n    var nowt = new Date();\\n    var D_T = nowt.getTime() - start.getTime();\\n    var D_D = D_T / (1000 * 3600 * 24);\\n    var tdif = parseInt(D_D) + '';\\n    //log(tdif);\\n    //默认间隔超过设置天数就取一次云端文件\\n    if (tdif >= uptime || tdif < 0) {\\n        uprulefile();\\n    }\\n} else {\\n    //如果少一个文件就自动取云端文件\\n    uprulefile();\\n}\\n\\n\\n\\n//执行需要预处理的站点\\nvar lac = fetch('hiker://files/rules/xyq/hikermovie.js');\\n//log(lac.length);\\nif (lac.search(/lazyRule/) != -1) {\\n    eval(lac);\\n    hikerpre();\\n} else {\\n    //如果本地文件不对将尝试自修复\\n    uprulefile();\\n    setError('规则修复完成，如有问题请反馈。')\\n}\",\"pages\":\"[]\"}","title":"🔍设置(聚5)"}