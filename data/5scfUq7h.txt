#include <iostream>
#include <vector>
#include <map>
#include <set>

std::string getValue() {
    std::string s;
    std::cin >> s;
    std::string new_str = s.substr(0, s.find(' '));
    return new_str;
}

std::set<std::string> getKeys() {
    std::set<std::string> current_set;
    std::string str;
    while (true) {
        std::cin >> str;
        if (str == "" || str == "-") {
            continue;
        } else if (str.back() == ',') {
            current_set.insert(str.substr(0, str.length() - 1));
        } else {
            current_set.insert(str.substr(0, str.find('\n')));
            break;
        }
    }
    return current_set;
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::map<std::string, std::set<std::string>> my_map;
    int n;
    std::cin >> n;
    for (int i = 0; i < n; ++i) {
        std::string value = getValue();
        std::set<std::string> keys = getKeys();
        for (auto key: keys) {
            std::set<std::string> values = my_map[key];
            values.insert(value);
            my_map[key] = values;
        }
    }
    std::cout << my_map.size() << '\n';
    for (auto x: my_map) {
        std::cout << x.first << " - ";
        for (auto y = x.second.begin(); y != x.second.end();) {
            std::cout << *y;
            if (++y != x.second.end()) {
                std::cout << ", ";
            } else {
                std::cout << '\n';
            }
        }
    }
}
