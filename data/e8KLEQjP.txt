#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>

using namespace std;
using namespace __gnu_pbds;

typedef tree<
    int,
    null_type,
    less<int>,
    rb_tree_tag,
    tree_order_statistics_node_update
    > ordered_set;

vector<ordered_set> a;
vector<int> p;

void init(int n){
    a.resize(n + 1);
    p.resize(n + 1);
    for(int i = 1; i <= n; i++){
        p[i] = i;
        a[i].insert(i);
    }
}

void merge_sets(int a1, int b1){
    int ry = p[b1], rx = p[a1];

    if(a[ry].size() > a[rx].size()){
        for(auto x: a[rx]){
            a[ry].insert(x);
            p[x] = ry;
        }
    }else{
        for(auto x: a[ry]){
            a[rx].insert(x);
            p[x] = rx;
        }
    }
}

int get_mid(int x){
    int rx = p[x];

    return (*a[rx].find_by_order((a[rx].size() - 1) / 2));
}
int32_t main(){
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

    int n, q;
    cin >> n >> q;

    init(n);
    while(q--){
        int t;
        cin >> t;

        if(t == 1){
            int x, y;
            cin >> x >> y;

            merge_sets(x, y);
        }else{
            int x;
            cin >> x;

            cout << get_mid(x) << endl;
        }
    }
}