#include <iostream>
#include <map>
#include <vector>
#include <string>
#include <sstream>
#include <algorithm>
#include <queue>

using namespace std;

class IPadress
{
    public:
        int a, b, c, d;
        IPadress(int a, int b, int c, int d);
        friend ostream& operator<<(ostream& os, const IPadress& dt);
};
IPadress::IPadress(int a, int b, int c, int d)
{
    this->a = a;
    this->b = b;
    this->c = c;
    this->d = d;
}
ostream& operator<<(ostream& os, const IPadress& adress)
{
    cout<<adress.a<<"."<<adress.b<<"."<<adress.c<<"."<<adress.d<<endl;
    return os;
}
bool operator<(const IPadress& lhs, const IPadress& rhs) 
{
    if(lhs.a == rhs.a)
    {
        if(lhs.b == rhs.b)
        {
            if(lhs.c == rhs.c)
            {
                return lhs.d < rhs.d;
            }
            return lhs.c < rhs.c;
        }
        return lhs.b < rhs.b;
    }
    return lhs.a < rhs.a;
}
bool operator==(const IPadress& lhs, const IPadress& rhs)
{
    return lhs.a == rhs.a && lhs.b == rhs.b && lhs.c == rhs.c && lhs.d == rhs.d;
}
map<IPadress,vector<IPadress>> connected;
bool BFS(IPadress first, IPadress second)
{
    queue<IPadress> toProceed;
    vector<IPadress> searched;
    toProceed.push(first);
    while(!toProceed.empty())
    {
        IPadress proceeding = toProceed.front();
        toProceed.pop();
        if(find(searched.begin(), searched.end(), proceeding)!=searched.end())
            continue;
        for(int i = 0; i < connected[proceeding].size(); i++)
        {
            if(connected[proceeding][i] == second)
                return true;
            if(find(searched.begin(), searched.end(), connected[proceeding][i])==searched.end())
                toProceed.push(connected[proceeding][i]);
        }
        searched.push_back(proceeding);
    }
    return false;
}
int main()
{
    string line;

    while(getline(cin, line))
    {
        int input[8];
        if(line.empty())
            break;
        if(line.at(0)=='B')
        {
            line = line.substr(2);
            stringstream ss(line);
            string s;
            for(int i = 0; i < 8; i++)
            {
                if(i==3)
                    getline(ss,s,' ');
                else
                    getline(ss, s, '.');
                input[i] = stoi(s);
            }
            IPadress first(input[0],input[1],input[2],input[3]);
            IPadress second(input[4],input[5],input[6],input[7]);
            
            connected[first].emplace_back(second);
            connected[second].emplace_back(first);
        }
        else if(line.at(0)=='T')
        {
            line = line.substr(2);
            stringstream ss(line);
            string s;
            for(int i = 0; i < 8; i++)
            {
                if(i==3)
                    getline(ss,s,' ');
                else
                    getline(ss, s, '.');
                input[i] = stoi(s);
            }
            IPadress first(input[0],input[1],input[2],input[3]);
            IPadress second(input[4],input[5],input[6],input[7]);

            if(connected.count(first)>0 && BFS(first, second))
            {
                cout<<"T"<<endl;
            }
            else if(connected.count(second)>0 && BFS(second, first))
            {
                cout<<"T"<<endl;
            }
            else
                cout<<"N"<<endl;
        }
    }
    return 0;
}