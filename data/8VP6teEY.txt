import math
import statistics

# Grabs the Numbers and orients them into a usable format
def extractData (inp):
    with open(inp, 'r') as Input:
        func = lambda x: float(x) if x != "13+" else 13.0
        return [func(x) for x in "".join(Input.readlines()).split('\n')]


def Find_InterquartileRange(lst):
    return Find_Quartiles(lst, 3) - Find_Quartiles(lst, 1)


def Find_Quartiles(lst, typ):
    if typ == 1:  # 25%
        percentile = 0.25
    elif typ == 2:  # 50% or Median
        percentile = 0.5
    elif typ == 3:  # 75%
        percentile = 0.75

    rank = percentile * (len(lst) + 1)

    if rank == int(rank):
        return lst[int(rank) - 1]
    else:
        rank = math.floor(rank)
        return (lst[rank] + lst[rank - 1]) / 2


def Find_Outliers(lst):
    outliers = []
    IQR = Find_InterquartileRange(lst)
    Q1 = Find_Quartiles(lst, 1)
    Q3 = Find_Quartiles(lst, 3)

    lower_range = Q1 - (1.5 * IQR)
    upper_range = Q3 + (1.5 * IQR)

    for num in lst:
        if num < lower_range:
            outliers.append(num)
        elif num > upper_range:
            outliers.append(num)

    return outliers


def DoAller (data, probability, remove_outliers=False):
    data = sorted(extractData(data))

    if remove_outliers:  # Removes Outliers
        outliers = Find_Outliers(data)
        for o in outliers:
            data.remove(o)

    # First Section - Mean Median Mode
    mean = round(sum(data)/len(data), 3)

    # Calculating Median
    mid = math.floor(len(data)/2)
    if len(data) % 2 == 0:   # if the total length is even
        median = (data[mid - 1] + data[mid])/2
    else:  # total length is odd
        median = data[mid]

    # Calculating Mode
    mode = statistics.mode(data)


    # Second Section - Standard Deviation
    numerator = 0
    for n in data:
        numerator += (n - mean)**2

    sd = math.sqrt(numerator/len(data))


    # Third Section - Margin of Error
    moe = round(math.sqrt((probability*(1-probability))/len(data))*2.576, 3)
    
    # Output
    print(f"Mean: {mean}\nMedian: {median}\nMode: {mode}\n\nStandard Deviation: {sd}\nMargin of Error: {probability - moe} - {probability} - {probability + moe}")




DoAller("", probability=0.5, remove_outliers=False)

