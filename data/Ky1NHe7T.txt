//ZADATAK 1
//KLASA PROGRAM
using _2022predrok;
static void RunZ1()
{
    PackageBox box = new PackageBox();
    PackageBox vipBox = new PackageBox(30, 30, 30);
    Console.WriteLine($"{box.Height},{box.Width},{box.Depth}");
}
RunZ1();
//KLASA PACKAGEBOX
class PackageBox
    {
        public double Height { get; set; }
        public double Width { get; set; }
        public double Depth { get; set; }
        public PackageBox(double height,double width,double depth)
        {
            Height = height;
            Width = width;
            Depth = depth;
        }
        public PackageBox():this(10,10,10) { }


    }
	
//ZADATAK 2
public bool PackageFit(double height,double width,double depth)
        {
            return (height <= Height || height <= Width || height <= Depth || width <= Width || width <= Height || width <= Depth || depth <= Depth || depth <= Height || depth <= Width);
        }
		
//ZADATAK 3
static class PackageService
    {
        public static double AvgVolume(PackageBox[] boxes)
        {
            double vol = 0;
            foreach (PackageBox box in boxes)
            {
                vol+=(box.Height*box.Width*box.Depth);
            }
            return vol;
        }
    }
	PackageService.AvgVolume(boxes);
	
//ZADATAK 4
	class Ranger : Character
    {
        public double HitChance { get; set; }
        public Ranger(double hitChance, int movementPerTurn) : base(movementPerTurn)
        {
            HitChance = hitChance;
        }
        public override double CalculateDamage()
        {
            Random generator = new Random();
            return (HitChance / generator.NextDouble()) * BaseDamage;
        }

        public override int GetTurnsToCross(List<Terrain> tiles)
        {
            throw new NotImplementedException();
        }
    }
	
//ZADATAK 5
     class Warrior:Character
    {
        public Warrior(int movementPerTurn) : base(movementPerTurn)
        { }

        public override double CalculateDamage()
        {
            throw new NotImplementedException();
        }

        public override int GetTurnsToCross(List<Terrain> tiles)
        { 
            double turnsToCross = 0;
            foreach(var tile in tiles)
            {
                turnsToCross = turnsToCross + tile.MovementCost;
            }
            return (int)Math.Round(turnsToCross / MovementPerTurn);
        }
    }
	
//ZADATAK 6
 class Army
    {
        List<Character> characters;
        public Army() 
        {
            characters = new List<Character>();
        }
        public void AddCharacter(Character c)
        {
            if (c.CalculateDamage() < Character.BaseDamage) throw new LowDamageException("Damage too low");
            characters.Add(c);
        }
    }
	
 class LowDamageException:Exception
    {
        public DateTime time;
        public LowDamageException(string message):base(message)
        {
            time= DateTime.Now;
        }
    }
	
static Army Z6(Character[] characters)
{
    Army army = new Army();
    try
    {
        for (int i = 0; i < characters.Length; i++)
        {
            army.AddCharacter(characters[i]);
        }
    }
    catch (LowDamageException e) { Console.WriteLine(e.time); }
    return army;
}

//ZADATAK 7
interface IPlayerPicker
    {
       decimal CalculatePrice(List<Footballer> footballers);
       List<Footballer> GetFootballers(List<Footballer> footballers); 
    }
	
//ZADATAK 8
class TransferMarket
    {
        private List<Footballer> footballers;
        private IPlayerPicker playerPicker;
        public TransferMarket(IPlayerPicker playerPicker)
        {
            this.playerPicker = playerPicker;
            footballers = new List<Footballer>();
        }
        public void SetPlayerPicker(IPlayerPicker playerPicker)
        {
            this.playerPicker=playerPicker;
        }
        public decimal CalculatePrice(IPlayerPicker playerPicker)
        {
            return playerPicker.CalculatePrice(footballers);
        }
    }

//ZADATAK 9
class PlayerRepository:IPlayerPicker
    {
        
        public decimal CalculatePrice(List<Footballer> footballers)
        {
            decimal price = 0;
            for(int i=0;i<footballers.Count;i++)
            {
                if(footballers[i].PastClubs==null)
                {
                    price+=footballers[i].Price;
                }
            }
            return price;
        }
        public List<Footballer> GetFootballers(List<Footballer> footballers) //??????
        {
            decimal max = 0;
            List<Footballer> footballersList=new List<Footballer>();
            foreach(var footballer in footballers)
            {
                if(footballer.Price>max)
                    max=footballer.Price;
            }
            foreach(var footballer in footballers)
            {
                if (footballer.Price == max)
                    footballersList.Add(footballer);    
            }
            return footballersList;
        }
    }