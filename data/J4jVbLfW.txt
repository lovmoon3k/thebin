# Шифрование текста с помощью сдвига Цезаря
# Репетитор IT mentor https://t.me/mentor_it

strOfChar = "A B C D E F G H I J K L M N O P Q R S T U V W X Y Z ' . , : ; # № : $ = - + * /"
listOfChar = strOfChar.lower().split(" ")
 
text = "This post tells in simple language about the essence of Caesars encryption."
 
""" Метод, шифрующий слово """ 
def encryptedWord(word, k):
    wordEncrypted = ''
    for ch in word:
        if(ch.isupper()):
            indexOfChar = (listOfChar.index(ch.lower()) - k) % len(listOfChar)
            wordEncrypted += listOfChar[indexOfChar].upper()
        else:
            indexOfChar = (listOfChar.index(ch) - k) % len(listOfChar)
            wordEncrypted += listOfChar[indexOfChar]      
    return wordEncrypted
 
""" Метод, дешифрующий слово """ 
def decryptedWord(word, k):
    wordDecrypted = ''
    for ch in word:
        if(ch.isupper()):
            indexOfChar = (listOfChar.index(ch.lower()) + k) % len(listOfChar)
            wordDecrypted += listOfChar[indexOfChar].upper()
        else:
            indexOfChar = (listOfChar.index(ch) + k) % len(listOfChar)
            wordDecrypted += listOfChar[indexOfChar]    
    return wordDecrypted
 
""" Метод, шифрующий текст в виде строки """
def encryptedText(string, k):
    encryptStr = ''
    for word in string.split(" "):
        encryptStr += encryptedWord(word, k) + " "   
    return  encryptStr[:-1]       
 
""" Метод, дешифрующий текст в виде строки """
def decryptedText(string, k):
    decryptStr = ''
    for word in string.split(" "):
        decryptStr += decryptedWord(word, k) + " " 
    return  decryptStr[:-1]     
 
 
print("Исходные текст: ", text)
k = 1 #Ключ шифрования
print("Зашифрованный текст: ", encryptedText(text, k))
print("Расшифрованный текст: ", decryptedText(encryptedText(text, k), k))

