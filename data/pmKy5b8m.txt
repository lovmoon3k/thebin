struct FPositionVertexBuffer4
{
	TArray<FVector>	Verts;
	int32			Stride;
	int32			NumVertices;

	friend FArchive& operator<<(FArchive& Ar, FPositionVertexBuffer4& S)
	{
		guard(FPositionVertexBuffer4<<);

		Ar << S.Stride << S.NumVertices;

		if (Ar.Game == GAME_Valorant)
		{
			int32 isPacked;
			Ar << isPacked;
			if (isPacked > 1) Ar.Seek(Ar.Tell() - 4);
			else 
			{
				int32 check;
				Ar << check;
				Ar.Seek(Ar.Tell() - 4);
				if (check > 8)
				{
					FBoxSphereBounds Bounds;
					Ar << Bounds;
				}
			}
		}

		DBG_MESH("PositionStream: IS:%d NV:%d\n", S.Stride, S.NumVertices);

#if DAYSGONE
		// Days Gone stuff
#endif // DAYSGONE

		// Scavengers & Destroy All Humans 2020 & Valorant
		if (S.Stride == 8)
		{
			TArray<FVectorHalf4> HalfVerts;
			HalfVerts.BulkSerialize(Ar);
			CopyArray(S.Verts, HalfVerts);
			return Ar;
		}

		S.Verts.BulkSerialize(Ar);
		return Ar;

		unguard;
	}
};