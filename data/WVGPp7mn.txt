<template>
  <div>
    <input type="file" @change="onImageSelected" />
    <div>
      <label for="text-watermark">Text Watermark:</label>
      <input id="text-watermark" v-model="textWatermark" />
      <br />
      <label for="image-watermark">Image Watermark:</label>
      <input
        type="file"
        id="image-watermark"
        @change="onWatermarkImageSelected"
      />
    </div>
    <div class="preview" v-if="imageSrc">
      <canvas ref="canvas"></canvas>
      <div class="controls" v-if="showControls">
        <button @click="moveLeft">Left</button>
        <button @click="moveRight">Right</button>
        <button @click="moveUp">Up</button>
        <button @click="moveDown">Down</button>
      </div>
    </div>
    <button @click="downloadImage" v-if="imageSrc">Download Image</button>
  </div>
</template>

<script>
export default {
  data() {
    return {
      imageSrc: null,
      textWatermark: '',
      watermarkImage: null,
      watermarkX: 0,
      watermarkY: 0,
      showControls: false,
    };
  }, // data
  mounted() {
    this.canvas = this.$refs.canvas;
    this.$nextTick(() => {
      this.ctx = this.canvas.getContext('2d');
    });
  }, // mounted
  methods: {
    onImageSelected(event) {
      const file = event.target.files[0];
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => {
        this.imageSrc = reader.result;
        this.showControls = true;
        this.renderImage();
      };
    },
    onWatermarkImageSelected(event) {
      const file = event.target.files[0];
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => {
        this.watermarkImage = new Image();
        this.watermarkImage.src = reader.result;
        this.renderImage();
      };
    },
    renderImage() {
      const image = new Image();
      image.src = this.imageSrc;
      image.onload = () => {
        this.canvas.width = image.width;
        this.canvas.height = image.height;
        this.ctx.drawImage(image, 0, 0, image.width, image.height);
        if (this.watermarkImage) {
          this.ctx.drawImage(
            this.watermarkImage,
            this.watermarkX,
            this.watermarkY,
            this.watermarkImage.width,
            this.watermarkImage.height
          );
        } else if (this.textWatermark) {
          this.ctx.fillStyle = 'white';
          this.ctx.font = '48px sans-serif';
          this.ctx.fillText(
            this.textWatermark,
            this.watermarkX,
            this.watermarkY + 48
          );
        }
      };
    },
    moveLeft() {
      this.watermarkX -= 10;
      this.renderImage();
    },
    moveRight() {
      this.watermarkX += 10;
      this.renderImage();
    },
    moveUp() {
      this.watermarkY -= 10;
      this.renderImage();
    },
    moveDown() {
      this.watermarkY += 10;
      this.renderImage();
    },
    downloadImage() {
      const link = document.createElement('a');
      link.download = 'watermarked-image.png';
      link.href = this.canvas.toDataURL('image/png');
      link.click();
    },
  }, // methods
};
</script>
