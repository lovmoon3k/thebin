public class BabaPickaxeItem extends PickaxeItem implements GeoItem {
  private final AnimatableInstanceCache cache = GeckoLibUtil.createInstanceCache(this);
  private static final RawAnimation BOBBIN_ANIM = RawAnimation.begin().thenPlay("bobbing");
  private final Supplier<Object> renderProvider = GeoItem.makeRenderer(this);
  public AnimatableInstanceCache factory = new AnimatableInstanceCache(this) {
    @Override
    public <T extends GeoAnimatable> AnimatableManager<T> getManagerForId(long l) {
      return null;
    }
  };

  public BabaPickaxeItem(Settings setting) {
    super(ModToolMaterial.BABA, 4, 2f,
        new FabricItemSettings()
            .maxCount(1));
  }

  // Animations
  @Override
  public void createRenderer(Consumer<Object> consumer) {
    consumer.accept(new RenderProvider() {
      private final BabaPickaxeRenderer renderer = new BabaPickaxeRenderer();

      @Override
      public BuiltinModelItemRenderer getCustomRenderer() {
        return this.renderer;
      }
    });
  }

  @Override
  public Supplier<Object> getRenderProvider() {
    return this.renderProvider;
  }

  @Override
  public void registerControllers(AnimatableManager.ControllerRegistrar controllers){
    controllers.add(new AnimationController<>(this, 20, state -> {
      state.getController().setAnimation(DefaultAnimations.IDLE);

      return PlayState.CONTINUE;
    }));
  }

  @Override
  public AnimatableInstanceCache getAnimatableInstanceCache() {
    return this.cache;
  }

  @Override
  public double getTick(Object o) {
    return 0;
  }
