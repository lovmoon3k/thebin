#include <algorithm>
#include <iostream>
#include <cstddef>
#include <string>
#include <vector>

using namespace std;

template <typename T>
class SimpleVector {
public:
    SimpleVector() = default;
    explicit SimpleVector(size_t size);

    SimpleVector(const SimpleVector& other);
    SimpleVector(SimpleVector&& other);

    void operator=(const SimpleVector&);
    void operator=(SimpleVector&&);

    ~SimpleVector();

    T& operator[](size_t index);

    T* begin();
    T* end();
    const T* begin() const;
    const T* end() const;

    size_t Size() const;
    size_t Capacity() const;
    void PushBack(const T& value);

private:
    T* data = nullptr;
    size_t size = 0;
    size_t capacity = 0;
};

template <typename T>
SimpleVector<T>::SimpleVector(size_t size) : data(new T[size]), size(size), capacity(size) {}

template <typename T>
SimpleVector <T>::SimpleVector(const SimpleVector <T>& other) : data(new T[other.capacity]), size(other.size), capacity(other.capacity) {
    copy(other.begin(), other.end(), begin());
}

template <typename T>
SimpleVector <T>::SimpleVector(SimpleVector<T>&& other) : data(other.data), size(other.size), capacity(other.capacity) {
    other.data = nullptr;
    other.size = other.capacity = 0;
}

template <typename T> // в data копируется other
void SimpleVector <T>:: operator=(const SimpleVector<T>& other) {
    delete[] data;
    data = new T[other.capacity];
    size = other.size;
    capacity = other.capacity;
    copy(other.begin(), other.end(), begin());
}

template <typename T>
void SimpleVector <T>:: operator=(SimpleVector<T>&& other) {
    delete[] data;
    data = other.data;
    size = other.size;
    capacity = other.capacity;
    other.data = nullptr;
    other.size = other.capacity = 0;
}

template <typename T>
SimpleVector<T>::~SimpleVector() {
    delete[] data;
}

template <typename T>
T& SimpleVector<T>::operator[](size_t index) {
    return data[index];
}

template <typename T>
size_t SimpleVector<T>::Size() const {
    return size;
}

template <typename T>
size_t SimpleVector<T>::Capacity() const {
    return capacity;
}

template <typename T>
void SimpleVector<T>::PushBack(const T& value) {
    if (size >= capacity) {
        auto new_cap = capacity == 0 ? 1 : 2 * capacity;
        auto new_data = new T[new_cap];
        copy(begin(), end(), new_data);
        delete[] data;
        data = new_data;
        capacity = new_cap;
    }
    data[size++] = value;
}

template <typename T>
T* SimpleVector<T>::begin() {
    return data;
}

template <typename T>
T* SimpleVector<T>::end() {
    return data + size;
}

template <typename T>
const T* SimpleVector<T>::begin() const {
    return data;
}

template <typename T>
const T* SimpleVector<T>::end() const {
    return data + size;
}

template <typename T>
ostream& operator << (ostream& os, const SimpleVector<T>& rhs) {
    os << "Size = " << rhs.Size() << " Items:";
    for (const auto& x : rhs) {
        os << ' ' << x;
    }
    return os;
}

void swap(SimpleVector<string>& left, SimpleVector<string>& right) {
    SimpleVector<string> tmp = left;
    left = right;
    right = tmp;
}

void reverse(vector<SimpleVector<string>>& target) {
    for (size_t i = 0; 2 * i < target.size(); ++i) {
        swap(target[i], target[target.size() - i - 1]);
    }
}


int main() {
    SimpleVector<string> source(5);
    SimpleVector<string> source_plus_ten(5);
    SimpleVector<string> source_plus_twenty(5);
    for (size_t i = 0; i < source.Size(); ++i) {
        source[i] = to_string(i);
        source_plus_ten[i] = to_string(i+10);
        source_plus_twenty[i] = to_string(i + 20);
    }
      
    cout << source << endl;
    cout << source_plus_ten << endl;
    cout << source_plus_twenty << endl;

    vector<SimpleVector<string>> v = { source , source_plus_ten, source_plus_twenty };
    reverse(v);

    cout << source << endl;
    cout << source_plus_ten << endl;
    cout << source_plus_twenty << endl;
    return 0;
}
/* output in VS:
Size = 5 Items: 0 1 2 3 4
Size = 5 Items: 10 11 12 13 14
Size = 5 Items: 20 21 22 23 24
Size = 5 Items: 0 1 2 3 4
Size = 5 Items: 10 11 12 13 14
Size = 5 Items: 20 21 22 23 24
*/
