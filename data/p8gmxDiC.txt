/**

                            Online Swift Compiler.
                Code, Compile, Run and Debug Swift script online.
Write your code in this editor and press "Run" button to execute it.

*/

import Foundation;

print("Hello World")

class Punkt {
    var x: Int;
    var y: Int;
    
    init(x: Int, y: Int) {
        self.x = x;
        self.y = y;
    }
}

class Dane2P {
    var AB: [Punkt] = [];
    init(x1: Int, y1: Int, x2: Int, y2: Int) {
        self.AB.append(Punkt(x: x1, y: y1))
        self.AB.append(Punkt(x: x2, y: y2))
    }
    
    func printDane() {
        for p in AB {
            print(p.x, p.y)
        }
    }
    
    func dlugoscOdcinka(p1: Punkt, p2: Punkt) -> Double {
        
        return sqrt(pow(Double(p2.x - p1.x), 2) + pow(Double(p2.y - p1.y), 2) );
    }
    
    func wspolrzedneWektora() -> [Int] {
        let p1: Punkt = self.AB[0];
        let p2: Punkt = self.AB[1];
        
        return [p2.x - p1.x, p2.y - p1.y];
    }
    
    func czyTrojkat(p3: Punkt) -> Bool {
        let p1: Punkt = self.AB[0];
        let p2: Punkt = self.AB[1];
        
        let len1: Double = dlugoscOdcinka(p1: p1, p2: p2);
        let len2: Double = dlugoscOdcinka(p1: p2, p2: p3);
        let len3: Double = dlugoscOdcinka(p1: p1, p2: p3);
        
        print(len1, len2, len3)
        
        return !((len1 + len2 == len3) || (len1 + len3 == len2) || (len2 + len3 == len1))
    }
}

var d2p: [Dane2P] = [];
for _ in 0...5 {
    var randArr: [Int] = []
    for _ in 0...3 {
        let rand: Int = Int.random(in: -10...10);
        randArr.append(rand)
    }
    d2p.append(Dane2P(x1: randArr[0], y1: randArr[1], x2: randArr[2], y2: randArr[3]))
}

for odc in d2p {
    odc.printDane();
    print(odc.dlugoscOdcinka(p1: odc.AB[0], p2: odc.AB[1]));
    print(odc.wspolrzedneWektora());
    print(odc.czyTrojkat(p3: d2p[3].AB[0]))
}
    
// d2p.printDane();
// print(d2p.dlugoscOdcinka())
// print(d2p.wspolrzedneWektora())