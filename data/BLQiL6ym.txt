class Solution {
  
  /*
   * undirected graph with set of nodes and edges, return number of disjoint graphs
   */
  static class Node {  }
  
  static class Edge {
    Node first;
    Node second;
    
    public Edge(Node first, Node second) {
      this.first = first;
      this.second = second;
    }
  }

  public static void main(String[] args) {
    Node A = new Node();
    Node B = new Node();
    Node C = new Node();
    Node D = new Node();
    Node E = new Node();
    
    Edge edge1 = new Edge(A, B);
    Edge edge2 = new Edge(C, D);
    
    Set<Node> allNodes = new HashSet<>(Arrays.asList(A, B, C, D, E));
    Set<Edge> allEdges = new HashSet<>(Arrays.asList(edge1, edge2));
    
    System.out.println(numDisjointGraphs(allNodes, allEdges));
  }
  
  public static int numDisjointGraphs(Set<Node> allNodes, Set<Edge> edges) {
    // build graph
    Map<Node, Set<Node>> graph = new HashMap<>();
    for (Edge edge : edges) {
      addEdge(graph, edge.first, edge.second);
      addEdge(graph, edge.second, edge.first);
    }
    
    Set<Node> visitedNodes = new HashSet<>();
    int numDisjointGraphs = 0;
    
    for (Node node : allNodes) {
      if (!visitedNodes.contains(node)) {
        bfs(graph, node, visitedNodes);
        numDisjointGraphs++;
      }
    }
    
    return numDisjointGraphs;
  }
  
  private static void bfs(Map<Node, Set<Node>> graph, Node node, Set<Node> visitedNodes) {
    Deque<Node> q = new ArrayDeque<>();
    q.add(node);
    visitedNodes.add(node);
    
    while (!q.isEmpty()) {
      Node curNode = q.remove();
      
      Set<Node> neighbors = graph.get(curNode); 
      if (neighbors == null) {
        return;
      }

      for (Node neighbor : neighbors) {
        if (!visitedNodes.contains(neighbor)) {
          visitedNodes.add(neighbor);
          q.add(neighbor);
        }
      }
    }
      
  }
  
  private static void addEdge(Map<Node, Set<Node>> graph, Node node, Node neighbor) {
    Set<Node> neighbors = graph.get(node);
    if (neighbors == null) {
      neighbors = new HashSet<>();
      graph.put(node, neighbors);
    }
    neighbors.add(neighbor);
  }
    
}