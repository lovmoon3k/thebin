MENU:
#pragma once
#include <stdio.h>
#include <Windows.h>
#include <iostream>
#include <conio.h>
#include <string>
#define ESC 27
#define UP 72
#define DOWN 80
#define LEFT 75
#define RIGHT 77
#define ENTER 13
#include "Tree.h"


//Текстовый курсор в точку x,y
using namespace std;
namespace own {
	class Menu
	{
	public:
		HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE); //получение дескриптора консоли
		void GoToXY(short x, short y)
		{
			SetConsoleCursorPosition(hStdOut, { x,y });
		}

		void ConsoleCursorVisible(bool show, short size)
		{
			CONSOLE_CURSOR_INFO structCursorInfo;
			GetConsoleCursorInfo(hStdOut, &structCursorInfo);
			structCursorInfo.bVisible = show; // изменяем видимость курсора
				structCursorInfo.dwSize = size; // изменяем размер курсора
				SetConsoleCursorInfo(hStdOut, &structCursorInfo);
		}

		void work() {
			BSTree* Func;
			Func = new BSTree();
			SetConsoleTitle(L"МЕНЮ");
			system("CLS");
			ConsoleCursorVisible(false, 100);
			string Menu[] = { 
				"Вывести дерево",  
				"Вставить элемент в дерево", 
				"Удалить элемент из дерева", 
				"проверка на пустоту",
				"Количество вершин",
				"Задание",
				"Выход"
			};

			string SubMenu1[]{
				"Вывести дерево горизонтально",
				"Вывести дерево вертикально"
			};
			string SubMenu2[]{
				"Обход дерева сверху вниз",
				"Количество вершин дерева, содержащих слова,\nначинающиеся на одну и ту же букву"
			};
			int active_menu = 0;
			

			char ch;

			while (true)
			{
				int x = 50, y = 12;
				GoToXY(x, y);

				for (int i = 0; i < size(Menu); i++) {

					if (i == active_menu) SetConsoleTextAttribute(
						hStdOut, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					else SetConsoleTextAttribute(hStdOut, FOREGROUND_GREEN);

					GoToXY(x, y++);
					cout << Menu[i] << endl;
				}
				ch = _getch();
				if (ch == -32) ch = _getch(); // Отлавливаем стрелочки
				switch (ch)
				{
				case ESC:
					Func->~BSTree();
					exit(0);
				case UP:
					if (active_menu>0)--active_menu;
					break;
				case DOWN:
					if(active_menu<size(Menu)-1)++active_menu;
					break;
				case LEFT:
					cout << "Left, Код " << (int)ch << endl;
					break;
				case RIGHT:
					cout << "Right, Код " << (int)ch << endl;
				case ENTER:
					switch (active_menu)
					{
						case 0:
						{
							bool flag = true;
							active_menu = 0;
							while (true && flag) {
								
								system("CLS");

								int x = 50, y = 12;
								GoToXY(x, y);

								for (int j = 0; j < size(SubMenu1); j++) {

									if (j == active_menu) SetConsoleTextAttribute(
										hStdOut, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
									else SetConsoleTextAttribute(hStdOut, FOREGROUND_GREEN);

									GoToXY(x, y++);
									cout << SubMenu1[j] << endl;
								}
									ch = _getch();
									if (ch == -32) ch = _getch(); // Отлавливаем стрелочки
									switch (ch)
									{
									case ESC:
										flag = false;
										break;
									case UP:
										if (active_menu > 0)--active_menu;
										break;
									case DOWN:
										if (active_menu < size(SubMenu1) - 1)++active_menu;
										break;
									case ENTER:
									{
										switch (active_menu)
										{
										case 0:
											system("CLS");
											Func->dump4(20);
											_getch();
											break;
										case 1:
											system("CLS");
											Func->dump6();
											_getch();
											break;
										default:
											
											break;
										}
										break;
									}
									default:
										cout << " Код " << (int)ch << endl;
										break;
									}
								}
								system("CLS");
								break;
						}
						case 1:
						{
							system("CLS");
							cout << "Введите слово: ";;
							string word;
							cin >> word;
							Func->Insert2(word);
							_getch();
							system("CLS");
							break;
						}
						case 2:
						{
							system("CLS");
							cout << "Введите слово для удаления: ";
							string word2;
							cin >> word2;
							Func->RemoveNode2(word2);
							_getch();
							system("CLS");
							break;
						}
						case 3:
						{
							system("CLS");
							Func->isEmpty();
							_getch();
							system("CLS");
							break;
						}
						case 4:
						{
							system("CLS");
							Func->HeadCount();
							_getch();
							system("CLS");
							break;
						}
						case 5:
						{
							system("CLS");
							bool flag = true;
							active_menu = 0;
							while (true && flag) {

								system("CLS");

								int x = 50, y = 12;
								GoToXY(x, y);

								for (int j = 0; j < size(SubMenu2); j++) {

									if (j == active_menu) SetConsoleTextAttribute(
										hStdOut, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
									else SetConsoleTextAttribute(hStdOut, FOREGROUND_GREEN);

									GoToXY(x, y++);
									cout << SubMenu2[j] << endl;
								}
								ch = _getch();
								if (ch == -32) ch = _getch(); // Отлавливаем стрелочки
								switch (ch)
								{
								case ESC:
									flag = false;
									break;
								case UP:
									if (active_menu > 0)--active_menu;
									break;
								case DOWN:
									if (active_menu < size(SubMenu2) - 1)++active_menu;
									break;
								case ENTER:
								{
									switch (active_menu)
									{
									case 0:
										system("CLS");
										Func->UpDownTraversal2();
										_getch();
										break;
									case 1:
										system("CLS");
										Func->LetterCount2();
										_getch();
										break;
									default:

										break;
									}
									break;
								}
								default:
									cout << " Код " << (int)ch << endl;
									break;
								}
							}
							system("CLS");
							break;
						}
					case size(Menu)-1:
						Func->~BSTree();
						exit(0);
						
						break;
					}
					break;
				default:
					cout << " Код " << (int)ch << endl;

				}
			}

//			_getch();

		}
		~Menu() {};

		template <typename T> static T input() { return input<T>(""); }

        template <typename T> static T input(std::string str) {
            T input_str{};
            bool flag = true;
            while (flag) {
                std::cout << str;
                if (std::cin >> input_str) {
                    flag = false;
                }
                else {
                    std::cin.clear();
					while (std::cin.get() != '\n');
                }
            }

            return input_str;
        }
	private:
	};
}

Tree:

#include <iostream>
#include <Windows.h>
#include<fstream>
#include<cstring>
#include<vector>
using namespace std;
	class BSTree {
	public:
		BSTree(){}
		~BSTree() {}
		class Node {
		public:

			Node(string data) : data(data) {}
			string data;
			Node* left{};
			Node* right{};
			int level;
			int space;
		private:
		};
		int size;
		int quantity;
		int row;
		vector<Node*> counties;
		void Write_Error(string name)
		{
			ofstream out;
			out.open("Error.txt", ios_base::out | ios_base::app);
			if (out.is_open())
			{
				out << name << "\n";
			}
			out.close();
		}
		void Write_Input(string name)
		{
			ofstream out;
			out.open("Input.txt", ios_base::out | ios_base::app);
			if (out.is_open())
			{
				out << name << "\n";
			}
			out.close();
		}
		
		bool isEmpty()
		{
			if (size == 0) {
				cout << "Дерево пустое!";
				return size;
			}
			cout << "Дерево наполнено";
		}
		void HeadCount() {
			cout << size << endl;
		}
		void RemoveNode(Node*& node, string data)
		{
			if (!node)
			{
				Write_Error("Ошибка! Удалять нечего");
				return;
			}
			if (data == node->data)
			{
				if (!node->left && !node->right)
				{
					delete node;
					node = nullptr;
					size -= 1;
				}
				else if (!node->left && node->right)
				{
					Node* temp = node->right;
					delete node;
					node = temp;
					size -= 1;
				}
				else if (node->left && !node->right)
				{
					Node* temp = node->left;
					delete node;
					node = temp;
					size -= 1;
				}
				else
				{
					node->data = GetMinimum(node->right)->data;
					RemoveNode(node->right, node->data);
					size -= 1;
				}
				return;
			}
			int len = data.length();
			int len2 = node->data.length();
			if (len < len2)
			{
				RemoveNode(node->left, data);
			}
			else if (len > len2)
			{
				RemoveNode(node->right, data);
			}
		}
		void RemoveNode2(string data)
		{
			RemoveNode(root, data);
		}
		BSTree::Node* GetMinimum(Node* node)
		{
			if (!node->left)
			{
				return node;
			}
			return GetMinimum(node->left);
		}
		void gotoxy(int x, int y) {
			COORD p = { x,y };
			SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), p);
		}
		int num = 10;
		int len2 = 0;
		void Insert(Node*& node, string data)
		{
			int len = data.length();
			if (node) {
				len2 = node->data.length();
			}
			if (!node)
			{
				node = new Node(data);
				if (node != root) {
					counties.push_back(node);
					quantity += 1;
					size += 1;
					Write_Input(node->data);
				}
			}

			else if (len > len2)
			{
				Insert(node->right, data);
				node->right->level = node->level + 1;
				node->right->space = node->space + num + len2;
			}
			else if (len < len2)
			{
				Insert(node->left, data);
				node->left->level = node->level + 1;
				node->left->space = node->space - num - len2;
			}
			else if (len == len2)
			{
				Write_Error("Длина слова уже существует в дереве!");
			}
		}
		void Insert2(string data)
		{
			Insert(root, data);
			root->level = 0;
			root->space = 55;
			if (root && size < 1) {
				Write_Input(root->data);
				size += 1;
			}
		}
		void dump3(Node* root, int space) {
			if (!root)
				return;
			enum { COUNT = 2 };
			space += COUNT;
			dump3(root->right, space);
			for (int i = COUNT; i < space; ++i)
				std::cout << " ";
			std::cout << root->data << std::endl;
			dump3(root->left, space);
		}
		void dump4(int space) {
			dump3(root, space);
		}
		void NodeCount(int space) {
			for (int i = 0; i < quantity; i++) {
				if (counties[i]->level == space) {
					row += 1;
				}
			}
		}
		void printpoint(Node* root) {
			int count = 0;
			int size = 1;
			Node* vr3 = nullptr;
			Node* vr4 = nullptr;
			vector <Node*> numbers;
			numbers.push_back(root);
			for (int i = 0; i < numbers.size(); i++) {
				root = numbers[i];
				if (root->left != nullptr) {
					root = root->left;
					gotoxy(root->space, root->level);
					cout << root->data << "/";
					vr3 = root;
					numbers.push_back(vr3);
					count += 1;
				}
				root = numbers[i];
				if (root->right != nullptr) {
					root = root->right;
					gotoxy(root->space, root->level);
					cout << "\\" << root->data;
					vr4 = root;
					numbers.push_back(vr4);
					count += 1;
				}
				if (row != 0) {
					row = 0;
				}
				NodeCount(size);
				if (row == count) {
					cout << endl;
					row = 0;
					count = 0;
					size += 1;
				}
			}
			numbers.clear();
		}
		void InorderTraversal(Node* node)
		{
			if (!node)
			{
				return;
			}
			InorderTraversal(node->left);
			std::cout << node->data << " ";
			InorderTraversal(node->right);
		}
		void InorderTraversal2()
		{
			InorderTraversal(root);
		}
		void PreorderTraversal(Node* node)
		{
			if (!node)
			{
				return;
			}
			std::cout << node->data << " ";
			PreorderTraversal(node->left);
			PreorderTraversal(node->right);
		}
		void PreorderTraversal2()
		{
			PreorderTraversal(root);
		}
		void PostorderTraversal(Node* node)
		{
			if (!node)
			{
				return;
			}
			PreorderTraversal(node->left);
			PreorderTraversal(node->right);
			std::cout << node->data << " ";
		}
		void PostorderTraversal2()
		{
			PostorderTraversal(root);
		}
		void UpDownTraversal(Node* root) {
			Node* vr3 = nullptr;
			Node* vr4 = nullptr;
			vector <Node*> numbers;
			numbers.push_back(root);
			for (int i = 0; i < numbers.size(); i++) {
				root = numbers[i];
				if (root->left != nullptr) {
					root = root->left;
					vr3 = root;
					numbers.push_back(vr3);
				}
				root = numbers[i];
				if (root->right != nullptr) {
					root = root->right;
					vr4 = root;
					numbers.push_back(vr4);
				}
			}
			for (int i = 0; i < numbers.size(); i++) {
				cout << numbers[i]->data << " ";
			}
			numbers.clear();
		}
		void UpDownTraversal2() {
			UpDownTraversal(root);
		}
		void Save(Node* root) {
			Node* vr3 = nullptr;
			Node* vr4 = nullptr;
			vector <Node*> numbers;
			numbers.push_back(root);
			for (int i = 0; i < numbers.size(); i++) {
				root = numbers[i];
				if (root->left != nullptr) {
					root = root->left;
					vr3 = root;
					numbers.push_back(vr3);
				}
				root = numbers[i];
				if (root->right != nullptr) {
					root = root->right;
					vr4 = root;
					numbers.push_back(vr4);
				}
			}
			ofstream out;
			out.open("Output.txt", ios_base::out | ios_base::app);
			if (out.is_open())
			{
				for (int i = 0; i < numbers.size(); i++) {
					out << numbers[i]->data << endl;
				}
				numbers.clear();
			}
			out.close();
			if (size = 0) {
				Write_Error("Ошибка! Попытка сохранить не существующее дерево!");
			}
		}
		void Save2() {
			Save(root);
		}
		void LetterCount(Node* root) {
			int count = 0;
			char let;
			cout << "Введите букву: ";
			cin >> let;
			Node* vr3 = nullptr;
			Node* vr4 = nullptr;
			vector <Node*> numbers;
			numbers.push_back(root);
			for (int i = 0; i < numbers.size(); i++) {
				root = numbers[i];
				if (root->left != nullptr) {
					root = root->left;
					vr3 = root;
					numbers.push_back(vr3);
				}
				root = numbers[i];
				if (root->right != nullptr) {
					root = root->right;
					vr4 = root;
					numbers.push_back(vr4);
				}
			}
			for (int i = 0; i < numbers.size(); i++) {
				char ch = numbers[i]->data[0];
				if (let == ch) {
					count += 1;
				}
			}
			cout << count;
			numbers.clear();
		}
		void LetterCount2() {
			LetterCount(root);
		}
		void dump5(Node* root) {
			if (!root)
				return;
			gotoxy(root->space, 0);
			std::cout << root->data << endl;
			printpoint(root);
		}
		void dump6() {
			dump5(root);
		}
		private:
			Node* root{};
	};
