#include <iostream>
#include <string>

template <class T>
class node {
public:
    T data;
    node* left;
    node* right;
    node* parent;
    node(T data = 0, node* left = nullptr, node* right = nullptr, node* parent = nullptr) : data(data), left(left), right(right), parent(parent) { }
};
    
template <class T>
void init_tree(int n, node<T>* arr) {
    for (int i = 1; i <= n; ++i) {
        std::cin >> arr[i].data;
    }

    for (int i = 1; i <= n; ++i) {
        if (i * 2 <= n) {
            arr[i].left = &arr[i * 2];
            arr[i * 2].parent = &arr[i];
        }
        if (i * 2 + 1 <= n) {
            arr[i].right = &arr[i * 2 + 1];
            arr[i * 2 + 1].parent = &arr[i];
        }
    }

    arr[0].left = arr[0].right = &arr[1];
    arr[1].parent = &arr[0];
}

template <class T>
void left_rotate(node<T>* arr, int ind) {
    if (&arr[0] != arr[ind].parent->parent) {
        if (arr[ind].parent->parent->left == arr[ind].parent) {
            arr[ind].parent->parent->left = &arr[ind];
            arr[ind].parent = arr[ind].parent->parent;
        }
        else {
            arr[ind].parent->parent->right = &arr[ind];
            arr[ind].parent = arr[ind].parent->parent;
        }
    }
    else {
        arr[0].left = arr[0].right = &arr[ind];
        arr[ind].parent = &arr[0];
    }
    node<T>* temp = arr[ind].left;
    arr[ind].left = arr[ind].parent;
    arr[ind].parent->left = temp;
    arr[ind].parent->parent = &arr[ind];
}

template <class T>
void right_rotate(node<T>* arr, int ind) {
    if (&arr[0] != arr[ind].parent->parent) {
        if (arr[ind].parent->parent->left == arr[ind].parent) {
            arr[ind].parent->parent->left = &arr[ind];
            arr[ind].parent = arr[ind].parent->parent;
        }
        else {
            arr[ind].parent->parent->right = &arr[ind];
            arr[ind].parent = arr[ind].parent->parent;
        }
    }
    else {
        arr[0].left = arr[0].right = &arr[ind];
        arr[ind].parent = &arr[0];
    }
    node<T>* temp = arr[ind].right;
    arr[ind].right = arr[ind].parent;
    arr[ind].parent->right = temp;
    arr[ind].parent->parent = &arr[ind];
}

template <class T>
void decode(node<T>* arr, int ind) {
    if (arr[0].left == &arr[ind])
        return;
    if (ind % 2 == 0) {
        left_rotate(arr, ind);
    }
    else {
        right_rotate(arr, ind);
    }
}

template <class T>
void post_order(node<T>* x) {
        if (x->left != nullptr)
            post_order(x->left);
        if (x->right != nullptr)
            post_order(x->right);
        std::cout << x->data << " ";
}

int main()
{
    int n, m, q;
    std::cin >> n >> q;

    node<int>* nums = new node <int>[n + 1];
    init_tree(n, nums);

    int temp;

    for (int i = 0; i < q; ++i) {
        std::cin >> temp;
        decode(nums, temp);
    }

    std::cin >> m >> q;

    node<char>* chars = new node <char>[m + 1];
    init_tree(m, chars);

    int temp2;

    for (int i = 0; i < q; ++i) {
        std::cin >> temp2;
        decode(chars, temp2);
    }

    node<int>* temp_point = nums->left;
    post_order(temp_point);
    std::cout << std::endl;
    node<char>* temp_point2 = chars->left;
    post_order(temp_point2);

    delete[] nums;
    delete[] chars;

    return 0;
}