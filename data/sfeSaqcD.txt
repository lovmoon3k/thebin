Menu:


#pragma once
#include <stdio.h>
#include <Windows.h>
#include <iostream>
#include <conio.h>
#include <string>
#define ESC 27
#define UP 72
#define DOWN 80
#define LEFT 75
#define RIGHT 77
#define ENTER 13
#include "graph.h"


//Текстовый курсор в точку x,y
using namespace std;
namespace own {
	class Menu
	{
	public:
		HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE); //получение дескриптора консоли
		void GoToXY(short x, short y)
		{
			SetConsoleCursorPosition(hStdOut, { x,y });
		}

		void ConsoleCursorVisible(bool show, short size)
		{
			CONSOLE_CURSOR_INFO structCursorInfo;
			GetConsoleCursorInfo(hStdOut, &structCursorInfo);
			structCursorInfo.bVisible = show; // изменяем видимость курсора
			structCursorInfo.dwSize = size; // изменяем размер курсора
			SetConsoleCursorInfo(hStdOut, &structCursorInfo);
		}



		void work() {
			char filename[256] = "test.txt";
			Graph Func;
			Func.AddVertex();
			int start;
			int A;
			int v1, v2, weight;
			SetConsoleTitle(L"МЕНЮ");
			system("CLS");
			ConsoleCursorVisible(false, 100);
			string Menu[] = {
				"добавить",
				"вывести на экран",
				"Задание",
				"загрузить из файла",
				"Обход",
				"удалить ребро",
				"Выход"
			};

			string SubMenu1[]{
				"Добавить вершину",
				"Добавить ребро"
			};
			string SubMenu2[]{
				"Обход в глубину",
				"Обход в ширину"
			};
			int active_menu = 0;


			char ch;

			while (true)
			{
				int x = 50, y = 12;
				GoToXY(x, y);

				for (int i = 0; i < size(Menu); i++) {

					if (i == active_menu) SetConsoleTextAttribute(
						hStdOut, FOREGROUND_BLUE | FOREGROUND_INTENSITY);
					else SetConsoleTextAttribute(hStdOut, FOREGROUND_GREEN);

					GoToXY(x, y++);
					cout << Menu[i] << endl;
				}
				ch = _getch();
				if (ch == -32) ch = _getch(); // Отлавливаем стрелочки
				switch (ch)
				{
				case ESC:
					Func.~Graph();
					exit(0);
				case UP:
					if (active_menu > 0)--active_menu;
					break;
				case DOWN:
					if (active_menu < size(Menu) - 1)++active_menu;
					break;
				case LEFT:
					cout << "Left, Код " << (int)ch << endl;
					break;
				case RIGHT:
					cout << "Right, Код " << (int)ch << endl;
				case ENTER:
					switch (active_menu)
					{
					case 0:
					{
						bool flag = true;
						active_menu = 0;
						while (true && flag) {

							system("CLS");

							int x = 50, y = 12;
							GoToXY(x, y);

							for (int j = 0; j < size(SubMenu1); j++) {

								if (j == active_menu) SetConsoleTextAttribute(
									hStdOut, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
								else SetConsoleTextAttribute(hStdOut, FOREGROUND_GREEN);

								GoToXY(x, y++);
								cout << SubMenu1[j] << endl;
							}
							ch = _getch();
							if (ch == -32) ch = _getch(); // Отлавливаем стрелочки
							switch (ch)
							{
							case ESC:
								flag = false;
								break;
							case UP:
								if (active_menu > 0)--active_menu;
								break;
							case DOWN:
								if (active_menu < size(SubMenu1) - 1)++active_menu;
								break;
							case ENTER:
							{
								switch (active_menu)
								{
								case 0:
									system("CLS");
									cout << "Добавить вершину" << endl;
									Func.AddVertex();
									cout << "Добавлено!";
									_getch();
									break;
								case 1:
									system("CLS");
									cout << "Добавить ребро" << endl;
									cout << "Номер вершины откуда: "; v1 = Func.readInteger();
									cout << "Номер вершины куда : "; v2 = Func.readInteger();
									cout << "Вес ребра : "; weight = Func.readInteger();
									if (weight < 0) {
										cout << "Только положительные" << endl;
										break;
									}
									if (!Func.AddEdge(v1 - 1, v2 - 1, weight)) cout << "Неверно" << endl;

									_getch();
									break;
								default:

									break;
								}
								break;
							}
							default:
								cout << " Код " << (int)ch << endl;
								break;
							}
						}
						system("CLS");
						break;
					}
					case 1:
					{
						system("CLS");
						cout << "Вывод на экран" << endl;
						Func.Print();
						_getch();
						system("CLS");
						break;
					}
					case 2:
					{
						system("CLS");
						cout << "Индивилдуальное задание" << endl;
						cout << "Начальная вершина (1.." << Func.Vertices() << ") = ";
						start = Func.readInteger();
						if (start > Func.Vertices() || start < 1)
						{
							cout << "Нет такой вершины" << endl;
							break;
						}
						cout << "Максимальное удаление = ";
						A = Func.readInteger();
						if (A < 1)
						{
							cout << "Неверно" << endl;
							break;
						}
						Func.FindAndPrint(start - 1, A);
						_getch();
						system("CLS");
						break;
					}
					case 3:
					{
						system("CLS");
						cout << "Загрузить из файла" << endl;
						cout << "Имя файла = ";
						cin.getline(filename, 256);
						if (!filename[0]) break;
						if (!Func.Load(filename))
						{
							cout << "Нет файла" << endl;
							continue;
						}
						_getch();
						system("CLS");
						break;
					}
					case 4:
					{
						system("CLS");
						bool flag = true;
						active_menu = 0;
						while (true && flag) {

							system("CLS");

							int x = 50, y = 12;
							GoToXY(x, y);

							for (int j = 0; j < size(SubMenu2); j++) {

								if (j == active_menu) SetConsoleTextAttribute(
									hStdOut, FOREGROUND_RED | FOREGROUND_GREEN | FOREGROUND_INTENSITY);
								else SetConsoleTextAttribute(hStdOut, FOREGROUND_GREEN);

								GoToXY(x, y++);
								cout << SubMenu2[j] << endl;
							}
							ch = _getch();
							if (ch == -32) ch = _getch(); // Отлавливаем стрелочки
							switch (ch)
							{
							case ESC:
								flag = false;
								break;
							case UP:
								if (active_menu > 0)--active_menu;
								break;
							case DOWN:
								if (active_menu < size(SubMenu2) - 1)++active_menu;
								break;
							case ENTER:
							{
								switch (active_menu)
								{
								case 0:
									system("CLS");
									cout << "Обход в глубину" << endl;
									cout << "Номер начальной вершины: "; start = Func.readInteger();
									Func.DFS(start - 1);
									_getch();
									break;
								case 1:
									system("CLS");
									cout << "Обход в ширину" << endl;
										cout << "Номер начальной вершины: "; start = Func.readInteger();
									Func.BFS(start - 1);
									_getch();
									break;
								default:

									break;
								}
								break;
							}
							default:
								cout << " Код " << (int)ch << endl;
								break;
							}
						}
						system("CLS");
						break;
						
					}
					case 5:
					{
						system("CLS");
						cout << "Удалить ребро" << endl;
						cout << "Номер вершины откуда: "; v1 = Func.readInteger();
						cout << "Номер вершины куда : "; v2 = Func.readInteger();
						if (!Func.RemoveEdge(v1 - 1, v2 - 1)) cout << "Неверно" << endl;
						_getch();
						system("CLS");
						break;
					}
					case size(Menu) - 1:
						Func.~Graph();
						exit(0);
						

						break;
					}
					break;
				default:
					cout << " Код " << (int)ch << endl;

				}
			}

			//			_getch();

		}
		~Menu() {};

		template <typename T> static T input() { return input<T>(""); }

		template <typename T> static T input(std::string str) {
			T input_str{};
			bool flag = true;
			while (flag) {
				std::cout << str;
				if (std::cin >> input_str) {
					flag = false;
				}
				else {
					std::cin.clear();
					while (std::cin.get() != '\n');
				}
			}

			return input_str;
		}
	private:
	};
}



Graph:-------------------------
#pragma once
#include <iostream>
#include <iomanip>
#include <fstream>
#include <queue>
using namespace std;
class Graph
{
public:
	int** M = NULL;
	int N = 0;
	int** Create(int N)
	{
		int** M = new int* [N];
		for (int k = 0; k < N; k++)
			M[k] = new int[N];
		for (int r = 0; r < N; r++)
			for (int c = 0; c < N; c++)
				M[r][c] = 0;
		return M;
	}
	void Delete(int** M, int N)
	{
		for (int k = 0; k < N; k++) delete[] M[k];
		if (N > 0) delete[] M;
	}

	
	int readInteger()
	{
		int result;
		while (true)
		{
			cin >> result;
			if (cin.fail())
			{
				cin.clear();
				cin.ignore();
				result = -1;
				continue;
			}
			cin.ignore();
			return result;
		}
	}
	void Print()
	{
		cout << endl;
		for (int row = 0; row < N; row++)
		{
			for (int col = 0; col < N; col++)
				cout << setw(5) << M[row][col];
			cout << endl;
		}
	}
	int Menu()
	{
		int result = -1;
		while (result < 0)
			result = readInteger();
		return result;
	}


	Graph()
	{
	}
	~Graph()
	{
			Delete(M, N);
	}
	bool Load(char* filename)
	{
		ifstream f(filename);
		if (!f.is_open()) return false;
		f >> N;
		M = Create(N);
		for (int row = 0; row < N; row++)
			for (int col = 0; col < N; col++)
				f >> M[row][col];
		f.close();
		return true;
	}
	int Vertices() { return N; }
private:
	bool* found;
	bool* mark;
	void find(int start, int A)
	{
		if (A < 0) return;
		mark[start] = true;
		found[start] = true;
		for (int k = 0; k < N; k++)
			if (M[start][k])
				if (!mark[k])
					find(k, A - M[start][k]);
		mark[start] = false;
	}
	void print()
	{
		for (int k = 0; k < N; k++)
			if (found[k])
				cout << k + 1 << " ";
	}
public:
	void FindAndPrint(int start, int A)
	{
		found = new bool[N];
		for (int k = 0; k < N; k++) found[k] = false;
		mark = new bool[N];
		for (int k = 0; k < N; k++) mark[k] = false;
		find(start, A);
		delete[] mark;
		print(); cout << endl;
		delete[] found;
	}
	void AddVertex()
	{
		int** M1 = Create(N + 1);
		for (int r = 0; r < N; r++)
			for (int c = 0; c < N; c++)
				M1[r][c] = M[r][c];
		Delete(M, N);
		M = M1;
		N++;
	}
	bool RemoveVertex(int v)
	{
		if (v<0 || v>N) return false;
		if (N == 1) return false;
		int** M1 = Create(N - 1);
		for (int r = 0; r < N; r++)
		{
			if (r == v) continue;
			int r1 = (r < v) ? r : r - 1;
			for (int c = 0; c < N; c++)
			{
				if (c == v) continue;
				int c1 = (c < v) ? c : c - 1;
				M1[r1][c1] = M[r][c];
			}
		}
		Delete(M, N);
		M = M1;
		N--;
	}
	bool AddEdge(int v1, int v2, int weight)
	{
		if (v1 < 0 || v2 < 0 || v1 >= N) return false;
		M[v1][v2] = weight;
	}
	bool RemoveEdge(int v1, int v2)
	{
		return AddEdge(v1, v2, 0);
	}
private:
	int* steps;
	int step;
	void dfs(int start)
	{
		steps[start] = step++;
		for (int k = 0; k < N; k++)
			if (steps[k] == 0)
				if (M[start][k] != 0)
					dfs(k);
	}
	void CreateSteps()
	{
		steps = new int[N]; memset(steps, 0, sizeof(int) * N);
		step = 1;
	}
	void PrintSteps()
	{
		for (int k = 0; k < N; k++)
			cout << "Вершина " << k << " посещена на " << steps[k] << " шаге" << endl;
	}
public:
	void DFS(int start)
	{
		CreateSteps();
		dfs(start);
		PrintSteps();
		delete[] steps;
	}
private:
	queue<int> q;
public:
	void BFS(int start)
	{
		CreateSteps();
		q.push(start);
		while (!q.empty())
		{
			start = q.front();
			q.pop();
			if (steps[start] > 0) continue;
			steps[start] = step++;
			for (int k = 0; k < N; k++)
				if (steps[k] == 0)
					if (M[start][k] != 0)
						q.push(k);
		}
		PrintSteps();
		delete[] steps;
	}
};

