using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

namespace EntornosMultijugador2023.Tema2.EjersSemaforos
{
    class E09bSemaforos
    {
        private const int N_FRAGMENTOS = 10;
        private const int N_HILOS = 3;
        private static volatile int[] fichero = new int[N_FRAGMENTOS];
        static Random _random = new Random();


        static volatile int fragPendienteDescarga = 0;
        static volatile int hilosPendientes = 0;
        static SemaphoreSlim sem = new SemaphoreSlim(1);


        ////////////////////////////////////////////////////////////////////////////////////////////////////



        private static int DescargaDatos(int numFragmento)
        {
            Thread.Sleep(_random.Next(1000));
            return numFragmento * 2;
        }

        private static void MostrarFichero()
        {
            WriteLineI("------------------------");

            WriteLineI("File = [");
            for (int i = 0; i < N_FRAGMENTOS; i++)
            {
                WriteLineI(fichero[i] + ",");
            }
            WriteLineI("]");
        }

        public static void Downloader()
        {
            int dato;
            bool mostrarFichero = false;

            while (true)
            {
                sem.Wait();
                if (fragPendienteDescarga == N_FRAGMENTOS)
                {
                    sem.Release();
                    break;
                }

                int frag = fragPendienteDescarga;
                fragPendienteDescarga++;

                if (fragPendienteDescarga == N_FRAGMENTOS) { mostrarFichero = true; }

                sem.Release();

                dato = DescargaDatos(frag);
                fichero[frag] = dato;

            }
            if (mostrarFichero) { MostrarFichero(); }




        }



        public static void Main(String[] args)
        {
            Thread[] threads = new Thread[N_HILOS];
            for (int i = 0; i < N_HILOS; i++)
            {
                threads[i] = new Thread(Downloader);
                threads[i].Name = new string('\t', i); 
                threads[i].Start();
            }
            

        }

        static void WriteLineI(string s)
        {
            Thread.Sleep(_random.Next(10));
            Console.WriteLine(Thread.CurrentThread.Name + s);
            Thread.Sleep(_random.Next(10));
        }
    }
}
