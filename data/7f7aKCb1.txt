
class MetaKeeper(type):
    """
    Metaclass for Keeper to allow subscripting.
    """
    _env = {}

    @classmethod
    def __setitem__(mcs, key, value):
        mcs._env.update({key: value})

    @classmethod
    def __getitem__(mcs, item):
        return mcs._env.get(item)

    @classmethod
    def __delitem__(mcs, key):
        mcs._env.__delitem__(key)

    @classmethod
    def __iter__(mcs):
        return iter(mcs._env)

    @classmethod
    def __len__(mcs):
        return len(mcs._env)


class Keeper(metaclass=MetaKeeper):
    """
    Keeper Class

        Keeper['some'] = 'thing'
        Keeper['some']
        del Keeper['some']
        len(Keeper)
        for _ in Keeper: ...
        Keeper.set(some='thing', some_other='stuff', ...)
        Keeper.get('some')
        Keeper.fromkeys(['s', 'm'], 'th')
        Keeper.clear()
    """

    @classmethod
    def set(cls, **kwargs) -> None:
        for kw in kwargs:
            cls[kw] = kwargs[kw]

    @classmethod
    def get(cls, key: str) -> Any:
        return cls[key]

    @classmethod
    def fromkeys(cls, keys: Iterable, val: Optional[Any] = None):
        for k in keys:
            cls[k] = val

    @classmethod
    def clear(cls):
        for i in cls:
            del cls[i]