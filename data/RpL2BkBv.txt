import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

import java.util.*;
import java.util.stream.Collectors;

public class Yandex2 {
    @Test
    public void firstTest() {
        List<String> lines = new ArrayList<>();
        lines.add("3 5 2");
        lines.add("5 10 6");
        List<Integer> inputValues = parseMultiValue(lines.get(0));
        List<Integer> iceInTheSculpture = parseMultiValue(lines.get(1));
        Assertions.assertEquals(3, inputValues.size());
        Assertions.assertEquals(3, iceInTheSculpture.size());
        Assertions.assertEquals(5, iceInTheSculpture.get(0));
        Assertions.assertEquals(10, iceInTheSculpture.get(1));
        Assertions.assertEquals(6, iceInTheSculpture.get(2));
    }


    @Test
    public void secondTest() {
        List<String> lines = new ArrayList<>();
        lines.add("5 19 32");
        lines.add("36 10 72 4 50");
        List<Integer> amountOfGoodSculptures = amountOfGoodSculptures(lines);
        Assertions.assertEquals(2, amountOfGoodSculptures.size());
        Assertions.assertEquals(2, amountOfGoodSculptures.get(0));
        Assertions.assertEquals(4, amountOfGoodSculptures.get(1));
    }

    @Test
    public void thirdTest() {
        List<String> lines = new ArrayList<>();
        lines.add("3 5 2");
        lines.add("5 10 6");
        List<Integer> amountOfGoodSculptures = amountOfGoodSculptures(lines);
        Assertions.assertEquals(2, amountOfGoodSculptures.size());
        Assertions.assertEquals(1, amountOfGoodSculptures.get(0));
        Assertions.assertEquals(3, amountOfGoodSculptures.get(1));
    }

    @Test
    public void zeroTest() {
        List<String> lines = new ArrayList<>();
        lines.add("4 25 10");
        lines.add("1 10 42 9");
        List<Integer> amountOfGoodSculptures = amountOfGoodSculptures(lines);
        Assertions.assertEquals(0, amountOfGoodSculptures.size());
    }

    @Test
    public void minusTest() {
        List<String> lines = new ArrayList<>();
        lines.add("4 0 10");
        lines.add("1 10 42 9");
        List<Integer> amountOfGoodSculptures = amountOfGoodSculptures(lines);
        Assertions.assertEquals(2, amountOfGoodSculptures.size());
        Assertions.assertEquals(1, amountOfGoodSculptures.get(0));
        Assertions.assertEquals(4, amountOfGoodSculptures.get(1));
    }

    private List<Integer> amountOfGoodSculptures(List<String> lines) {
        List<Integer> inputValues = parseMultiValue(lines.get(0));
        List<Integer> iceInTheSculpture = parseMultiValue(lines.get(1));
        int time = inputValues.get(2);
        int weight = inputValues.get(1);
        int amountOfSculptures = inputValues.get(0);
        Map<Integer, Integer> amountOfHopefulSculptures = new HashMap<>();
        List<Integer> amountOfGoodSculptures = new ArrayList<>();
        for (int i = 0; i < amountOfSculptures; i++) {
            int sculpture = iceInTheSculpture.get(i);
            if (Math.abs(weight - sculpture) <= time) {
                amountOfHopefulSculptures.put(i + 1, Math.abs(weight - sculpture));
            }
        }
        Map<Integer, Integer> result = amountOfHopefulSculptures.entrySet().stream().sorted(Map.Entry.comparingByValue())
                .collect(Collectors.toMap(
                        Map.Entry::getKey,
                        Map.Entry::getValue,
                        (oldValue, newValue) -> oldValue, LinkedHashMap::new));
        Set<Integer> keySet = result.keySet();
        int leftTime = 0;
        for (Integer key : keySet) {
            int sculpture = result.get(key);
            if (leftTime + sculpture <= time) {
                leftTime += sculpture;
                amountOfGoodSculptures.add(key);
            }
        }
        return amountOfGoodSculptures;
    }


    private List<Integer> parseMultiValue(String line) {
        List<Integer> list = new ArrayList<>();
        String[] numbs = line.split(" ");
        for (String num : numbs)
            list.add(Integer.parseInt(num));
        return list;

    }

}
