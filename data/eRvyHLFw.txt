MIN_MERGE = 32


def calcMinRun(n):
    r = 0
    while n >= MIN_MERGE:
        r |= n & 1
        n >>= 1
    return n + r


def insertionSort(arr, left, right):
    for i in range(left + 1, right + 1):
        j = i
        while j > left and arr[j] < arr[j - 1]:
            arr[j], arr[j - 1] = arr[j - 1], arr[j]
            j -= 1


def merge(arr, l, m, r):
    len1, len2 = m - l + 1, r - m
    left, right = [], []
    for i in range(0, len1):
        left.append(arr[l + i])
    for i in range(0, len2):
        right.append(arr[m + 1 + i])
    i, j, k = 0, 0, l
    while i < len1 and j < len2:
        if left[i] <= right[j]:
            arr[k] = left[i]
            i += 1
        else:
            arr[k] = right[j]
            j += 1
        k += 1
    while i < len1:
        arr[k] = left[i]
        k += 1
        i += 1
    while j < len2:
        arr[k] = right[j]
        k += 1
        j += 1


def timSort(arr):
    n = len(arr)
    minRun = calcMinRun(n)
    # Sort individual subarrays of size RUN
    for start in range(0, n, minRun):
        end = min(start + minRun - 1, n - 1)
        insertionSort(arr, start, end)
    size = minRun
    while size < n:
        for left in range(0, n, 2 * size):
            mid = min(n - 1, left + size - 1)
            right = min((left + 2 * size - 1), (n - 1))
            if mid < right:
                merge(arr, left, mid, right)

        size = 2 * size


def quick_sort(array, begin, end):
    if end - begin <= 64:
        array = timSort(array)
        return array
    h = partition(array, begin, end)
    quick_sort(array, begin, h[0] - 1)
    quick_sort(array, h[1] + 1, end)


def partition(array, begin, end):
    s_e = array[begin]
    i = begin + 1
    gt = end
    lt = begin
    while i <= gt:
        if array[i] < s_e:
            array[i], array[lt] = array[lt], array[i]
            i += 1
            lt += 1
        elif (array[i] > s_e):
            array[i], array[gt] = array[gt], array[i]
            gt -= 1
        else:
            i += 1
    return [lt, gt]


n = int(input())
array = list(map(int, input().split()))
begin = 0
end = len(array) - 1
quick_sort(array, begin, end)
print(*array)
