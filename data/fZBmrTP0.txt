#include <iostream>
#include <intrin.h>
#include <chrono>
#include <random>

#define FIRST_MATRIX_ROWS 200
#define FIRST_MATRIX_COLUMNS 300
#define SECOND_MATRIX_ROWS 300
#define SECOND_MATRIX_COLUMNS 500
#define INTERIOR_MATRIX_SIZE 12

#define MATRIX1_ROWS 4
#define MATRIX1_COLUMNS 3
#define MATRIX2_ROWS 3
#define MATRIX2_COLUMNS 5

#pragma intrinsic(__rdtsc)

float** createInteriorMatrix();
void outputLittleMatrix(float** matrix);
float **** createOuterMatrix(int rows, int columns);
void checkMultiplyMatrix(int** m1, int** m2);
float ** multiplyInteriorMatrix(float** firstMatrix, float** secondMatrix);
void multiplyMatrix (float**** firstMatrix, float**** secondMatrix);
float ** emptyMatrix();
float** sumMatrix(float** firstComponent, float** secondComponent );

using namespace std::chrono;
int main() {


    //initialization the first matrix
    float**** firstMatrix = createOuterMatrix(FIRST_MATRIX_ROWS, FIRST_MATRIX_COLUMNS);

    //initialization the second matrix
    float**** secondMatrix = createOuterMatrix(SECOND_MATRIX_ROWS, SECOND_MATRIX_COLUMNS);

    multiplyMatrix(firstMatrix, secondMatrix);

/*
    for (int i = 0; i < FIRST_MATRIX_ROWS; i++) {
        for (int j = 0; j < FIRST_MATRIX_COLUMNS; j++) {
            printf("Matrix [%d][%d]", i, j);
            outputLittleMatrix(firstMatrix[i][j]);
        }
    }*/
/*
    int** matrix1 = (int**)calloc(MATRIX1_ROWS, sizeof(int*));
    for (int i = 0; i < MATRIX1_ROWS; i++) {
        matrix1[i] = (int*)calloc(MATRIX1_COLUMNS, sizeof(int));
    }

    for (int i = 0; i < MATRIX1_ROWS; i++) {
        for (int j = 0; j < MATRIX1_COLUMNS; j++) {
            matrix1[i][j] = rand() / 10;
        }
    }

    int** matrix2 = (int**)calloc(MATRIX2_ROWS, sizeof(int*));
    for (int i = 0; i < MATRIX2_ROWS; i++) {
        matrix2[i] = (int*)calloc(MATRIX2_COLUMNS, sizeof(int));
    }

    for (int i = 0; i < MATRIX2_ROWS; i++) {
        for (int j = 0; j < MATRIX2_COLUMNS; j++) {
            matrix2[i][j] = rand() / 10;
        }
    }

    checkMultiplyMatrix(matrix1, matrix2);*/


    return 0;
}

void checkMultiplyMatrix(int** m1, int** m2) {
    int** result = (int**)calloc(MATRIX1_ROWS, sizeof(int*));
    for (int i = 0; i < MATRIX1_ROWS; i++) {
        result[i] = (int*)calloc(MATRIX2_COLUMNS, sizeof(int));
    }


    for(int i = 0; i < MATRIX1_ROWS; i++) {
        for (int j = 0; j < MATRIX2_COLUMNS; j++) {
            result[i][j] = 0;
            for (int k = 0; k < MATRIX1_COLUMNS; k++)
                result[i][j] += m1[i][k] * m2[k][j];
        }
    }

    for (int i = 0; i < MATRIX1_ROWS; i++) {
        for (int j = 0; j < MATRIX2_COLUMNS; j++) {
            printf("%d\t", result[i][j]);
        }
        printf("\n");
    }


}

float **** createOuterMatrix(int rows, int columns) {
    float**** matrix = (float****)calloc(rows, sizeof(float***));
    for (int i = 0; i < rows; i++){
        matrix[i] = (float***)calloc(columns, sizeof(float**));
    }

    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {
            matrix[i][j] = createInteriorMatrix();
        }
    }


    return matrix;
}

float** createInteriorMatrix() {
    float **littleMatrix = (float **) calloc(INTERIOR_MATRIX_SIZE, sizeof(float *));
    for (int i = 0; i < INTERIOR_MATRIX_SIZE; i++) {
        littleMatrix[i] = (float *) calloc(INTERIOR_MATRIX_SIZE, sizeof(float));
    }

    for (int i = 0; i < INTERIOR_MATRIX_SIZE; i++) {
        for (int j = 0; j < INTERIOR_MATRIX_SIZE; j++) {
            littleMatrix[i][j] = (float) rand() / (float) (RAND_MAX / 10);
        }
    }

   return littleMatrix;
}

void outputLittleMatrix(float** matrix) {

    for (int i = 0; i < INTERIOR_MATRIX_SIZE; i++) {
        for (int j = 0; j < INTERIOR_MATRIX_SIZE; j++) {
            printf("%.2f  ", matrix[i][j]);
        }
        printf("\n");
    }
}

void multiplyMatrix (float**** firstMatrix, float**** secondMatrix) {
    float **** result = createOuterMatrix(FIRST_MATRIX_ROWS, SECOND_MATRIX_COLUMNS);

    high_resolution_clock::time_point start, end;

    start = high_resolution_clock::now();

    float ** temp = emptyMatrix();
    [[gnu::target("avx")]]
    for (int i = 0; i < FIRST_MATRIX_ROWS; i++) {
        for (int j = 0; j < SECOND_MATRIX_COLUMNS; j++) {
            result[i][j] = emptyMatrix();
            for (int k = 0; k < FIRST_MATRIX_COLUMNS; k++) {
                temp = multiplyInteriorMatrix(firstMatrix[i][k], secondMatrix[k][j]);
                result[i][j] = sumMatrix(result[i][j], temp);
            }
        }
    }

    end = high_resolution_clock::now();

    duration<double> timeDuration = duration_cast<duration<double>>(end - start);
    printf("Duration is: %fl", timeDuration);
}

float ** multiplyInteriorMatrix(float** firstMatrix, float** secondMatrix) {
    float ** result = emptyMatrix();

    for(int i = 0; i < INTERIOR_MATRIX_SIZE; i++) {
        for (int j = 0; j < INTERIOR_MATRIX_SIZE; j++) {
            result[i][j] = 0;
            for (int k = 0; k < INTERIOR_MATRIX_SIZE; k++)
                result[i][j] += firstMatrix[i][k] * secondMatrix[k][j];
        }
    }

    return result;
}


float ** emptyMatrix() {
    float** result = (float**)calloc(INTERIOR_MATRIX_SIZE, sizeof(float*));
    for (int i = 0; i < INTERIOR_MATRIX_SIZE; i++) {
        result[i] = (float*)calloc(INTERIOR_MATRIX_SIZE, sizeof(float));
    }

    for (int i = 0; i < INTERIOR_MATRIX_SIZE; i++){
        for (int j = 0; j < INTERIOR_MATRIX_SIZE; j++) {
            result[i][j] = 0;
        }
    }
    return result;
}

float** sumMatrix(float** firstComponent, float** secondComponent ){
    float ** sum = emptyMatrix();
    for (int i = 0; i < INTERIOR_MATRIX_SIZE; i++) {
        for (int j = 0; j < INTERIOR_MATRIX_SIZE; j++) {
            sum[i][j] = firstComponent[i][j] +secondComponent[i][j];
        }
    }

    return sum;
}