        private static IEnumerable<CodeInstruction> PopupHolyOrder_setTo_Transpiler(IEnumerable<CodeInstruction> codeInstructions)
        {
            List<CodeInstruction> instructionList = codeInstructions.ToList();

            MethodInfo MI_TranspilerBody_DisplayInfluenceElder = AccessTools.Method(typeof(HarmonyPatches), nameof(PopupHolyOrder_setTo_TranspilerBody_DisplayInfluenceElder));
            MethodInfo MI_TranspilerBody_DisplayInfluenceHuman = AccessTools.Method(typeof(HarmonyPatches), nameof(PopupHolyOrder_setTo_TranspilerBody_DisplayInfluenceHuman));
            MethodInfo MI_TranspilerBody_InfluenceStats = AccessTools.Method(typeof(HarmonyPatches), nameof(PopupHolyOrder_setTo_TranspilerBody_InfluenceStats));

            // Influence Dark and Influence Good Summaries
            FieldInfo FI_PopupHolyOrder_influenceDark = AccessTools.Field(typeof(PopupHolyOrder), nameof(PopupHolyOrder.influenceDark));
            FieldInfo FI_PopupHolyOrder_influenceDarkp0 = AccessTools.Field(typeof(PopupHolyOrder), nameof(PopupHolyOrder.influenceDarkp0));
            FieldInfo FI_PopupHolyOrder_influenceGood = AccessTools.Field(typeof(PopupHolyOrder), nameof(PopupHolyOrder.influenceGood));
            FieldInfo FI_PopupHolyOrder_influenceGoodp0 = AccessTools.Field(typeof(PopupHolyOrder), nameof(PopupHolyOrder.influenceGoodp0));
            // Influence Dark and Influence Good Stats
            FieldInfo FI_PopupHolyOrder_influenceDarkStats = AccessTools.Field(typeof(PopupHolyOrder), nameof(PopupHolyOrder.influenceDarkStats));
            FieldInfo FI_PopupHolyOrder_influenceGoodStats = AccessTools.Field(typeof(PopupHolyOrder), nameof(PopupHolyOrder.influenceGoodStats));


            (int, int)[] rangesDisplayInf = new (int, int)[5];

            int findIndex = -1;

            // For loop to gather all target indexes and ranges
            for (int i = 0; i < instructionList.Count; i++)
            {
                if (findIndex == -1 && instructionList[i].opcode == OpCodes.Ldfld)
                {
                    switch (instructionList[i].operand)
                    {
                        case FieldInfo fi when fi == FI_PopupHolyOrder_influenceDark:
                            rangesDisplayInf[0] = (i, 0);
                            findIndex = 0;
                            Console.WriteLine("CommunityLib: Found transpiler target " + findIndex + " at Index " + i);
                            break;
                        case FieldInfo fi when fi == FI_PopupHolyOrder_influenceGood:
                            rangesDisplayInf[1] = (i, 0);
                            findIndex = 1;
                            Console.WriteLine("CommunityLib: Found transpiler target " + findIndex + " at Index " + i);
                            break;
                        case FieldInfo fi when fi == FI_PopupHolyOrder_influenceDarkp0:
                            rangesDisplayInf[2] = (i, 0);
                            findIndex = 2;
                            Console.WriteLine("CommunityLib: Found transpiler target " + findIndex + " at Index " + i);
                            break;
                        case FieldInfo fi when fi == FI_PopupHolyOrder_influenceGoodp0:
                            rangesDisplayInf[3] = (i, 0);
                            findIndex = 3;
                            Console.WriteLine("CommunityLib: Found transpiler target " + findIndex + " at Index " + i);
                            break;
                        case FieldInfo fi when fi == FI_PopupHolyOrder_influenceDarkStats:
                            rangesDisplayInf[4] = (i, 0);
                            findIndex = 4;
                            Console.WriteLine("CommunityLib: Found transpiler target " + findIndex + " at Index " + i);
                            break;
                        default:
                            break;
                    }
                }

                if (findIndex != -1)
                {
                    if (findIndex < 4)
                    {
                        if (instructionList[i].opcode == OpCodes.Call && instructionList[i - 1].opcode == OpCodes.Stelem_Ref && instructionList[i + 1].opcode == OpCodes.Callvirt)
                        {
                            rangesDisplayInf[findIndex] = (rangesDisplayInf[findIndex].Item1, i);
                            Console.WriteLine("CommunityLib: Found transpiler range " + findIndex + " end at Index " + i);
                            findIndex = -1;
                        }
                    }
                    else if (findIndex == 4)
                    {
                        if (instructionList[i].opcode == OpCodes.Ldarg_0 && instructionList[i+1].opcode == OpCodes.Ldfld && instructionList[i + 2].opcode == OpCodes.Ldfld)
                        {
                            rangesDisplayInf[findIndex] = (rangesDisplayInf[findIndex].Item1, i);
                            Console.WriteLine("CommunityLib: Found transpiler range " + findIndex + " end at Index " + i);
                            findIndex = -1;
                        }
                    }
                }
            }

            // Modify code at each target index and range in reverse order.
            if (rangesDisplayInf[4].Item1 != 0 && rangesDisplayInf[4].Item2 != 0)
            {
                // This section causes an Invalid IL in wrapper error when run. Targeting is correct.
                Console.WriteLine("CommunityLib: Modifying instructionList for transpiler target 4");
                instructionList.RemoveRange(rangesDisplayInf[4].Item1, rangesDisplayInf[4].Item2 - rangesDisplayInf[4].Item1);

                List<CodeInstruction> newInstructions = new List<CodeInstruction> {
                    new CodeInstruction(OpCodes.Ldarg_1),
                    new CodeInstruction(OpCodes.Ldloc_3),
                    new CodeInstruction(OpCodes.Ldloc_2),
                    new CodeInstruction(OpCodes.Call, MI_TranspilerBody_InfluenceStats)
                };

                instructionList.InsertRange(rangesDisplayInf[4].Item1, newInstructions);
            }

            if (rangesDisplayInf[3].Item1 != 0 && rangesDisplayInf[3].Item2 != 0)
            {
                Console.WriteLine("CommunityLib: Modifying instructionList for transpiler target 3");
                instructionList.RemoveRange(rangesDisplayInf[3].Item1, 1 + rangesDisplayInf[3].Item2 - rangesDisplayInf[3].Item1);

                List<CodeInstruction> newInstructions = new List<CodeInstruction> {
                    new CodeInstruction(OpCodes.Ldarg_0),
                    new CodeInstruction(OpCodes.Ldfld, FI_PopupHolyOrder_influenceGoodp0),
                    new CodeInstruction(OpCodes.Ldarg_1),
                    new CodeInstruction(OpCodes.Ldloc_S, 5),
                    new CodeInstruction(OpCodes.Call, MI_TranspilerBody_DisplayInfluenceHuman)
                };

                instructionList.InsertRange(rangesDisplayInf[3].Item1, newInstructions);
            }

            if (rangesDisplayInf[2].Item1 != 0 && rangesDisplayInf[2].Item2 != 0)
            {
                Console.WriteLine("CommunityLib: Modifying instructionList for transpiler target 2");
                instructionList.RemoveRange(rangesDisplayInf[2].Item1, 1 + rangesDisplayInf[2].Item2 - rangesDisplayInf[2].Item1);

                List<CodeInstruction> newInstructions = new List<CodeInstruction> {
                    new CodeInstruction(OpCodes.Ldarg_0),
                    new CodeInstruction(OpCodes.Ldfld, FI_PopupHolyOrder_influenceDarkp0),
                    new CodeInstruction(OpCodes.Ldarg_1),
                    new CodeInstruction(OpCodes.Ldloc_S, 4),
                    new CodeInstruction(OpCodes.Call, MI_TranspilerBody_DisplayInfluenceElder)
                };

                instructionList.InsertRange(rangesDisplayInf[2].Item1, newInstructions);
            }

            if (rangesDisplayInf[1].Item1 != 0 && rangesDisplayInf[1].Item2 != 0)
            {
                Console.WriteLine("CommunityLib: Modifying instructionList for transpiler target 1");
                instructionList.RemoveRange(rangesDisplayInf[1].Item1, 1 + rangesDisplayInf[1].Item2 - rangesDisplayInf[1].Item1);

                List<CodeInstruction> newInstructions = new List<CodeInstruction> {
                    new CodeInstruction(OpCodes.Ldarg_0),
                    new CodeInstruction(OpCodes.Ldfld, FI_PopupHolyOrder_influenceGood),
                    new CodeInstruction(OpCodes.Ldarg_1),
                    new CodeInstruction(OpCodes.Ldloc_S, 5),
                    new CodeInstruction(OpCodes.Call, MI_TranspilerBody_DisplayInfluenceHuman)
                };

                instructionList.InsertRange(rangesDisplayInf[1].Item1, newInstructions);
            }

            if (rangesDisplayInf[0].Item1 != 0 && rangesDisplayInf[0].Item2 != 0)
            {
                Console.WriteLine("CommunityLib: Modifying instructionList for transpiler target 0");
                instructionList.RemoveRange(rangesDisplayInf[0].Item1, 1 + rangesDisplayInf[0].Item2 - rangesDisplayInf[0].Item1);

                List<CodeInstruction> newInstructions = new List<CodeInstruction> {
                    new CodeInstruction(OpCodes.Ldarg_0),
                    new CodeInstruction(OpCodes.Ldfld, FI_PopupHolyOrder_influenceDark),
                    new CodeInstruction(OpCodes.Ldarg_1),
                    new CodeInstruction(OpCodes.Ldloc_S, 4),
                    new CodeInstruction(OpCodes.Call, MI_TranspilerBody_DisplayInfluenceElder)
                };

                instructionList.InsertRange(rangesDisplayInf[0].Item1, newInstructions);
            }

            for (int i = 0; i < instructionList.Count; i++)
            {
                yield return instructionList[i];
            }
        }