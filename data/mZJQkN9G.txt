#!/bin/bash
## genku-bootstrap
##
## Copyright (C) 2015 Yoroi S.r.l.
##
## Description:
##    Genku probe initial setup script
##
## Usage:
##    genku-bootstrap OPTIONS
##
## Options:
##    -h, --help            This help message
##    --test                Test network configuration
##    --restart-agent       Restart the update agent
##    --unlock-npm          Try to unlock hanging npm processes
##    -r,--reseller         The reseller name
##    -c,--customer         The customer name
##    -p,--probe-id         The proge id generated by Ground0
##    --man-iface           Management interface
##    --man-ip              Management interface IP
##    --man-netmask         Management netwmas
##    --man-gateway         Management gateway IP
##    --man-dns-1           Management primary DNS server
##    --man-dns-2           Management secondary DNS server
##    --man-domain          Management local domain
##    --skip-check-distro   Skip the linux distribution check
##
## Example:
##    ./genku-bootstrap -r 'Reseller name' -c customer -p 'probe id generated by Ground0'
##

# ----------------
# UTILITY FUNCTIONS
# ----------------

echoerr() {
  echo "$@" 1>&2;
}

init_errorlog() {
  echo "$(date +'%Y/%m/%dT%T'): running '$0 $@' on $(hostname)" >> ${LOGFILE};
}

usage() {
  [ "$*" ] && echoerr "$0: $*"
  sed -n '/^##/,/^$/s/^## \{0,1\}//p' "$0" 1>&2
  exit 2
}

get_value() {
  local VARNAME=$1
  local VARVAL=$(eval "echo \${${VARNAME}[@]}")
  while [ "${VARVAL}" == "" ] || [ -z ${VARVAL} 2>/dev/null ]; do
    read -r -p "Please insert ${txtpur}${VARNAME}${txtrst} value: " VARVAL
    export "${VARNAME}"="${VARVAL}" 2>> ${LOGFILE}
    #VARVAL=$(eval "echo \${${VARNAME}[@]}")
  done
}

confirm() {
  read -p "$(tput setaf 3)$1 ? [y/N]$(tput sgr0)" REPLY
  echo ""
  [[ ! $REPLY =~ ^[Yy]$ ]] && return 0
  return 1
}

verify_requirements() {
  progress_bar "Verifying system" "Checking user" 1 3
  am_i_root
  progress_bar "Verifying system" "Installing required packages" 2 3
  apt-get install net-tools
  progress_bar "Verifying system" "Checking disk space" 3 3
  FREE=$(df -BM / | awk '{print $4}' | grep -oE '[0-9]+')
  if ! (( $FREE > 102400 )); then
    echoerr "${txtylw}The available disk space on '/' is not enough ${bldred}$(df -h / | awk '{print $4}' | tail -n 1)${txtrst} required ${txtylw}100GB${txtrst}"
    exit 1
  fi
}

is_valid_iface() {
  local IFNAME="$1"
  for iface in $(ls -1 /sys/class/net/)
  do
    if [ "$IFNAME" == "${iface}" ];
    then
      return 0
    fi
  done
  return 1
}

is_valid_ip() {
  local ip=$1
  local stat=1
  if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
      OIFS=$IFS
      IFS='.'
      ip=($ip)
      IFS=$OIFS
      [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
          && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
      stat=$?
  fi
  return $stat
}

is_valid_netmask() {
  local pref=$1
  local stat=1
  if [[ $pref =~ ^[0-9]{1,2}$ && $pref -ge 1 && $pref -le 32  ]]; then
      stat=0
  fi
  return $stat
}

am_i_root(){
if [ "$(id -u)" != "0" ]; then
   echoerr "${txtylw}The genku setup script must be run as ${bldred}root${txtrst} ${txtylw}(eg. sudo $0)${txtrst}"
   exit 1
fi
}

progress_bar() {
  local ACTIVITY="$1"
  local TASK="$2"
  local N_PROGRESS="$3"
  local TOT_PROGRESS="$4"
  if [ "$N_PROGRESS" != "$TOT_PROGRESS" ]; then
    printf "${bldcyn}%s${txtrst}: ${txtwht}%s${txtrst} [${txtylw}%d${txtrst}${txtwht}/%d${txtrst}]\n" "$ACTIVITY" "$TASK" "$N_PROGRESS" "$TOT_PROGRESS"
  else
    printf "${bldgrn}%s${txtrst}: ${txtwht}%s${txtrst} [${txtgrn}%d${txtrst}${txtgrn}/%d${txtrst}]\n" "$ACTIVITY" "$TASK" "$N_PROGRESS" "$TOT_PROGRESS"
  fi
}

txtund=$(tput sgr 0 1)          # Underline
txtbld=$(tput bold)             # Bold
bldred=${txtbld}$(tput setaf 1) # Red
bldgrn=${txtbld}$(tput setaf 2) # Green
bldgrn=${txtbld}$(tput setaf 2) # Green
bldylw=${txtbld}$(tput setaf 3) # Yellow
bldblu=${txtbld}$(tput setaf 4) # Blue
bldpur=${txtbld}$(tput setaf 5) # Purple
bldcyn=${txtbld}$(tput setaf 6) # Cyan
bldwht=${txtbld}$(tput setaf 7) # White
txtred=$(tput setaf 1)  # Red
txtgrn=$(tput setaf 2)  # Green
txtylw=$(tput setaf 3)  # Yellow
txtblu=$(tput setaf 4)  # Blue
txtpur=$(tput setaf 5)  # Purple
txtcyn=$(tput setaf 6)  # Cyan
txtwht=$(tput setaf 7)  # White
txtrst=$(tput sgr0)             # Reset
info=${bldwht}*${txtrst}        # Feedback
pass=${bldblu}*${txtrst}
warn=${bldred}*${txtrst}
ques=${bldblu}?${txtrst}

# ----------------
# FUNCTIONS
# ----------------

install_minion() {
  progress_bar "Installing Configuration Agent" "registering code repo" 1 4
  dpkg --add-architecture i386 >${LOGFILEVERBOSE} 2>>${LOGFILE}
  apt-get update -y                                >${LOGFILEVERBOSE} 2>>${LOGFILE}
  apt-get install -y "python3-software-properties" >${LOGFILEVERBOSE} 2>>${LOGFILE}
  apt-get install -y "software-properties-common" >${LOGFILEVERBOSE} 2>>${LOGFILE}

  # Install "pip".
  apt-get install -y "python3-pip"        >${LOGFILEVERBOSE} 2>>${LOGFILE}
  apt-get install -y "python3-setuptools" >${LOGFILEVERBOSE} 2>>${LOGFILE}
  # apt-get purge   -y "python-pip-whl"    >${LOGFILEVERBOSE} 2>>${LOGFILE}
  # easy_install "pip"                     >${LOGFILEVERBOSE} 2>>${LOGFILE}
  # OMG ubuntu 14.04 important fix
  # pip install "urllib3==1.14" >${LOGFILEVERBOSE} 2>>${LOGFILE}
  # export PYTHONPATH=/usr/local/lib/python2.7/dist-packages:/usr/lib/python2.7/dist-packages
  # echo "PYTHONPATH=\"$PYTHONPATH\"" >> /etc/environment

  # Install "docker"
  pip3 install --upgrade pip >${LOGFILEVERBOSE} 2>>${LOGFILE}
  pip3 install "docker" >${LOGFILEVERBOSE} 2>>${LOGFILE}

  wget --quiet -O - https://repo.saltstack.com/py3/ubuntu/$GOOD_VER/amd64/latest/SALTSTACK-GPG-KEY.pub | sudo apt-key add - >${LOGFILEVERBOSE} 2>>${LOGFILE}
  echo "deb [arch=amd64] http://repo.saltstack.com/py3/ubuntu/$GOOD_VER/amd64/$GOOD_SALTVERSION bionic main" > /etc/apt/sources.list.d/saltstack.list
  progress_bar "Installing Configuration Agent" "updating software" 2 4
  apt-get update -y                                                >${LOGFILEVERBOSE} 2>>${LOGFILE}
  progress_bar "Installing Configuration Agent" "installing software" 3 4

  apt-get install -y salt-minion python-jinja2-doc python-psutil-doc python3-pycurl python3-augeas python3-croniter >${LOGFILEVERBOSE} 2>>${LOGFILE}
  progress_bar "Installing Configuration Agent" "completed" 4 4
  echo ""
}

config_minion() {
  local ID="$1"
  local CUST="$2"
  local RESELL="$3"
  local MASTER_HOST="$4"
  local MASTER_KEY="$5"
  local MANAGEMENT_INTERFACE="$6"
  progress_bar "Configuration Agent Setup" "applying configurations" 1 2
  mkdir -p /home/yoroi/.ssh/ 2>>${LOGFILE}
  touch /home/yoroi/.ssh/config
  ssh-keyscan -H "$MASTER_HOST" >> /home/yoroi/.ssh/known_hosts 2>> ${LOGFILE}
  chown yoroi:yoroi /home/yoroi/.ssh/known_hosts 2>> ${LOGFILE}
  chown yoroi:yoroi /home/yoroi/.ssh/config 2>> ${LOGFILE}
  cat > /etc/salt/minion <<EOSMIN
master:     ${MASTER_HOST}
id:         ${ID}
grains:
    role: genku
    customer: ${CUST}
    reseller: ${RESELL}
    managementIf: ${MANAGEMENT_INTERFACE}
verify_env: True
saltenv: ${ENVIRONMENT}
pillarenv: ${ENVIRONMENT}
acceptance_wait_time: 30
ping_interval: 30
recon_default: 1000
recon_max: 59000
recon_randomize: True
master_finger: '$MASTER_KEY'
hash_type: sha256
EOSMIN
  sleep 1
  progress_bar "Configuration Agent Setup" "completed" 2 2
}
run_minion(){
 progress_bar "Starting Configuration Agent" "starting system service" 1 2
 systemctl stop salt-minion                  >${LOGFILEVERBOSE} 2>>${LOGFILE}
 rm /etc/salt/pki/minion/minion_master.pub >${LOGFILEVERBOSE} 2>>${LOGFILE}
 systemctl start salt-minion                 >${LOGFILEVERBOSE} 2>>${LOGFILE}
 progress_bar "Starting Configuration Agent" "completed" 2 2
}
report_network_iface(){
  local IFACES=($(ls -1 /sys/class/net 2>>${LOGFILE}))
  echo "Your system has ${#IFACES[@]} network interfaces:"
  echo -e "${bldwht}    Iface\tMAC\t\t\tIP\t\tGateway${txtrst}"
  for iface in $(ls -1 /sys/class/net 2>>${LOGFILE})
  do
    ipa=$(ip addr show dev $iface | grep -oE 'inet \S+' | cut -d' ' -f2 2>>${LOGFILE})
    mac=$(cat /sys/class/net/${iface}/address 2>>${LOGFILE})
    route=$(ip route list dev $iface | grep default | cut -d' ' -f3 2>>${LOGFILE})
    echo -e "    ${txtgrn}${iface}${txtrst}: \t${bldwht}${mac}\t${ipa}\t${route}${txtrst}"
  done
}
config_network(){
  report_network_iface
  echo -e "\nsytstemd-resolve status:\n${txtgrn}"
  systemd-resolve --status | grep -E "DNS (Servers|Domain)" -A 10
  echo "${txtrst}"
  echo "Please ${txtpur}answer to the following questions${txtrst} to properly configure the ${bldgrn}management interface${txtrst}"
  get_value 'MANAGEMENT_INTERFACE'
  get_value 'MANAGEMENT_INTERFACE_IP'
  get_value 'MANAGEMENT_INTERFACE_NETMASK_PREFIX'
  get_value 'MANAGEMENT_INTERFACE_GATEWAY'
  get_value 'MANAGEMENT_INTERFACE_DNS_PRIMARY'
  get_value 'MANAGEMENT_INTERFACE_DNS_SECONDARY'
  get_value 'MANAGEMENT_INTERFACE_DOMAIN'

  is_valid_iface "${MANAGEMENT_INTERFACE}"
  if [ $? -eq 1 ]; then
    echo "${txtred}Invalid interface name${txtrst}"
    exit 3
  fi
  is_valid_ip "${MANAGEMENT_INTERFACE_IP}"
  if [ $? -eq 1 ]; then
    echo "${txtred}Invalid interface IP address, check your syntax${txtrst}"
    exit 3
  fi
  is_valid_netmask "${MANAGEMENT_INTERFACE_NETMASK_PREFIX}"
  if [ $? -eq 1 ]; then
    echo "${txtred}Invalid interface IP prefix, check your syntax${txtrst}"
    exit 3
  fi
  is_valid_ip "${MANAGEMENT_INTERFACE_GATEWAY}"
  if [ $? -eq 1 ]; then
    echo "${txtred}Invalid gateway IP address, check your syntax${txtrst}"
    exit 3
  fi
  is_valid_ip "${MANAGEMENT_INTERFACE_DNS_PRIMARY}"
  if [ $? -eq 1 ]; then
    echo "${txtred}Invalid primary dns IP address, check your syntax${txtrst}"
    exit 3
  fi
  is_valid_ip "${MANAGEMENT_INTERFACE_DNS_SECONDARY}"
  if [ $? -eq 1 ]; then
    echo "${txtred}Invalid secondary dns IP address, check your syntax${txtrst}"
    exit 3
  fi

  echo "Management network configuration details:${txtrst}"
  echo -e "    ${bldblu}Interface:${txtrst} \t\t${bldwht}${MANAGEMENT_INTERFACE}${txtrst}"
  echo -e "    ${bldblu}IP:${txtrst} \t\t${bldwht}${MANAGEMENT_INTERFACE_IP}/${MANAGEMENT_INTERFACE_NETMASK_PREFIX}${txtrst}"
  echo -e "    ${bldblu}Gateway:${txtrst} \t\t${bldwht}${MANAGEMENT_INTERFACE_GATEWAY}${txtrst}"
  echo -e "    ${bldblu}Primary DNS:${txtrst} \t${bldwht}${MANAGEMENT_INTERFACE_DNS_PRIMARY}${txtrst}"
  echo -e "    ${bldblu}Secondary DNS:${txtrst} \t${bldwht}${MANAGEMENT_INTERFACE_DNS_SECONDARY}${txtrst}"
  echo -e "    ${bldblu}Domain:${txtrst} \t\t${bldwht}${MANAGEMENT_INTERFACE_DOMAIN}${txtrst}"
  echo ""
  confirm "Are these configurations correct"
  if [ $? -eq 0 ]; then
    echo "${txtred}Probe configuration aborted by user${txtrst}"
    exit 4
  fi

 progress_bar "Network Configuration" "configuring management interface" 1 2
 if [[ -f /etc/netplan/01-netcfg.yaml ]]; then
   echo -e "${txtylw}Backing up /etc/netplan/01-netcfg.yaml${txtrst}"
   mv /etc/netplan/01-netcfg.yaml /etc/netplan/01-netcfg.yaml.backup
 fi

  if [ "$MANAGEMENT_INTERFACE_DNS_PRIMARY" == "$MANAGEMENT_INTERFACE_DNS_SECONDARY" ]; then
    DNSCFG="[${MANAGEMENT_INTERFACE_DNS_PRIMARY}]"
  else
    DNSCFG="[${MANAGEMENT_INTERFACE_DNS_PRIMARY}, ${MANAGEMENT_INTERFACE_DNS_SECONDARY}]"
  fi

 cat > /etc/netplan/40-genku.yaml 2>>${LOGFILE} <<EOS_IFACE
## Network configuration by Genku
## Generated automatically by GENKU BOOTSTRAP
## If you need to customize the ${MANAGEMENT_INTERFACE} configuration:
##  - Create a new override on /etc/netplan/
##  - Delete the configuration below for ${MANAGEMENT_INTERFACE}
##  - Setup the network interface on the CSDC with the 'dontConfigure' flag

network:
  version: 2
  renderer: networkd
  ethernets:
    ${MANAGEMENT_INTERFACE}:
      addresses:
        - ${MANAGEMENT_INTERFACE_IP}/${MANAGEMENT_INTERFACE_NETMASK_PREFIX}
      gateway4: ${MANAGEMENT_INTERFACE_GATEWAY}
      nameservers:
        search: [${MANAGEMENT_INTERFACE_DOMAIN}]
        addresses: ${DNSCFG}
EOS_IFACE
 sleep 1
 progress_bar "Network Configuration" "applying configuration" 2 4
 netplan apply
 pkill dhclient
 sleep 10
 progress_bar "Network Configuration" "triggering ntp update" 3 4
 ntpdate -s time-c.nist.gov time-d.nist.gov time-b.nist.gov time-a.nist.gov
 progress_bar "Network Configuration" "completed" 4 4
}
test_system(){
  echo "${txtylw}Test probe basic networking setup, if no error is shown network connectiovity"
  echo "should be ok.${txtrst}"
  echo "${txtylw}NOTE:${txtrst} basic connectivity testing does not necessary cover connectivity testing"
  echo "      to all the destination that Genku Probe will have to connect to in order "
  echo "      to complete the whole installation process.If you organization use restrictive"
  echo "      firewalling policies for outbound connection some of the genku components could "
  echo "      not be installed."
  echo "      In this unlucky case Yoroi staff will should ask you to reconfigure your firewall"
  echo "      policies for the Genku Probe. However you can also check system installation status"
  echo "      from the Ground0 portal and notify the ${bldred}YOROI${txtrst} support if you think something wrong"
  echo "      during the installation process."
  echo ""

  echo "$(date +'%Y/%m/%dT%T'): running tests on $(hostname)" >> "${LOGFILE}";
  sleep 5

  progress_bar "Network Test" "gathering netork information" 1 10
  echo "${txtgrn}Interfaces configurations:${txtrst}"
  ip addr | tee -a ${LOGFILE};
  echo "${txtgrn}Routing configurations:${txtrst}"
  route -n | tee -a ${LOGFILE};
  echo "${txtgrn}DNS configurations:${txtrst}"
  cat /etc/resolv.conf | grep -v '#' | tee -a ${LOGFILE};
  echo "${txtgrn}ARP table:${txtrst}"
  arp -an | tee -a ${LOGFILE};
  progress_bar "Network Test" "test gateway reachability" 2 10
  ping -c 5 "$(route -n | grep 0.0.0.0| head -1| sed 's/ \+/,/g' |cut -d ',' -f 2)"  >> ${LOGFILE} 2>&1
  if [ $? -eq 1 ]; then
    echo "${txtred}Cannot reach gateway${txtrst}"
  fi
  BACKEND_REACHABLE="$(curl -k https://$PROBE_MASTER_HOST 2>/dev/null | wc)"
  if [ "$BACKEND_REACHABLE" == "0" ]; then
    echo "${txtred}Cannot reach $PROBE_MASTER_HOST, check network connectivity and the /etc/hosts file${txtrst}"
  fi
  progress_bar "Network Test" "test dns primary server reachability" 3 10
  host -t a yoroi.company "$(grep 'nameserver' /etc/resolv.conf | head -1 | cut -d' ' -f2)"  >> ${LOGFILE} 2>&1
  if [ $? -eq 1 ]; then
    echo "${txtred}Cannot resolve domain names with primary dns${txtrst}"
  fi
  progress_bar "Network Test" "test dns secondary server reachability" 4 10
  host -t a yoroi.company "$(grep 'nameserver' /etc/resolv.conf | tail -1 | cut -d' ' -f2)"  >> ${LOGFILE} 2>&1
  if [ $? -eq 1 ]; then
    echo "${txtred}Cannot resolve domain names with secondary dns${txtrst}"
  fi
  progress_bar "Network Test" "test ntp connectivity" 5 10
  ntpdate -d time-c.nist.gov time-d.nist.gov time-b.nist.gov time-a.nist.gov  >> ${LOGFILE} 2>&1
  if [ $? -eq 1 ]; then
    echo "${txtred}Cannot resolve connect to ntp servers${txtrst}"
  fi
  progress_bar "Network Test" "repositories connectivity" 6 19
  apt-get update -d >> ${LOGFILE} 2>&1
  if [ $? -eq 1 ]; then
    echo "${txtred}Cannot retrieve packages information from repositories${txtrst}"
  fi

  progress_bar "Network Test" "genku update services connectivity" 7 10
  for PORT in 443 8443 4505 4506; do
    nc -v -z ${PROBE_MASTER_HOST} $PORT >> ${LOGFILE} 2>&1
    if [ $? -eq 1 ]; then
      echo "${txtred}Cannot connect to the probe update services ($PORT tcp)${txtrst}"
    fi
  done
  # for PORT in 53 123; do
  #   nc -v -z -u ${PROBE_MASTER_HOST} $PORT >> ${LOGFILE} 2>&1
  #   if [ $? -eq 1 ]; then
  #     echo "${txtred}Cannot connect to the probe update services ($PORT udp)${txtrst}"
  #   fi
  # done

  progress_bar "Network Test" "keyserver connectivity" 8 10
  nc -v -z "keyserver.ubuntu.com" 11371 >> ${LOGFILE} 2>&1
  if [ $? -eq 1 ]; then
    echo "${txtred}Cannot connect to keyserver services (11371)${txtrst}"
  fi
  progress_bar "Network Test" "genku https connectivity" 8 10
  curl 'https://users.yoroi.company/' 1>${LOGFILEVERBOSE} >> ${LOGFILE} 2>&1
  if [ $? -eq 1 ]; then
    echo "${txtred}Cannot validate https certificates (forward proxy with https inspection is not supported)${txtrst}"
  fi
  progress_bar "Network Test" "completed" 10 10


  progress_bar "System Test" "genku update service installed" 1 3
  local AGENT=$(whereis salt-minion | cut -d':' -f2)
  if [ "$AGENT" == "" ]; then
    echo "${txtred}Genku update service agent not installed${txtrst}"
  else
    PR_ID="$(cat /etc/salt/minion | grep -E 'id:' | cut -d':' -f2 | sed 's,\s+,,g')"
    if [ "$PR_ID" != "" ]; then
      echo "${txtgrn}Genku update service configured with id ${PR_ID} ${txtrst}"
    fi
  fi
  progress_bar "System Test" "genku update service running" 2 3
  local SVCPID=$(service salt-minion status | grep -o 'process.*' | cut -d' ' -f 2)
  if [ "$SVCPID" == "" ]; then
    echo "${txtred}Genku update service agent not running${txtrst}"
  fi
  progress_bar "System Test" "completed" 3 3
}
check_distro(){
  local OS=$(lsb_release -si)
  local ARCH=$(uname -m | sed 's/x86_//;s/i[3-6]86/32/')
  local VER=$(lsb_release -sr)
  if [ "$OS" != "$GOOD_OS" ] || [ "$ARCH" != "$GOOD_ARCH" ] || [[ "$VER" != "$GOOD_VER"* ]]; then
   echo "The system you are trying to use for genku probe installation is ${bldred}not${txtrst} supported"
   echo "    Your System: ${txtpur}$OS $VER${txtrst} (${txtpur}${ARCH}bit${txtrst})"
   echo "    Supported System: ${txtgrn}$GOOD_OS ${GOOD_VER}.*${txtrst} (${txtgrn}${GOOD_ARCH}bit${txtrst})"
   echo ""
   echoerr "Unsupported system" && exit 2
 fi
}
# ----------------
# MAIN
# ----------------
LOGFILE="/root/genku-bootstrap.log"
LOGFILEVERBOSE="/root/genku-bootstrap-verbose.log"
init_errorlog

GOOD_OS='Ubuntu'
GOOD_ARCH='64'
GOOD_VER='18.04'
GOOD_SALTVERSION='3003'
# BEGIN EDIT HERE
PROBE_MASTER_HOST='<PROBE_MASTER_HOST>'
PROBE_MASTER_KEY='<PROBE_MASTER_KEY>'
ENVIRONMENT='master-vanilla'
# END EDIT HERE

# Options parsing
while [ $# -gt 0 ]; do
  case $1 in
    (-h|--help) usage 2>&1;;
    (--test) test_system; exit 0; shift;;
    (--restart-agent) run_minion; exit 0; shift;;
    (--unlock-npm) killall npm; echo "Done. Please use --restart-agent to restart the update agent and retrigger installation if needed."; exit 0; shift;;
    (-r|--reseller) shift; RESELLER=$1; shift;;
    (-c|--customer) shift; CUSTOMER=$1; shift;;
    (-p|--probe-id) shift; PROBE_ID=$1; shift;;
    (--man-iface) shift; MANAGEMENT_INTERFACE=$1; shift;;
    (--man-ip) shift; MANAGEMENT_INTERFACE_IP=$1; shift;;
    (--man-netmask) shift; MANAGEMENT_INTERFACE_NETMASK_PREFIX=$1; shift;;
    (--man-gateway) shift; MANAGEMENT_INTERFACE_GATEWAY=$1; shift;;
    (--man-dns-1) shift; MANAGEMENT_INTERFACE_DNS_PRIMARY=$1; shift;;
    (--man-dns-2) shift; MANAGEMENT_INTERFACE_DNS_SECONDARY=$1; shift;;
    (--man-domain) shift; MANAGEMENT_INTERFACE_DOMAIN=$1; shift;;
    (--skip-check-distro) SKIP_CHECK_DISTRO=true; shift;;
    (--testing) ENVIRONMENT='develop-vanilla'; shift;;
    (-*) usage "$1: unknown option";;
    (*) break;;
  esac
done

if [ "$SKIP_CHECK_DISTRO" == "" ]; then
  check_distro
fi

#if [ "$TEST_NETWORK" == "true" ]; then
#  test_network
#  exit 0
#fi

get_value 'RESELLER'
get_value 'CUSTOMER'
get_value 'PROBE_ID'

echo "${txtgrn}Genku probe details:${txtrst}"
echo -e "    ${txtblu}Reseller:${txtrst} \t\t${bldwht}${RESELLER}${txtrst}"
echo -e "    ${txtblu}Customer:${txtrst} \t\t${bldwht}${CUSTOMER}${txtrst}"
echo -e "    ${txtblu}Probe ID:${txtrst} \t\t${bldwht}${PROBE_ID}${txtrst}"
if [ "$ENVIRONMENT" != "master-vanilla" ]; then
echo -e "    ${txtblu}Installation type:${txtrst} \t\t${bldwht}${ENVIRONMENT}${txtrst}"
fi
echo ""
confirm "Are these configurations correct"
if [ $? -eq 0 ]; then
  echo "${txtred}Probe configuration aborted by user${txtrst}"
  exit 4
fi

echo "${txtgrn}Proceeding with genku bootstrap configuration${txtrst} (${txtred}press CTRL+C to abort${txtrst})"

verify_requirements
config_network
install_minion
config_minion "$PROBE_ID" "$CUSTOMER" "$RESELLER" "$PROBE_MASTER_HOST" "$PROBE_MASTER_KEY" "$MANAGEMENT_INTERFACE"
run_minion
