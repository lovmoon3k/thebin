//=============================================================================
// KZM - SaveParty
//=============================================================================

/*:
 * @target MZ
 * @plugindesc This Plugin lets the player have 2 parties with separate inventories
 * @author KenzoMe92
 *
 * @url https://pluginkzmengine.wordpress.com/
 * 
 * @help KZM_SaveParty.js
 * It does not provide plugin commands.
 * 
 * To execute the plugin, in an event use "Call Script" and then type in this snippet:
 * 
 * $gameSystem.storeFirstParty();
 * $gameSystem.saveFirstInventory();
 * $gameParty.initAllItems();
 * 
 * thus saving first party and inventory, then add new party members
 * 
 * to return to first party then use this snippet:
 * 
 * $gameSystem.saveSecondInventory();
 * $gameSystem.storeSecondParty();
 * $gameParty.initAllItems();
 * $gameSystem.restoreFirstParty();
 * $gameSystem.restoreFirstInventory();
 * 
 * if needed to switch back to second party, just use this instead:
 * 
 * $gameSystem.saveFirstInventory();
 * $gameSystem.storeFirstParty();
 * $gameParty.initAllItems();
 * $gameSystem.restoreSecondParty();
 * $gameSystem.restoreSecondInventory();
 * 
 * @param Party 1 Variable
 * @type number
 * @min 1
 * @max 999
 * @default 1
 * 
 * @param Party 2 Variable
 * @type number
 * @min 1
 * @max 999
 * @default 2
 * 
 * @param Party 1 Inventory
 * @type number
 * @min 1
 * @max 999
 * @default 3
 * 
 * @param Party 2 Inventory
 * @type number
 * @min 1
 * @max 999
 * @default 4
 * 
 * 
 */

(() => {
    const params = PluginManager.parameters('KZM_SaveParty');
    const p1Var = Number(params['Party 1 Variable'] || 0);
    const p2Var = Number(params['Party 2 Variable'] || 0);
    const p1Inv = Number(params['Party 1 Inventory'] || 0);
    const p2Inv = Number(params['Party 2 Inventory'] || 0);

    Game_System.prototype.storeFirstParty = function () {
        const actors = $gameParty.members().map(actor => actor.actorId());
        actors.forEach($gameParty.removeActor.bind($gameParty));
        $gameVariables.setValue(p1Var, actors);
    };

    Game_System.prototype.storeSecondParty = function () {
        const actors = $gameParty.members().map(actor => actor.actorId());
        actors.forEach($gameParty.removeActor.bind($gameParty));
        $gameVariables.setValue(p2Var, actors);
    };

    Game_System.prototype.restoreFirstParty = function () {
        const actors = $gameVariables.value(p1Var);
        actors.forEach(actorId => $gameParty.addActor(actorId));
    };

    Game_System.prototype.restoreSecondParty = function () {
        const actors = $gameVariables.value(p2Var);
        actors.forEach(actorId => $gameParty.addActor(actorId));
    };

    Game_System.prototype.saveFirstInventory = function () {
        $gameVariables.setValue(p1Inv, {
            Armors: Object.assign({}, $gameParty._armors),
            Items: Object.assign({}, $gameParty._items),
            Weapons: Object.assign({}, $gameParty._weapons)
        });
    };

    Game_System.prototype.saveSecondInventory = function () {
        $gameVariables.setValue(p2Inv, {
            Armors: Object.assign({}, $gameParty._armors),
            Items: Object.assign({}, $gameParty._items),
            Weapons: Object.assign({}, $gameParty._weapons)
        });
    };

    Game_System.prototype.restoreFirstInventory = function () {
        const data = $gameVariables.value(p1Inv);
        ['Armors', 'Items', 'Weapons'].forEach(k => {
            const items = window[`$data${k}`];
            Object.entries(data[k]).forEach(([n, qty]) => {
                $gameParty.gainItem(items[n], qty);
            });
        });
    };

    Game_System.prototype.restoreSecondInventory = function () {
        const data = $gameVariables.value(p2Inv);
        ['Armors', 'Items', 'Weapons'].forEach(k => {
            const items = window[`$data${k}`];
            Object.entries(data[k]).forEach(([n, qty]) => {
                $gameParty.GainItem(items[n], qty);
            });
        });
    };

})();
