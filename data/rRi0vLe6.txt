#include <bits/stdc++.h>

using namespace std;

#define int long long

const int INF = INT_MAX;
vector<int> DO;
vector<int> input;

void built(int l, int r, int v) {
  if (l == r - 1) {
    DO[v] = input[l];
    return;
  }
  int m = (r + l)  / 2;
  built(l, m, v * 2 + 1);
  built(m, r, v * 2 + 2);
  DO[v] = gcd(DO[v * 2 + 1], DO[v * 2 + 2]);
}

int get(int l, int r, int ql, int qr, int v) {
  if (l >= ql && r <= qr) {
    return DO[v];
  }
  if (l >= qr || r <= ql) {
    return 0;
  }
  int m = (r + l) / 2;
  return gcd(get(l, m, ql, qr, v * 2 + 1), get(m, r, ql, qr, v * 2 + 2));
}

void rebuilt(int l, int r, int v, int pos) {
  if (l == r - 1) {
    DO[v] = input[l];
    return;
  }
  int m = (r + l) / 2;
  if (pos < m) {
    rebuilt(l, m, v * 2 + 1, pos);
  } else {
    rebuilt(m, r, v * 2 + 2, pos);
  }
  DO[v] = gcd(DO[v * 2 + 1], DO[v * 2 + 2]);
}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  int n;
  cin >> n;
  DO.assign(4 * n, 0);
  for (int i = 0; i < n; ++i) {
    int a;
    cin >> a;
    input.emplace_back(a);
  }
  built(0, n, 0);
  int m;
  cin >> m;
  for (int i = 0; i < m; ++i) {
    char c;
    int a, b;
    cin >> c >> a >> b;
    if (c == 'u') {
      input[c - 1] = b;
      rebuilt(0, n, 0, c - 1);
    } else {
      cout << get(0, n, a - 1, b, 0) << ' ';
    }
  }
  return 0;
}
