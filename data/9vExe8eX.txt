#include <iostream>
#include <vector>
#include <algorithm>
#define pb push_back
using namespace std;

const int N = 1e5 + 5;

int w[N], n, dp[N][2];
vector<int> g[N];

void dfs(int v, int p) {
    dp[v][0] = 0;    //don't take v
    dp[v][1] = w[v]; //take v
    for (auto u : g[v])
        if (u != p) {
            dfs(u, v);
            dp[v][0] += max(dp[u][0], dp[u][1]); //doesn't matter if u is taken
            dp[v][1] += dp[u][0]; //we can't take u as v is already taken
        }
}

int main()
{
    cin >> n;
    for (int i = 1; i <= n; i++)
        cin >> w[i];
    for (int i = 1; i < n; i++) {
        int a, b;
        cin >> a >> b;
        g[a].pb(b);
        g[b].pb(a);
    }
    dfs(1, -1);
    cout << max(dp[1][0], dp[1][1]);
    return 0;
}