using System;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp1
{
    internal class Program
    {
        static void Main(string[] args)
        {
            Supermarket supermarket = new Supermarket();
            supermarket.Work();
        }
    }

    class Supermarket
    {
        private List<Product> _products;
        private Queue<Client> _clients;
        private Random _random;

        public Supermarket()
        {
            _random = new Random();
            _products = new List<Product>();
            _clients = new Queue<Client>();
            InitializeProducts();
            InitializeClients();
        }

        public void Work()
        {
            while (_clients.Count > 0)
            {
                ShowProducts();

                Console.WriteLine($"\nКлиент {_clients.Peek().Name} пришел в магазин.");

                _clients.Peek().TakeProducts(_products.ToArray());

                Client client = _clients.Dequeue();
                SellProducts(client, GetResultSumOfCheque(client));

                Console.ReadKey();
                Console.Clear();
            }
        }

        private void SellProducts(Client client, int chequeValue)
        {
            bool isWork = true;

            while (isWork)
            {
                if (client.Money >= chequeValue)
                {
                    int remainsAfterOrder = client.Money - chequeValue;
                    client.ShowProducts();
                    Console.WriteLine($"У клиента {client.Money} и он купил на сумму {chequeValue} и у него осталось {remainsAfterOrder}");
                }
                else
                {
                    int index = _random.Next(0, client.GetProducts().Length);
                    Product[] products = client.GetProducts();
                    Console.WriteLine($"У вас не достаточно средств товар {products[index].Name} был удален.");
                    chequeValue -= products[index].Price;
                    client.RemoveProductByIndex(index);
                }
            }
        }

        private int GetResultSumOfCheque(Client client)
        {
            int sum = 0;

            foreach (Product product in client.GetProducts())
            {
                sum += product.Price;
            }

            return sum;
        }

        private void ShowProducts()
        {
            Console.WriteLine("Список товаров в магазине и их цена\n");

            foreach (Product product in _products)
            {
                Console.WriteLine($"{product.Name} {product.Price}");
            }
        }

        private void InitializeProducts()
        {
            _products.Add(new Product("Апельсин", 100));
            _products.Add(new Product("Мыло", 50));
            _products.Add(new Product("Бумага", 1000));
            _products.Add(new Product("Водка", 10));
            _products.Add(new Product("Колбаса", 100));
        }

        private void InitializeClients()
        {
            _clients.Enqueue(new Client("Олег", 1000));
            _clients.Enqueue(new Client("Иван", 1500));
            _clients.Enqueue(new Client("Алексей", 100));
        }
    }

    class Client
    {
        private List<Product> _products;

        public Client(string name, int money)
        {
            Money = money;
            Name = name;
            _products = new List<Product>();
        }

        public string Name { get; private set; }
        public int Money { get; private set; }

        public void RemoveProductByIndex(int index)
        {
            if (index >= 0 && index < _products.Count)
            {
                _products.RemoveAt(index);
            }
        }

        public Product[] GetProducts() // todo
        {
            return _products.ToArray();
        }

        public void AddProduct(Product product)
        {
            _products.Add(product);
        }

        public void ShowProducts()
        {
            foreach (var product in _products)
            {
                Console.WriteLine($"{product.Name} {product.Price}");
            }
        }

        public void TakeProducts(Product[] products) 
        {
            bool isWork = true;
            string exit = "выход";

            while (isWork)
            {
                Console.WriteLine("Введите название товара который хотите добавить в корзину.");
                string productName = Console.ReadLine();

                Product findedProduct = null;

                foreach (var product in products)
                {
                    if (product.Name == productName)
                    {
                        findedProduct = product;
                    }
                }

                if (findedProduct == null)
                {
                    Console.WriteLine("Товар не найден!");
                }
                else
                {
                    AddProduct(findedProduct);
                }

                Console.WriteLine("Если вы закончили набирать продукты введите слово выход");
                string userInput = Console.ReadLine();

                if (userInput == exit)
                {
                    isWork = false;
                }
            }
        }
    }

    class Product
    {
        public Product(string name, int price)
        {
            Price = price;
            Name = name;
        }

        public string Name { get; private set; }
        public int Price { get; private set; }
    }
}