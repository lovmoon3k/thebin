class TeamTasks 
{
private:
std::map<std::string, TasksInfo> person_tasks;

public:
  // Получить статистику по статусам задач конкретного разработчика
  const TasksInfo& GetPersonTasksInfo(const std::string& person) const
  {
      return person_tasks.at(person);
  }
  
  // Добавить новую задачу (в статусе NEW) для конкретного разработчитка
  void AddNewTask(const std::string& person)
  {
    ++person_tasks[person][TaskStatus::NEW];
  }
  
  // Обновить статусы по данному количеству задач конкретного разработчика,
  // подробности см. ниже
  std::tuple<TasksInfo, TasksInfo> PerformPersonTasks(const std::string& person, int task_count)
      {
          TasksInfo updated_tasks;
          TasksInfo untouched_tasks = GetPersonTasksInfo(person);
          
          for(int i = 0; i < static_cast<int>(TaskStatus::DONE) - 1; ++i)
          {
              if (task_count != 0)
              {
                  if (untouched_tasks[static_cast<TaskStatus>(i)] > task_count)
                  {
                    updated_tasks[static_cast<TaskStatus>(i + 1)] += task_count;
                    untouched_tasks[static_cast<TaskStatus>(i)] -= task_count;
                    
                    person_tasks[person][static_cast<TaskStatus>(i)] -= task_count;
                    person_tasks[person][static_cast<TaskStatus>(i + 1)] += task_count;
                    
                    task_count = 0;
                  }
                  
                  else
                  {
                      task_count -= untouched_tasks[static_cast<TaskStatus>(i)];
                    updated_tasks[static_cast<TaskStatus>(i + 1)] += untouched_tasks[static_cast<TaskStatus>(i)];
                      
                      person_tasks[person][static_cast<TaskStatus>(i)] -= untouched_tasks[static_cast<TaskStatus>(i)];
                      person_tasks[person][static_cast<TaskStatus>(i + 1)] += untouched_tasks[static_cast<TaskStatus>(i)];
                      
                    untouched_tasks.erase(static_cast<TaskStatus>(i));
                  }
              }
              
          }
          
          return tie(updated_tasks, untouched_tasks);
      }
};