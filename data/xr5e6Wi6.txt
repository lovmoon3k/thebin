------STARTUP----------
monitor = peripheral.wrap("right")
term.redirect(monitor)
term.clear()
screen = paintutils.loadImage("main.nfp")
fileR = fs.open("things.lua", "r")


paintutils.drawImage(screen, 1, 1)

------VARIABLES-------------
tasksB = {}
mes = ""
line = ""
a = ""
sState = "main"
currentGoal = "test"

x, y = term.getSize()
cx = x/2
cy = y/2

-------Functions----------
function cMes(inputMes)
    local ret = cx - #inputMes/2
    return ret    

end
function compareClick(click, minX, minY, maxX, maxY)
    --print(click[1])
    --print(click[2])
    if click[1] > minX and click[1] < maxX then
        if click[2] > minY and click[2] < maxY then
            return true
        else
            return false
        end
    else 
    return false
    end
end
--- Load Things to "tasksB" list
function loadS()
    fileR = fs.open("things.lua", "r")
    while true do
        line = fileR.readLine()
        if line == nil then
            break
        else
        --term.setCursorPos(1,1)
        --term.write(line)
        --print("e " .. line)
        --sleep(0.5)
        table.insert(tasksB, line)
        end
    end
    term.setCursorPos(1,y)
    term.write("all loaded")
end

-- Creates all the lables
function labels()
    if sState == "main" then
        mes = "CC"
        term.setCursorPos(cx - #mes/2, cy - 2)
        term.write(mes)
        term.setCursorPos(cMes(currentGoal), cy)
        term.write(currentGoal)
    end
    if sState == "add" then
        
    end
    if sState == "remove" then
    
    end
    if sState == "Display" then
        mes = "Your Task Is: "
        term.setCursorPos(cMes(mes), 7)
        term.setBackgroundColor(colors.combine(colors.lightBlue, colors.cyan))
        term.write(mes)
    end
end

-- Recreates Base Screen
function updateScreen()
    drawing = paintutils.loadImage(sState .. ".nfp")
    term.setCursorPos(1, y)
    term.setBackgroundColor(colors.cyan)
    term.write("Drawing " .. sState)
    sleep(1)
    paintutils.drawImage(drawing, 1, 1)
    labels()
end

-- Gets click position
function getClick()
    local event, side, x, y = os.pullEvent("monitor_touch")
    local lis = {}
    table.insert(lis, x)
    table.insert(lis, y)
    return lis
end

-- Start Up Code -----------
loadS()

-------------------------

sleep(0.1)
while true do
    updateScreen()

    --------------MAIN SCREEN------------------------

    if sState == "main" then
        local click = getClick()

        ---------- Save And Quit Button ------------------------
        if compareClick(click, 40, 45, 2, 6) then
            sleep(1)
            local b = fs.open("things.lua", "w")
            for i = 1, #tasksB, 1 do

            b.write(tasksB[i] .. "\n")
            --sleep(0.5)
            end
            term.setCursorPos(41, 2)
            term.setBackgroundColor(colors.lightBlue)
            term.write("Done")
            b.close()
            term.clear()
            os.shutdown()
            end 

        ----- Add Button ---------

        if compareClick(click, 4, 14, 14, 18) then
            sState = "add"
        end
        
        
        ----  Subtract Button ------

        if compareClick(click, 36, 46, 14, 18) then
            sState = "remove"
        end

        ---  Refresh Button ------
        if compareClick(click, 19, 30, 12, 17) then
            sState = "Display"
        end
    else
        ------------Adding Screen Logic-------------------------------------
        if sState == "add" then
            updateScreen()
            term.setCursorPos(15, 13)
            local new = read()
            print("adding " .. new)
            sleep(2) 
            table.insert(tasksB, new) 
            sState = "main" 




        else
            ------------Removing Screen Logic-------------------------------------
            if sState == "remove" then
                local click = getClick()
                ---- Choice 1
                if compareClick(click, 17, 33, 2, 6) then
                
                end
                ---- Choice 2
                if compareClick(click, 17, 33, 6, 10) then

                end
                ---- Choice 3
                if compareClick(click, 17, 33, 10, 14) then

                end
                ---- Select
                if compareClick(click, 17, 33, 14, 18) then

                end
                ---- Up
                if compareClick(click, 34, 40, 2, 8) then

                end
                ---- Down
                if compareClick(click, 34, 40, 12, 18) then

                end
                ---- Exit
                if compareClick(click, 44, 49, 1, 5) then

                end



            else
                ------------Displaying Screen Logic---------------
                if sState == "Display" then
                    local currGoal = tasksB[#tasksB]
                    print(tasksB[#tasksB])
                    print("numtask " .. #tasksB)
                    currGoal = string.sub(currGoal, 11, #currGoal)
                    term.setCursorPos(cMes(currGoal), 10)
                    term.write(currGoal)
                    
                    local click = getClick()
                    sState = "main"
                end
            end
        end
    end

end