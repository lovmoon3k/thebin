public class Task_1 {
    public static void main(String[] args) {

        /*
         * Примера с Калоян мисля, че попада в частен случай на т.н String pool.
         * */

        Integer[] old = new Integer[1];
        Integer[] newArr = new Integer[1];
        old[0] = Integer.valueOf(69);
        System.arraycopy(old, 0, newArr, 0, 1);
        //newArr = Arrays.copyOf(old, 1); // or this...

        old[0] = Integer.valueOf("42");
        System.out.println(Objects.equals(newArr[0], old[0])); // true
        System.out.println("HashCode for the updated \"old\" object is: " + old[0].hashCode());
        System.out.println("HashCode for the updated newArr object is: " + newArr[0].hashCode());
        System.out.println("Newly copped array is set to have value of: " + newArr[0]);
        System.out.println("Old array value is now: " + old[0]);
        System.out.println("See that new array has its VERY OWN COPY of the initial value that \"Old\" array had: " + newArr[0]);
        System.out.println("Mutations are not possible for the newly copied values(from old referenced), as the copied objects, " +
                "are brand new instances and they occupy new memory locations created during .arrayCopy()");
        newArr[0] = Integer.valueOf(13);
        System.out.println("value of \"newArr\" array[0] is now:" + newArr[0] + "see they are completely independent");
        System.out.println("value of \"old\" array[0] is now:" + old[0] + "see they are completely independent");

        //Test 2 manual copy - by reference
        Byte[] old2 = new Byte[1];
        Byte[] newArr2 = new Byte[1];

        old2[0] = Byte.valueOf("13");
        for (int i = 0; i < old2.length; i++) {
            newArr2[i] = old2[i];
        }
        System.out.println("value of newArr2[0] is: " + newArr2[0]);
        Byte b = 127;
        old2[0] = b;
        System.out.println("value of newArr2[0] is now: " + newArr2[0]);
        System.out.println("value of old2 is: " + old2[0]);


    }
}