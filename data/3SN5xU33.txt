local monitor = peripheral.find("monitor")

if not monitor then
    print("Please attach a monitor")
    return
end

local mWidth, mHeight = monitor.getSize()

monitor.clear()
monitor.setTextScale(0.5)

function centerText(textToCenter, lineNum, nudgeAmnt)
    nudgeAmnt = nudgeAmnt or 0
    local textLength = string.len(textToCenter)
    local textPos = math.floor((mWidth / 2) - (textLength / 2) + nudgeAmnt)
    monitor.setCursorPos(textPos, lineNum)
    monitor.write(textToCenter)
end

function leftText(textToCenter, lineNum, margin)
    margin = margin or 0
    local textPos = 1 + margin
    monitor.setCursorPos(textPos, lineNum)
    monitor.write(textToCenter)
end

function rightText(textToCenter, lineNum, margin)
    margin = margin or 0
    local textLength = string.len(textToCenter)
    local textPos = (mWidth - textLength) - margin
    monitor.setCursorPos(textPos, lineNum)
    monitor.write(textToCenter)
end

function seperatorBar(barLength, lineNum, barColour)
    barColour = barColour or colors.lightGray
    local tmp = ""
    for i = 1, barLength do
        tmp = tmp .. "-"
    end
    monitor.setTextColor(barColour)
    centerText(tmp, lineNum)
end

function topInfoDisplay()
    local colonyInfoTable = colony.getInfo()
    local textOut = ""
    local colonyRaidStatus = ""

    if colonyInfoTable["raid"] then
        colonyRaidStatus = "Yes"
    else
        colonyRaidStatus = "No"
    end
    
    monitor.setTextColor(colors.lime)
    textOut = colonyInfoTable["name"]
    centerText(textOut, 1)

    monitor.setTextColor(colors.yellow)
    textOut = "Style: " ..
        colonyInfoTable["style"] ..
        "     " ..
        "Being Raided: " ..
        colonyRaidStatus
    centerText(textOut, 3)

    textOut = "Happiness: " .. 
        string.format("%.2f", colonyInfoTable["happiness"]) .. 
        "       " .. 
        "Citizens: " .. 
        colonyInfoTable["citizens"] .. " / " .. colonyInfoTable["maxCitizens"]
    centerText(textOut, 4)
    seperatorBar(mWidth, 5, colors.gray)
end

function colonyRequestDisplay()
    local colonyRequests = colony.getRequests()
    
    monitor.setTextColor(colors.cyan)
    leftText("Item", 6)
    centerText("Quantity", 6, 6)
    rightText("Requested By", 6)
    seperatorBar(mWidth, 7, colors.gray)

    for i = 1, #colonyRequests do
        textLine = 7 + i
        local itemName = string.gsub(colonyRequests[i]["name"], "^.-%s", "", 1)
        local jobType, firstName = ""
        local whoRequested = ""

        if (string.find(colonyRequests[i]["target"], "%s+") == nil) then
            jobType = string.match(colonyRequests[i]["target"], "(%a+)")
            whoRequested = jobType
        else
            jobType, firstName = string.match(colonyRequests[i]["target"], "(%a+)%s*(%a+)")
            whoRequested = jobType .. " " .. firstName
        end
        
        seperatorBar(mWidth, textLine, colors.black)
        
        if (textLine % 2 == 0) then
            monitor.setTextColor(colors.lightBlue)
        else
            monitor.setTextColor(colors.blue)
        end
        
        leftText(itemName, textLine)
        centerText(colonyRequests[i]["count"], textLine, 6)
        rightText(whoRequested, textLine)
    end
end

while true do
    topInfoDisplay()
    colonyRequestDisplay()
    os.sleep(2)
end

-- monitor.restoreTo = term.current()
-- term.redirect(monitor)
-- print(table.concat(colony.getWorkOrders()))
-- term.redirect(monitor.restoreTo)


