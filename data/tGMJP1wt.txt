#ifndef ANDROIDGLINVESTIGATIONS_RENDERER_H
#define ANDROIDGLINVESTIGATIONS_RENDERER_H
#include "Precompiled/pch.h"
#include <EGL/egl.h>
#include <memory>
#include <map>

#include "Model.h"
#include "Shader.h"
#include "Utilities/Singleton.h"
#include "ISystem.h"

struct android_app;

class Renderer : public Singleton<Renderer>, public ISystem
{
public:
    //Configuration
    Renderer();
    inline Renderer(android_app *pApp) :app_(pApp),
                                        display_(EGL_NO_DISPLAY),surface_(EGL_NO_SURFACE),context_(EGL_NO_CONTEXT),
                                        width_(0),height_(0),shaderNeedsNewProjectionMatrix_(true) {initRenderer();}

    virtual ~Renderer();

    void Init() override {}
    void Awake() override {}
    void Update(double dt) override;
    void Reload() override {}
    void Shutdown() override {}


    //String
    void addNewModel(std::string s);
    Model* getModelGivenName(std::string s);
    EGLint getSurfaceWidth();
    EGLint getSurfaceHeight();
    void manualReload();
private:
    //Setup function - Change display/graphics settings here
    void initRenderer();

    //Update viewport if display size has changed
    void updateRenderArea();

    android_app *app_;
    EGLDisplay display_;
    EGLSurface surface_;
    EGLContext context_;
    EGLint width_;
    EGLint height_;

    bool shaderNeedsNewProjectionMatrix_;

    std::unique_ptr<Shader> shader_;
    std::map<std::string,Model> nameToModel; //create func to retrieve

    friend class Singleton<Renderer>;
};

#endif //ANDROIDGLINVESTIGATIONS_RENDERER_H