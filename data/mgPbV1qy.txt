#include <stdio.h>
#include <stdlib.h>

struct BSearchResult {
    size_t low;
    size_t high;
    int result;
};

struct BSearchResult
        bsearch2(const void *key, // needed value
        const void *base, // array  (typeof key == typeof base), сортирован по неубываниюб есть равные эл
        size_t nmemb, // elems in array
        size_t size, // sizeof elem
        int (*compar)(const void *p1, const void *p2, void *user), // comparator function
        void *user) { // user - comparator argument
    size_t low = 0, high = nmemb - 1, mid;
    struct BSearchResult res;
    while (low <= high) {
        mid = low + (high - low) / 2;
        if (compar(key, base + size * mid, user) == 0) {
            res.low = mid;
            while (res.low != -1 && compar(key, base + size * res.low, user) == 0) {
                res.low--;
            }
            res.low++;
            res.high = mid;
            while (res.high != nmemb && compar(key, base + size * res.high, user) == 0) {
                res.high++;
            }
            res.result = 1;
            return res;
        } else if (compar(key, base + size * mid, user) > 0) {
            low = mid + 1;
        } else {
            if (mid == 0) {
                low = 0;
                break;
            }
            high = mid - 1;
        }
    }
    res.result = 0;
    res.low = low;
    res.high = low;
    return res;
}

int cmp(const void *p1, const void *p2, void *user) {
    int a1, a2;
    a1 = *(int *)p1;
    a2 = *(int *)p2;
    if (a1 == a2) {
        return 0;
    }
    else if (a1 > a2) {
        return 1;
    }
    else {
        return -1;
    }
}

int main(void) {
    int arr[] = {0};
    int key = 100;
    struct BSearchResult res = bsearch2(&key, arr, 0, sizeof(int), &cmp, NULL);
    printf("low: %llu\nhigh: %llu\nresult: %d", res.low, res.high, res.result);
    return 0;
}
