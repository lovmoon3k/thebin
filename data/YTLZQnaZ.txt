describe("performQuery", function () {
        type Input = unknown;
        type Output = Promise<InsightResult[]>;
        type Error = "InsightError" | "ResultTooLargeError"
        let facade: IInsightFacade;

        before( function () {
            // Clear disk & load main testing dataset
            clearDisk();
            facade = new InsightFacade();
            return facade.addDataset("sections", courses, InsightDatasetKind.Sections);
        })

        it("folderTest for Dynamic Query Testing", function () {
            folderTest<Input, Output, Error>(
                "Dynamic Query Tests",
                (input: Input): Output => {
                    return facade.performQuery(input)
                },
                './test/resources/queries',
                {
                    errorValidator: (error): error is Error =>
                        error === "InsightError" || error === "ResultTooLargeError",
                    assertOnError: ((actual: any, expected: Error) => {
                        if (expected === "InsightError") {
                            expect(actual).to.be.instanceof(InsightError);
                        } else if (expected === "ResultTooLargeError") {
                            expect(actual).to.be.instanceof(ResultTooLargeError);
                        }
                    })
                })
        })
    })