#include <iostream>
#include <string>
#include <cstring>
#include <iomanip>
using namespace std;

/*
对角色进行编号：
dragon：0
ninja：1
iceman：2
lion：3
wolf：4

red方顺序：2 3 4 1 0
blue方顺序：3 0 1 2 4
*/

int total_life_point, n, round = 0, red_order, blue_order;
int red_num = 0, blue_num = 0; //表示红蓝双方的指针下标
bool red_make, blue_make;
string role_name[5] = {"dragon", "ninja", "iceman", "lion", "wolf"};
int red_list[5] = {2, 3, 4, 1, 0};
int blue_list[5] = {3, 0, 1, 2, 4};
//分别表示双方制造warrior下标序列
int red_role_left[5] = {};
//依次存放"iceman","lion","wolf","ninja","dragon"的数量
int blue_role_left[5] = {};
//依次存放"lion","dragon","ninja","iceman","wolf"的数量
int role_life_point[5] = {};
//依次存储dragon 、ninja、iceman、lion、wolf的生命值

class Game
{
public:
    int red_life_point, blue_life_point;

    Game() {}

    inline void init()
    {
        memset(red_role_left, 0, sizeof(red_role_left));
        memset(blue_role_left, 0, sizeof(blue_role_left));
        red_order = 1;
        blue_order = 1;
        red_num = 0;
        blue_num = 0;
        round = -1;
        red_make = blue_make = true;
    }

    inline int can_make(int point_remain, int role_num, int side)
    // 1表示红方，0表示蓝方
    //返回下一个可以制造的warrios的对应颜色列表下标，如果都不行，返回-1
    {
        int num;
        if (side == 1)
        {
            for (int i = 0; i < 5; ++i)
            {
                num = role_num + i;
                if (num > 4)
                {
                    num -= 5;
                }
                if (role_life_point[red_list[num]] <= point_remain)
                {
                    return num;
                }
            }
        }
        else
        {
            for (int i = 0; i < 5; ++i)
            {
                num = role_num + i;
                if (num > 4)
                {
                    num -= 5;
                }
                if (role_life_point[blue_list[num]] <= point_remain)
                {
                    return num;
                }
            }
        }
        return -1;
    }
};

int main()
{
    cin >> n;
    Game G;
    for (int i = 0; i < n; ++i)
    {
        cin >> total_life_point;
        G.init();
        G.red_life_point = G.blue_life_point = total_life_point;
        cin >> role_life_point[0] >> role_life_point[1] >> role_life_point[2] >> role_life_point[3] >> role_life_point[4];
        cout << "Case:" << i + 1 << endl;
        while (1)
        {
            if ((!red_make) && (!blue_make))
                break;
            round++;
            if (red_make)
            {
                cout << setfill('0') << setw(3) << round << ' ';
                if (G.can_make(G.red_life_point, red_num, 1) != -1)
                {
                    red_num = G.can_make(G.red_life_point, red_num, 1);
                    cout << "red " << role_name[red_list[red_num]] << " " << red_order << " "
                         << "born with strength "
                         << role_life_point[red_list[red_num]] << ',' << red_role_left[red_list[red_num]] + 1
                         << ' ' << role_name[red_list[red_num]]
                         << " in red headquarter" << endl;
                    red_role_left[red_list[red_num]]++;
                    G.red_life_point -= role_life_point[red_list[red_num]];
                    red_num++;
                    if (red_num > 4)
                        red_num = 0;
                    red_order++;
                }
                else
                {
                    cout << "red headquarter stops making warriors" << endl;
                    red_make = false;
                }
            }

            if (blue_make)
            {
                cout << setfill('0') << setw(3) << round << ' ';
                if (G.can_make(G.blue_life_point, blue_num, 0) != -1)
                {
                    blue_num = G.can_make(G.blue_life_point, blue_num, 0);
                    cout << "blue " << role_name[blue_list[blue_num]] << " " << blue_order << " "
                         << "born with strength "
                         << role_life_point[blue_list[blue_num]] << ',' << blue_role_left[blue_list[blue_num]] + 1
                         << ' ' << role_name[blue_list[blue_num]]
                         << " in blue headquarter" << endl;
                    blue_role_left[blue_list[blue_num]]++;
                    G.blue_life_point -= role_life_point[blue_list[blue_num]];
                    blue_num++;
                    if (blue_num > 4)
                        blue_num = 0;
                    blue_order++;
                }
                else
                {
                    cout << "blue headquarter stops making warriors" << endl;
                    blue_make = false;
                }
            }
        }
    }

    return 0;
}