public onPointerMove( event: PIXI.interaction.InteractionEvent ) : void
{
    if( this._isDragging == true )
    {
        let x = event.data.getLocalPosition( this ).x;
        let y = event.data.getLocalPosition( this ).y;

        // going to include vertical scroll bar as default
        let dragControlStart = this._dragControl.y;
        let dragControlSize = this._dragControl.H;
        // let's adjust the mouse position to the center of the control
        let adjusted = y - dragControlSize - ( dragControlSize / 2 );

        if (this._orientation == 'h') 
        {
            dragControlStart = this._dragControl.x;
            dragControlSize = this._dragControl.W;
            // let's adjust the mouse position to the center of the control
            adjusted = x - dragControlSize - ( dragControlSize / 2 );
        }

        // let's put the position info in the range of 1-20
        let dragControlPos = dragControlStart - dragControlSize;

        // get the change and then update the position
        let mouseDelta = adjusted - dragControlPos;
        dragControlPos += mouseDelta;

        // make sure the position doesn't go out of bounds 0-20
        if( dragControlPos < 0 ) dragControlPos = 0;
        if( dragControlPos > this._scrollDistance ) dragControlPos = this._scrollDistance;

        if (this._orientation == 'v') 
        {
            // now set the new control position by taking into account the starting position 
            // sitting just under or beside the backward button
            this._dragControl.y = ( this._backward.y + this._backward.H ) + dragControlPos;
        }
        else
        if (this._orientation == 'h') 
        {
            this._dragControl.x = ( this._backward.x + this._backward.W ) + dragControlPos;
        } 
        
        // update the scroll position for the arrow buttons
        this._scrollPos = (dragControlPos / this._scrollDistance) * 100;
        if( this._scrollPos < 1 ) 
        { 
            this._scrollPos = 1; 
        }
        else
        if( this._scrollPos > 100 ) 
        { 
            this._scrollPos = 100; 
        }
    }

}

public onPointerMove_( event: PIXI.interaction.InteractionEvent ) : void
{
    if( this._isDragging == true )
    {
        let x = event.data.getLocalPosition( this ).x;
        let y = event.data.getLocalPosition( this ).y;

        if (this._orientation == 'h') 
        {
            // let's put the position info in the range of 1-20
            let dragControlPos = this._dragControl.x - this._dragControl.W;
            
            // let's adjust the mouses x position to the center of the control
            let adjustedX = x - this._dragControl.W - ( this._dragControl.W / 2 );

            // get the change and then update the position
            let mouseDelta = adjustedX - dragControlPos;
            dragControlPos += mouseDelta;

            // make sure the position doesn't go out of bounds 0-20
            if( dragControlPos < 0 ) dragControlPos = 0;
            if( dragControlPos > this._scrollDistance ) dragControlPos = this._scrollDistance;

            // now set the new control position by taking into account the starting position 
            // sitting just under or beside the backward button
            this._dragControl.x = ( this._backward.x + this._backward.W ) + dragControlPos;

            // update the scroll position for the arrow buttons
            this._scrollPos = (dragControlPos / this._scrollDistance) * 100;
            if( this._scrollPos < 1 ) 
            { 
                this._scrollPos = 1; 
            }
            else
            if( this._scrollPos > 100 ) 
            { 
                this._scrollPos = 100; 
            }
        } 
        else 
        if (this._orientation == 'v') 
        {
            // let's put the position info in the range of 1-20
            let dragControlPos = this._dragControl.y - this._dragControl.H;
            
            // let's adjust the mouses y position to the center of the control
            let adjustedY = y - this._dragControl.H - ( this._dragControl.H / 2 );

            // get the change and then update the position
            let mouseDelta = adjustedY - dragControlPos;
            dragControlPos += mouseDelta;

            // make sure the position doesn't go out of bounds 0-20
            if( dragControlPos < 0 ) dragControlPos = 0;
            if( dragControlPos > this._scrollDistance ) dragControlPos = this._scrollDistance;

            // now set the new control position by taking into account the starting position 
            // sitting just under or beside the backward button
            this._dragControl.y = ( this._backward.y + this._backward.H ) + dragControlPos;

            // update the scroll position for the arrow buttons
            this._scrollPos = (dragControlPos / this._scrollDistance) * 100;
            if( this._scrollPos < 1 ) 
            { 
                this._scrollPos = 1; 
            }
            else
            if( this._scrollPos > 100 ) 
            { 
                this._scrollPos = 100; 
            }
        }
                                
    }

}
