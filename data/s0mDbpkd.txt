#include "test_runner.h"
#include <algorithm>
#include <iostream>
#include <iterator>
#include <memory>
#include <set>
#include <utility>
#include <vector>
#include <unordered_map>

using namespace std;

template <typename T>
class PriorityCollection {
public:
    using Id = int;
    using Priority = int;


    Id Add(T object) {
        const Id Id_Obj = Time_Add_Obj;
        Id_To_Obj_and_Priority[Id_Obj] = { move(object), Time_Add_Obj };

        Ordered_Priority_And_Id.insert({ 0, Time_Add_Obj });
        ++Time_Add_Obj;
        return Id_Obj;
    }


    template <typename ObjInputIt, typename IdOutputIt>
    void Add(ObjInputIt range_begin, ObjInputIt range_end, IdOutputIt ids_begin) {
        for (; range_begin != range_end; ++range_begin) {

            Id_To_Obj_and_Priority[Time_Add_Obj] = { move(*range_begin),Time_Add_Obj };
            Ordered_Priority_And_Id.insert({ 0,Time_Add_Obj });

            *ids_begin = Time_Add_Obj;
            ++ids_begin;
            ++Time_Add_Obj;
        }
    }


    bool IsValid(Id id) const {
        if (Id_To_Obj_and_Priority.find(id) == Id_To_Obj_and_Priority.end()) {
            return false;
        }
        return true;
    }

    const T& Get(Id id) const {
        return (Id_To_Obj_and_Priority.at(id)).first;
    }

    void Promote(Id id) {

        const Priority Old_Priority_Id = Id_To_Obj_and_Priority[id].second;
        ++Id_To_Obj_and_Priority[id].second;
        //auto Priority_With_Id = Ordered_Priority_And_Id.find();


        //auto Priority_With_Id = find_if(
        //    Ordered_Priority_And_Id.begin(),
        //    Ordered_Priority_And_Id.end(),
        //    [id](pair<Priority, Id> pr) {
        //        return (pr.second == id);
        //    });

        auto node = Ordered_Priority_And_Id.extract({ Old_Priority_Id, id });
        auto& tmp = node.value();
        ++tmp.first;
        Ordered_Priority_And_Id.insert(move(node));
    }

    pair<const T&, Priority> GetMax() const {
        const pair<Priority, Id> Data_Max_Obj = *Ordered_Priority_And_Id.rbegin();

        Priority Max_Priority = Data_Max_Obj.first;
        Id Max_Id = Data_Max_Obj.second;

        return { (Id_To_Obj_and_Priority.at(Max_Id)).first, Max_Priority };
    }

    pair<T, Priority> PopMax() {

        const pair<Priority, Id> Data_Max_Obj = *Ordered_Priority_And_Id.rbegin();

        const Priority Max_Priority = Data_Max_Obj.first;
        const Id Max_Id = Data_Max_Obj.second;

        pair<T, Priority>  ans = { move(Id_To_Obj_and_Priority[Max_Id].first) , Max_Priority };

        Ordered_Priority_And_Id.erase({ Max_Priority,Max_Id });
        Id_To_Obj_and_Priority.erase(Max_Id);


        return ans;

    }

private:

    Id Time_Add_Obj = 0;
    set < pair<Priority, Id> > Ordered_Priority_And_Id;
    unordered_map<Id, pair<T, Priority>> Id_To_Obj_and_Priority;

};


class StringNonCopyable : public string {
public:
    using string::string;  // Позволяет использовать конструкторы строки
    StringNonCopyable(const StringNonCopyable&) = delete;
    StringNonCopyable(StringNonCopyable&&) = default;
    StringNonCopyable& operator=(const StringNonCopyable&) = delete;
    StringNonCopyable& operator=(StringNonCopyable&&) = default;
};

void TestNoCopy() {
    PriorityCollection<StringNonCopyable> strings;
    const auto white_id = strings.Add("white");
    const auto yellow_id = strings.Add("yellow");
    const auto red_id = strings.Add("red");

    strings.Promote(yellow_id);
    for (int i = 0; i < 2; ++i) {
        strings.Promote(red_id);
    }
    strings.Promote(yellow_id);
    {
        const auto item = strings.PopMax();
        ASSERT_EQUAL(item.first, "red");
        ASSERT_EQUAL(item.second, 2);
    }
    {
        const auto item = strings.PopMax();
        ASSERT_EQUAL(item.first, "yellow");
        ASSERT_EQUAL(item.second, 2);
    }
    {
        const auto item = strings.PopMax();
        ASSERT_EQUAL(item.first, "white");
        ASSERT_EQUAL(item.second, 0);
    }
}

void TestId5() {
    PriorityCollection<StringNonCopyable> strings;

    list<StringNonCopyable> items;
    for (int i = 0; i < 10; ++i) {
        items.push_back(StringNonCopyable(1, 'a' + i));
    }
    vector<PriorityCollection<StringNonCopyable>::Id> ids;
    strings.Add(begin(items), end(items), back_inserter(ids));

    strings.Promote(ids[5]);
    ASSERT_EQUAL(strings.IsValid(ids[5]), true);
    pair<StringNonCopyable, int> result = strings.PopMax();
    ASSERT_EQUAL(strings.IsValid(ids[5]), false);

    ASSERT_EQUAL(result.first, "f");
    ASSERT_EQUAL(result.second, 1);


    ids.push_back(strings.Add(move(result.first)));
    ASSERT_EQUAL(strings.IsValid(ids[5]), false); 
}


void Test_2() {
    PriorityCollection<StringNonCopyable> strings;
    vector<StringNonCopyable> vect;
    vect.push_back(move("vv"));
    vect.push_back(move("zz"));
    vect.push_back(move("aa"));

    vector<size_t> result(3);
    strings.Add(vect.begin(), vect.end(), result.begin());
    for (size_t id : result) {
        std::cout << id << std::endl;
    }
}

int main() {
    TestRunner tr;
    
    RUN_TEST(tr, TestId5);
    RUN_TEST(tr, Test_2);
    RUN_TEST(tr, TestNoCopy);
    cout << 333;
    return 0;
}