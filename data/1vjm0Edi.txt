from types import SimpleNamespace

class languages(SimpleNamespace):
	def __init__(self):
		super().__init__(**{'en_gb':SimpleNamespace(**{'hello':'Hello', 'bye':'GoodBye'}), 'fr':SimpleNamespace(**{'hello':'Bonjour', 'bye':'Au revoir'})})

l=languages()
print(l.en_gb.hello) ##this gets the correct output but requires specifying the language each time
print(l.fr.hello)

class localization(object):
	def __init__(self, lang="en_gb"):
		self.languages = languages()
		self.set_language = lang
	def set_local(self, lang="en_gb"):
		self.set_language = lang
	def __get__(self):
		return getattr(self.languages, self.set_language)

class local(localization):
	def __init__(self, lang="en_gb"):
		super().__init__(lang)
	def __call__(self):
		print("called")
		return self.__get__()

language = local("en_gb") ## initilises the local class with the specified language
print(language.__dict__) ##copyies the attributes from localization class rather than setting self to localization.languages


language.set_local("fr") ##still need to access localization methods to change languages
print(language().hello) ##this is the output im looking for.

language.set_local("en_gb")
print(language().hello) ## this is the syntax im looking for