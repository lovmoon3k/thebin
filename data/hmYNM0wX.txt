# Listas são coleções de dados que podem ser modificadas e acessadas por índices
lista = [1, 2, 3] # Criando uma lista com três elementos
lista.append(4) # Adicionando um elemento ao final da lista
print(lista[0]) # Imprimindo o primeiro elemento da lista (índice 0)
print(lista[-1]) # Imprimindo o último elemento da lista (índice -1)

# Tuplas são coleções de dados que não podem ser modificadas e também podem ser acessadas por índices
tupla = (1, 2, 3) # Criando uma tupla com três elementos
# tupla.append(4) # Isso causaria um erro, pois tuplas não podem ser alteradas
print(tupla[0]) # Imprimindo o primeiro elemento da tupla (índice 0)
print(tupla[-1]) # Imprimindo o último elemento da tupla (índice -1)

# Dicionários são coleções de dados que associam chaves a valores e podem ser modificados
dicionario = {"nome": "João", "idade": 25} # Criando um dicionário com duas chaves e dois valores
dicionario["profissao"] = "Programador" # Adicionando uma nova chave e valor ao dicionário
print(dicionario["nome"]) # Imprimindo o valor associado à chave "nome"
print(dicionario["profissao"]) # Imprimindo o valor associado à chave "profissao"

# Orientação a objetos é um paradigma de programação que permite criar classes e objetos com atributos e métodos
class Pessoa: # Definindo uma classe chamada Pessoa
    def __init__(self, nome, idade): # Definindo um método construtor que recebe dois parâmetros: nome e idade
        self.nome = nome # Atribuindo o parâmetro nome ao atributo nome do objeto
        self.idade = idade # Atribuindo o parâmetro idade ao atributo idade do objeto
    
    def falar(self): # Definindo um método chamado falar que não recebe nenhum parâmetro
        print(f"Olá, meu nome é {self.nome} e eu tenho {self.idade} anos.") # Imprimindo uma mensagem usando os atributos do objeto

pessoa = Pessoa("Maria", 30) # Criando um objeto da classe Pessoa usando o método construtor
pessoa.falar() # Chamando o método falar do objeto pessoa