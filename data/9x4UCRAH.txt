type ResolvePathType<PathType, TypeKey extends string = 'type'> = 
  PathType extends typeof String ? string :
    PathType extends typeof Number ? number :
      PathType extends typeof Date ? typeof Date.prototype :
      unknown;

type PathWithType<TypeKey extends string = 'type'> = { [k in TypeKey]:any };

type ObtainPathType<FieldType/*=type OR default*/, TypeKey extends string = 'type'> = 
  ResolvePathType<FieldType extends PathWithType<TypeKey> ? FieldType[TypeKey] : FieldType, TypeKey>;

type InferPathType<PathType /*={type:?,default:?}*/, TypeKey extends string = 'type'> = {
  [K in keyof PathType]: ObtainPathType<PathType, TypeKey>
}[keyof PathType];

type InferModelType<TSchema, TypeKey extends string = 'type'> = { 
  [K in keyof TSchema]: InferPathType<TSchema[K], TypeKey>;
};

const Schema = {
  name: {type:String, default:'N/A'},
  email: {type:String},
  age: {type:Number},
  created: {type:Date},
};

type Model = InferModelType<typeof Schema>