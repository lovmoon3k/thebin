static void check_count(size_t expected, size_t actual)
{
   TEST_ASSERT_EQUAL_UINT64(expected, actual);
}

static void check_triplets(size_t count, triplet_t expected[],
                           triplet_t actual[])
{
   // assumes array counts match
   for (size_t i = 0; i < count; ++i) {
      bool triplet_found = false;
      for (size_t j = 0; j < count; ++j) {
         if (expected[i].a == actual[j].a && expected[i].b == actual[j].b &&
             expected[i].c == actual[j].c) {
            triplet_found = true;
            break;
         }
      }
      if (!triplet_found)
         TEST_FAIL();
   }
}

static void test_triplets_whose_sum_is_12(void)
{
   uint16_t sum = 12;
   uint16_t expected_count = 1;
   triplet_t expected_triplets[] = { { 3, 4, 5 } };

   triplets_t *triplets = triplets_with_sum(sum);
   check_count(expected_count, triplets->count);
   check_triplets(expected_count, expected_triplets, triplets->triplets);
   free_triplets(triplets);
}