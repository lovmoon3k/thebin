diff --git a/1.Introduction.tex b/1.Introduction.tex
index 1692abb654fc..0fdc7ec1e5fb 100644
--- a/1.Introduction.tex
+++ b/1.Introduction.tex
@@ -51,7 +51,7 @@ so that the UX of smartphones can be enhanced from HPB-enabled high-performance
 In order to understand how HPB should be managed in a UX-aware fashion, 
 we evaluate how various UX-related performance metrics are affected by different HPB settings on Android environments.
 \hci{To this end, we measure system-level performance metrics that are relevant to the UX quality, such as the app launching, switching, and loading times, instead of the user-perceived responsiveness.
-Doing so enables accurate and reliable UX-quality evaluation, preventing the results from being biased towards specific users.}
+Doing so enables accurate and reliable UX-quality evaluation, preventing the results from being biased toward specific users.}
 %without the impact of performance sensitivity that vary across different users.}
 %we use system-level benchmarks to accurately and reliably measure relevant metrics such as the app launching, switching, and loading times.} 
 From our empirical study, we identify two key requirements for an efficient HPB management scheme in smartphones.  
@@ -93,4 +93,4 @@ In \sect{section3}, we present the key design requirements
 of a UX-aware HPB management scheme based on our empirical observations.
 In \sect{section4}, we describe the design and implementation of \NAME.
 The experimental results are reported in \sect{section5}. 
-Finally, we conclude with a summary in \sect{section6}.
\ No newline at end of file
+Finally, we conclude with a summary in \sect{section6}.
diff --git a/2.Background.tex b/2.Background.tex
index af61a4d5f761..2f3543be0199 100644
--- a/2.Background.tex
+++ b/2.Background.tex
@@ -41,7 +41,7 @@ If the desired L2P entry is found in cache,
 the FTL reads the requested data from the flash 
 by consulting the translation information and returns it to the host.
 To keep track of hot entries, the FTL internally maintains
-a pseudo LRU list for L2P entries. 
+a pseudo-LRU list for L2P entries. 
 The hit L2P entry moves to the head of the list.  
 If the FTL fails to find the matched entry, 
 it has to choose and evict a victim entry to make room in the SRAM. 
@@ -88,7 +88,7 @@ A single HPB entry is 4 KB in size and stores 512 L2P entries.
 The HPB manager retrieves 512 L2P entries from UFS through one fetch command.
 The fetch command involves a normal 4-KB block read request to UFS, so the latency of a single fetch command is comparable to regular read latency.
 Whenever PPAs of L2P entries are changed 
-due to internal operations such as a garbage collection on the UFS device side,
+due to internal operations such as the garbage collection on the UFS device side,
 %due to internal garbage collection operations on the UFS device side,
 the HPB manager is informed of the invalidated PPAs.}
 %UFS informs the host of the invalidated PPAs.}
@@ -108,4 +108,4 @@ The second is to appropriately choose L2P entries to cache within the limited HP
 in production that actively consider the state of apps~\cite{pixel3-kernel-hpb,oneplus-kernel-hpb,oneplus-kernel-hpb-skh,oneplus-kernel-hpb-fs,xiaomi-kernel-hpb,xiaomi-kernel-hpb-skh,s20-kernel-hpb,motorola-kernel-hpb,motorola-kernel-hpb2,motorola-kernel-hpb3,motorola-kernel-hpb4}.}
 The current \yoona{upstream} HPB device driver (included in the Android Common Kernel since v5.10~\cite{HPB_Source})
 employs the \textit{counter-based caching policy} and the \textit{timer-based eviction policy} for efficient HPB memory management.
-However, we argue that both of these policies fail to improve user-perceived delays which we discuss in \sect{section3}.
\ No newline at end of file
+However, we argue that both of these policies fail to improve user-perceived delays which we discuss in \sect{section3}.
diff --git a/3.RelatedWorks.tex b/3.RelatedWorks.tex
index 606e7632b03e..2c55ecbf3377 100644
--- a/3.RelatedWorks.tex
+++ b/3.RelatedWorks.tex
@@ -10,9 +10,9 @@ Classifications of FG and BG apps are pivotal in maintaining good UX on both mob
 Academia also follows this trend and makes use of FG/BG separation to further improve UX.
 Marvin~\cite{Marvin} and Acclaim~\cite{Acclaim} modify the memory management subsystem
 and improve the FG app's performance by de-prioritizing BG apps' memory pages.
-ASAP~\cite{ASAP} categorizes memory pages and prefetches FG-app related pages to improve app switching time. 
+ASAP~\cite{ASAP} categorizes memory pages and prefetches FG app-related pages to improve app switching time. 
 %so that the app switchings can be done faster.
-FastTrack~\cite{FastTrack} accelerates FG I/O requests by resolving I/O priority inversion caused from BG apps.
+FastTrack~\cite{FastTrack} accelerates FG I/O requests by resolving I/O priority inversion caused by BG apps.
 %IORap~\cite{iorap}, a standard feature since Android 11, uses profiled data to prefetch data upon app launches. FG/BG 얘기하다가 너무 뜬금없음.
 % The storage's L2P cache is out-of-scope on these studies and our work can be used in combination for synergistic effects.
 %\TODO{치즈: 아 문장 맘에 안듬.. "synergistic"..... }
diff --git a/4.Analysis.tex b/4.Analysis.tex
index 2ec23c697252..07372f44c94c 100644
--- a/4.Analysis.tex
+++ b/4.Analysis.tex
@@ -53,12 +53,12 @@ mapping cache management policies, and garbage collection.
 To emulate the I/O latency of UFS devices over the ULL-SSD,
 we also include a UFS I/O latency model~\footnote{\yoona{We acquired the numbers for the latency model through a discussion with a storage vendor
 since the official datasheet is not publicly available.}} on the UFS layer.
-The UFS layer borrows a part of host's memory space and uses it as an L2P cache.
+The UFS layer borrows a part of the host's memory space and uses it as an L2P cache.
 For the UFS layer, we assign 512 KB of memory as an L2P cache space~\cite{subpageprogram}.  
 The HPB allocated host memory size is set to 256 MB \yoona{out of the 12 GB of host DRAM}.  
 Note that 1 GB of memory is required to cache the entire L2P mapping table.
 \yoona{Since we use the same system and benchmark setups used in \sect{section5}, 
-more details of the experimental settings is explained in \sect{section5-1}.}
+more details of the experimental settings are explained in \sect{section5-1}.}
 %\sout{Be advised that it requires 1 GB memory to load the entire L2P mapping table.}
 
 
@@ -142,7 +142,7 @@ In order to deliver high-quality UX, reducing every millisecond
 matters~\cite{forbes,nvidia-stutter}.  
 This is further emphasized by the recent mobile hardware trend of shipping displays with higher refresh rates~\cite{rp1,s20,iphone13pro,rog3}.
 For example, just 3.5 ms of delay can result in a noticeable stutter with a 144-Hz display~\cite{jitter}.
-\yoona{It is important to optimize the user-perceived latency since it is well known in the industry that a delay of just 100 ms can have significant consequences in online marketplaces~\cite{forbes}.}
+\yoona{It is important to optimize the user-perceived latency since it is well-known in the industry that a delay of just 100 ms can have significant consequences in online marketplaces~\cite{forbes}.}
 
 We make two prominent observations from the above results. 
 First, even though \texttt{UFS+HPB} borrows relatively a large amount of memory 
@@ -175,10 +175,10 @@ HPB cache. Except for \uber, FG apps experience more L2P cache misses than BG ap
 
 
 
-We analyze detailed behaviors of the \yoona{state-of-the-art} HPB \yoona{management techniques}. We find that the low hit
+We analyze detailed behaviors of \yoona{state-of-the-art} HPB \yoona{management techniques}. We find that the low hit
 ratios of FG apps are mainly due to wrong decisions made by a reference
 count-based L2P fetch policy and a timer-based eviction policy employed
-from the HPB manager in the Android kernel~\cite{HPB_Source}.
+by the HPB manager in the Android kernel~\cite{HPB_Source}.
 The HPB manager measures reference counts of LBAs and 
 fetches L2P entries from the storage that have a large number of reads.
 However, as shown in \FIG{fig: 3_EACH_FG_BG_IO_COUNT_HIT_RATIO},
@@ -206,7 +206,7 @@ Even when the HPB cache space is not full,
 HPB evicts a cached L2P entry that is not referenced for a predefined time 
 (\eg~100 seconds in the Android Common Kernel v5.10~\cite{HPB_Source}).
 This timer-based eviction policy also does not
-consider app usage patterns of the user, and thus often evicts L2P
+consider the app usage patterns of the user, and thus often evicts L2P
 entries associated with FG apps.  
 In general, after using an FG app for a while, a user moves
 to another app and then returns to the former FG app again. 
@@ -271,7 +271,7 @@ the size of HPB memory should be carefully tuned.
 Allocating large amounts of host memory to HPB is beneficial in improving 
 L2P hit ratios. On the other hand, as mentioned in \sect{section3-2},
 assigning too much memory to HPB might result in UX degradation due to an increase in memory pressure.
-To prevent HPB over-consuming memory, the HPB manager employs a timer-based eviction policy.
+To prevent from HPB over-consuming memory, the HPB manager employs a timer-based eviction policy.
 However, as shown in \sect{section3-3}, 
 its FG app-oblivious decisions often cause side effects resulting in evictions of the FG app's L2P entries.
 
@@ -279,7 +279,7 @@ its FG app-oblivious decisions often cause side effects resulting in evictions o
 To understand how much the HPB memory size affects the user-perceived latency,
 we observe how the number of read I/Os changes while varying HPB's memory usage from 0 to 1 GB.
 In our evaluation setup, 1 GB of memory is large enough to keep all of the L2P entries in HPB.
-With recent \yoona{mobile} devices shipped with more and more DRAM (\eg 18 GB)~\cite{rog6}, 
+With recent \yoona{mobile} devices shipped with more and more DRAM (\eg~18 GB)~\cite{rog6}, 
 this amount may sound trivial. However, memory pressure is still often observed in Android systems~\cite{mglru,p7pro-zram}. 
 \yoona{Contrary to server or desktop systems,
 Android tries to maximize memory utilization to maximize its caching capabilities by default~\cite{ANDROIDMEM}.
@@ -297,7 +297,7 @@ is a short-sighted decision with no consideration of its impact on the overall U
 \yoona{From the experimental results shown in the \FIG{fig: 3_app_IO_hit_count},}
 we make two key observations \yoona{on the impact of the different HPB sizes.} %from the experimental results, shown in \FIG{fig: 3_app_IO_hit_count}.
 First, \yoona{the optimal HPB size, which results in the minimal number of flash reads (\ie~app reads + L2P reads),
-is different for each individual app.}
+is different for each app.}
 For example, \instagram shows the minimum number of flash reads with 512 MB whereas \uber only needs 16 MB.
 %when the HPB memory size is 512 MB.
 %  size of HPB memory. 
@@ -343,7 +343,7 @@ FG apps tend to issue an increased number of read I/Os
 
 Under memory pressure, Android starts killing apps to relieve memory pressure. % \yoona{which possibly leads to UX degradation}.
 LMKD uses pressure stall information (PSI)~\cite{psi} provided by the Linux kernel to detect memory pressure situations, and decides when and how to kill apps. 
-Using PSI, \yoona{LMKD monitors memory pressure level and}
+Using PSI, \yoona{LMKD monitors memory pressure levels and}
 %\TODO{detects if UX degradation is imminent} and % memory pressure severe 한거랑 UX degradation imminent??? 의미가 다른거 같음  mem pressuer == UX degradation imminent ?? 그럼 LMKD kill 하면 UX degradation 막아진다는 뜻인가? 모순적임 
 kills the least important app repeatedly until the memory pressure is relieved.
 If the system consumes more memory, 
@@ -359,7 +359,7 @@ To understand how HPB affects the behavior of LMKD (\eg~how often it kills and h
 we analyze the LMKD kill counts for each priority category.
 \FIG{fig: 3_LMKD_HISTO} shows the histogram of LMKD kill counts with different HPB sizes. 
 The higher the priority is, 
-the more user-perceptible the app is (\eg~the second highest apps are the user recently used ones but in the BG)~\cite{oom-score}.
+the more user-perceptible the app is (\eg~the second-highest apps are the user recently used ones but in the BG)~\cite{oom-score}.
 %The priority of an app is denoted by different colors inside the bar. 
 \yoona{As expected, an increase in the HPB size 
 results in a greater number of apps and a higher proportion of high-priority apps being killed by LMKD.
@@ -383,7 +383,7 @@ we conclude that the state-of-the-art timer-based HPB size adjustment policy is
 it cannot dynamically relieve memory pressure as HPB is unaware of the current memory pressure status. 
 \yoona{Second, when users run multiple apps simultaneously the system will suffer from severe memory pressure due to the increased memory utilization by both user apps and the HPB. 
 In such a case, the timer-based eviction policy is unable to proactively and selectively evict cached entries as most \yoona{HPB cached entries are} recently referenced.
-Managing HPB memory with unawareness of the memory pressure status poses a significant risk in degrading the UX.
+Managing HPB memory with unawareness of the memory pressure status poses a significant risk of degrading the UX.
 To achieve the best HPB performance, 
 the size of HPB memory should be dynamically adjusted by considering the memory pressure status  
 while not sacrificing the L2P cache performance.}
@@ -397,9 +397,9 @@ while not sacrificing the L2P cache performance.}
 %Memory pressure is more often observed when a user uses multiple apps simultaneously.
 %Under such circumstances, the utilization of HPB increases while the timer-based eviction policy is 
 %unable to proactively free entries as most \yoona{HPB cached entries might be} recently referenced.
-%\yoona{Second, memory pressure is still often observed in Android systems~\cite{mglru,p7pro-zram} even for devices with a large amount of memory (\eg 12 GB, 16 GB). 
+%\yoona{Second, memory pressure is still often observed in Android systems~\cite{mglru,p7pro-zram} even for devices with a large amount of memory (\eg~12 GB, 16 GB). 
 %This is because contrary to server or desktop systems, Android operates the system with minimal available memory to maximize its caching capabilities~\cite{ANDROIDMEM}.
 %Consequently, relieving memory pressure on Android depends on LMK killing the least important apps.}
 %To achieve the best performance of HPB, the HPB memory has to be adjusted with an awareness of the host memory pressure conditions  % and adjust accordingly
 %while ensuring the performance of the L2P cache is not scarified. 
-%while at the same time minimizing the L2P cache misses of FG apps to alleviate L2P cache-miss penalties. 
\ No newline at end of file
+%while at the same time minimizing the L2P cache misses of FG apps to alleviate L2P cache-miss penalties. 
diff --git a/5.Design.tex b/5.Design.tex
index ffc9e867269a..1de332e598d2 100644
--- a/5.Design.tex
+++ b/5.Design.tex
@@ -7,10 +7,10 @@ existing techniques neither efficiently cache or evict L2P entries in the
 HPB memory nor decide a proper size of the HPB memory from the perspective of
 maximizing user-perceived performance. 
 
-To improve user-perceived latency of smartphones,
+To improve the user-perceived latency of smartphones,
 we should minimize the L2P cache misses of I/O requests from FG apps.
 If UX-sensitive I/O requests are always hit by the HPB memory, 
-smartphone users experience equivalent performance as if the entire L2P entries are cached.
+smartphone users experience the equivalent performance as if the entire L2P entries are cached.
 At the same time, to prevent user-noticeable and important apps from being killed by LMKD,
 we should wisely adjust the HPB size according to the status of
 the system memory \yoona{pressure}.
@@ -29,8 +29,8 @@ mapping management scheme, called \NAMEFull (\NAME in short),
 which addresses the limitations of existing techniques. 
 \yoona{We aim to design \NAME to be simple yet effective for its wide adoption in real-world devices.
 %\NAME is designed to be simple yet effective, making it easy to deploy in real-world devices. 
-To this end, \NAME leverages information that is already collected by other existing modules in Android platform,
-which enables \NAME to exploit a variety of information in a vertically-integrated manner at low cost.}
+To this end, \NAME leverages information that is already collected by other existing modules in the Android platform,
+which enables \NAME to exploit a variety of information in a vertically-integrated manner at a low cost.}
 %without becoming overly complicated.}
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Architecture %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@@ -106,7 +106,7 @@ by referring to Android's activity task manager~\cite{activitymanager}.
 Upon every app state change detected, 
 \AD delivers a state change message to \NAME.
 For example, when a new FG launch is detected,
-\AD delivers a launch-start signal (\eg~a new FG app is launched) to the HPB in kernel along with its UID.
+\AD delivers a launch-start signal (\eg~a new FG app is launched) to the HPB in the kernel along with its UID.
 \NAME makes use of the delivered information
 for distinguishing every FG app submitted I/O.
 If an I/O request passed to the block layer has a different UID
@@ -146,7 +146,7 @@ In addition to this, \NAME cache L2P entries that satisfy
 the following conditions.
 First, for every HPB cache miss that originated from the current FG app,
 the \HM immediately caches the corresponding L2P entry to the HPB memory to prevent further cache misses of the said L2P. 
-Second, a set of L2P entries of the launched FG app are directly cached to the HPB memory with the help of \textbf{\PM} upon every app launch signal.
+Second, a set of L2P entries of the launched FG app are directly cached to the HPB memory with the help of the \textbf{\PM} upon every app launch signal.
 \PM is designed to collect information on the current FG app to help HPB prioritize FG L2P entries to improve the launching time as well as the total user-perceived latency.
 
 \begin{figure}[t]
@@ -168,7 +168,7 @@ two separate L2P profiling lists: \textit{app launch list} and \textit{app runni
 The app launch list contains a list of LBAs that are referenced during
 an app launch (\ie~from a launch-start signal to a launch-end signal, delivered by \AD).
 Conversely, the app running list holds a list of LBAs that are accessed 
-after launch (\ie~after a launch-end and is ready to take a user inputs signal).
+after launch (\ie~after a launch-end and ready to take a user inputs signal).
 
 
 \FIG{fig: applistupdate} illustrates an example of how the \PM maintains the L2P profiling lists of FG apps.
@@ -215,7 +215,7 @@ the start chunk of the accessed LBA and the length of the neighboring referenced
 Each of the profiling lists only requires a few tens of kilobytes for most apps, 7 KB on average.
 Moreover, to prevent the per-app L2P profiling lists from excessively consuming the host DRAM, 
 we statically limit the maximum size of the total profiling lists to 1 MB.
-\yoona{\NAME does not provide a special handling for deduplicating entries between app lists.
+\yoona{\NAME does not provide special handling for deduplicating entries between app lists.
 Since the size of an entry of the profiled per-app list is limited to 32 bits,
 it is unlikely that significant memory gain can be achieved by removing duplicate entries between lists.}
 If the number of profiled apps exceeds the predefined limit, 
@@ -250,7 +250,7 @@ are mistakenly killed by LMKD.
 
 With \NAME, if a non-memory-intensive app runs and the system has enough free memory, 
 the HPB size can increase to cover the entire L2P mapping table.
-This enables us to maximally exploit full benefits of HPB.
+This enables us to maximally exploit the full benefits of HPB.
 However, whenever the system starts to experience memory pressure,
 \NAME immediately adjusts the HPB size accordingly, returning memory for apps to use.
 As a result, the degradation of UX by excessively assigning host memory to HPB does not occur.
@@ -269,19 +269,19 @@ As a result, the degradation of UX by excessively assigning host memory to HPB d
 \FIG{fig: Size Regulator} illustrates how \NAMEDynamic dynamically adjusts the allocated HPB memory. 
 As discussed in \sect{section3-4}, 
 Android employs LMKD which selectively kills running apps to relieve memory pressure.
-Once LMKD decides a victim app to kill,
+Once LMKD decides on a victim app to kill,
 the \textbf{\MPD} notifies the \textbf{\HR} with the target's UID before LMKD starts killing the victim app (\mcirc{1}).
 The \HR decides how important the victim app is by checking the per-app L2P profiling list (\mcirc{2}).
-If the victim app is not found in the per-app L2P profiling list (\ie~\yoona{not a user recently used app}), 
+If the victim app is not found in the per-app L2P profiling list (\ie~not a user recently used app), 
 the signal is ignored and leaves LMKD to continue killing the victim app.
 On the other hand, if the victim app exists in the per-app L2P profiling list,
 it is treated as an important app (\ie~a user recently interacted app).
-Then to prevent \yoona{the important app} being killed by LMKD, 
+Then to prevent \yoona{the important app} from being killed by LMKD, 
 \NAME preferentially reclaims the HPB memory by aggressively evicting low-priority cached L2P entries.
 %\TODO{LMKD 멈추고 이 동작 수행한다고 설명 추가}
 
 To decide how much memory to free from HPB,
-\yoona{the properties of the LMKD victim app is taken into consideration.
+\yoona{the properties of the LMKD victim app are taken into consideration.
 As LMKD calculates the expected amount of memory to be freed upon its victim selection, 
 \NAME attempts to free as much as the LMKD desired amount.} 
 When the \HR tells \HM how much HPB memory to free (\mcirc{3}),
@@ -290,19 +290,19 @@ to prevent the LMKD killing its victim app.}
 
 The \HM considers the priority of cached L2P entries when choosing which entries to evict.
 \NAME marks every cached L2P entry with its last-referenced UID,
-and stores to \yoona{an} LRU list \yoona{(\eg AFG, IFG or BG)} depending on the type of the app it belongs to.
+and stores to \yoona{an} LRU list \yoona{(\eg~AFG, IFG or BG)} depending on the type of the app it belongs to.
 With the three separate LRU lists, 
 \NAME can make a fine-grained decision on which entry to evict first
 as \NAME is aware of 
 which entries belong to the BG apps (\textit{BG list}), 
-a user recently-used FG apps (\textit{inactive FG list}), 
+a user recently used FG apps (\textit{inactive FG list}), 
 and a currently user-facing FG app (\textit{active FG list}).
 The \HM starts to evict entries from the tail of the \textit{BG list}, (\vcirc{4}).
 If there are no more entries from the \textit{BG list} to evict,
-ones from the \textit{inactive FG list} are tried next.
+the ones from the \textit{inactive FG list} are tried next.
 \HM never evicts entries from the \textit{active FG list} to avoid UX degradation.
 The entries in the \textit{inactive FG list} will naturally get evicted by the \HM if it is left unused for a long time.
-On the other hand, the entries in the \textit{BG list} can get promoted to the \textit{FG list} if \yoona{an FG app references entries in the the \textit{BG list}.} 
+On the other hand, the entries in the \textit{BG list} can get promoted to the \textit{FG list} if \yoona{an FG app references entries in the \textit{BG list}.} 
 
 {The proposed dynamic HPB size adjustment policy of \NAME may result in an increase in the execution time of the LMKD's app-killing process.
 This occurs when there is an insufficient number of HPB cached entries that can be evicted to alleviate the memory pressure.
@@ -310,11 +310,11 @@ In such a case, LMKD has to resume the paused app-killing process to reserve fre
 %Thus, the total execution time of the app-killing process is prolonged but marginal. 
 %inevitably increasing the execution time for reserving free memory.
 The increased amount of execution time, however, is marginal compared to the relatively longer procedure of LMKD. 
-In addition, in a long-term perspective, the dynamic HPB size adjustment is much more beneficial to the overall UX quality
+In addition, from a long-term perspective, the dynamic HPB size adjustment is much more beneficial to the overall UX quality
 as it prevents user apps from being killed. 
 %When \NAME successfully relieved memory pressure, it prevents user apps from being killed by LMKD. 
 %%% 여기 다시 쓰기... 
-More detailed analysis is described in \sect{section6-4}.}
+A more detailed analysis is described in \sect{section6-4}.}
 
 %an increase in the LMKD's execution time is negligible 
 %since the HPB size adjustment of \NAME is done much faster than the app-killing process. 
diff --git a/6.Experiment.tex b/6.Experiment.tex
index ee5e07a0f21d..5f0dc95dd587 100644
--- a/6.Experiment.tex
+++ b/6.Experiment.tex
@@ -31,7 +31,7 @@ For example, \genshin goes through three separate loading stages until the gamep
 while the \texttt{am start} command only measures the time taken until the first stage.}
 %\texttt{am start} does not calculate the amount of time until an app accepts input from the user.
 To precisely measure the app loading time,
-we employ an external high-speed camera\yoona{, which captures 120 frames per second that match the refresh rate of our evaluation platform's display.}
+we employ an external high-speed camera, \yoona{which captures 120 frames per second that match the refresh rate of our evaluation platform's display.}
 %All frames were separately saved and processed through OpenCV to detect the predefined reference frames.}
 %to measure time beyond what \texttt{am start} reports for game apps.
 %\yoona{The camera we used captures at 120 fps which matches the refresh rate of our evaluation platform's display.}
@@ -121,7 +121,7 @@ on the overall UX quality compared against \UH.
 As for the most important performance evaluation metrics in deciding the quality of UX, 
 we assess the app launching, \yoona{switching}, and loading times of various HPB configurations.
 
-\FIG{fig: 5_launch_time}(a) shows the experimental results \yoona{of the \applaunchingtime}.
+\FIG{fig: 5_launch_time}(a) shows the experimental results of the \applaunchingtime.
 The average \applaunchingtime of \NAME is improved 
 by 28\% and 23\% when compared to \UFS and \UH, respectively.
 The maximum and minimum \applaunchingtime improvements between \NAME and \UH 
@@ -133,7 +133,7 @@ are only by 4 ms (\texttt{+}0.85\%) for \airbnb and 55 ms (\texttt{+}4.7\%) for
 On the other hand, \UH takes 40 ms (\texttt{+}8.5\%) for \airbnb and 514 ms (\texttt{+}43.1\%) for \instagram more when compared to \OP.
 
 
-\yoona{We also measure the \appswitchingtime{} -- latency of when a user switches back to an app that is recently launched.
+\yoona{We also measure the \appswitchingtime{} -- the latency of when a user switches back to an app that is recently launched.
 As shown in \FIG{fig: 5_launch_time}(b), \NAME outperforms \UH for all cases.
 The maximum \appswitchingtime difference between \NAME and \OP
 is only 4.6 ms (\texttt{+}3.15\%) with \facebook
@@ -242,7 +242,7 @@ The largest hit ratio difference between \HO and \NAMEO is 84.79\% with \uber.
 This result proves that the L2P prefetching mechanism successfully improves 
 the performance of FG apps by hiding miss penalties.
 The above results also confirm that 
-\NAME is effective in providing a better quality of UX as it actively reflects the app usage patterns of individual smartphone users in managing the HPB memory.
+\NAME is effective in providing a better quality UX as it actively reflects the app usage patterns of individual smartphone users in managing the HPB memory.
 
 
 
@@ -253,7 +253,7 @@ The above results also confirm that
 We compare \NAME with \UH to evaluate the impact of our proposed dynamic HPB size adjustment scheme on UX.
 While \NAME dynamically adjusts the HPB size depending on the monitored memory pressure status, 
 \UH statically allocates the HPB size and adjusts it with a simple timer-based eviction policy.
-In this evaluation, we set \UFS as a baseline, which does not require extra host DRAM to load storage mapping entries (\ie no impact on the memory pressure).
+In this evaluation, we set \UFS as a baseline, which does not require extra host DRAM to load storage mapping entries (\ie~no impact on the memory pressure).
 %to assess the effectiveness of \NAME and \UH on the memory pressure. % the impact of each case to \UFS.
 
 \begin{figure}[hb!]
@@ -307,7 +307,7 @@ On the other hand, \NAME allocates host the DRAM to HPB memory and effectively r
 in a harmonized manner with the memory pressure status.
 As a consequence, shown in \FIG{fig: 5_killhisto}(a), 
 the number of important apps killed by LMKD with \NAME is much lower than that of \UH.
-\yoona{This is because \NAME proactively prevents LMKD killing the high-priority apps %from being killed by LMKD
+\yoona{This is because \NAME proactively prevents LMKD from killing the high-priority apps %from being killed by LMKD
 by promptly returning the HPB-allocated memory to the user apps under the monitored memory pressure signals.}
 
 
@@ -370,4 +370,4 @@ On the other hand, re-fetching the HPB entries only requires a much smaller numb
 \textbf{Energy Consumption:} Even with some additional HPB management techniques we proposed, 
 \NAME is also more energy-efficient compared to \UH. 
 Since the execution time of an app is reduced with \NAME, the total energy consumption with \NAME is decreased by 3.51\%.
-On the other hand, \UH increases the total energy consumption compared to \OP by 4.02\% while \NAME only increases it by 0.56\%.}
\ No newline at end of file
+On the other hand, \UH increases the total energy consumption compared to \OP by 4.02\% while \NAME only increases it by 0.56\%.}